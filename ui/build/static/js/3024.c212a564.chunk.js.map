{"version":3,"file":"static/js/3024.c212a564.chunk.js","mappings":"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","sources":["api/tools.js","ui-component/editor/CodeEditor.js","ui-component/tooltip/TooltipWithParser.js","api/marketplaces.js","views/marketplaces/index.js","ui-component/grid/Grid.js","views/tools/ToolDialog.js"],"sourcesContent":["import client from './client'\n\nconst getAllTools = () => client.get('/tools')\n\nconst getSpecificTool = (id) => client.get(`/tools/${id}`)\n\nconst createNewTool = (body) => client.post(`/tools`, body)\n\nconst updateTool = (id, body) => client.put(`/tools/${id}`, body)\n\nconst deleteTool = (id) => client.delete(`/tools/${id}`)\n\nexport default {\n    getAllTools,\n    getSpecificTool,\n    createNewTool,\n    updateTool,\n    deleteTool\n}\n","import PropTypes from 'prop-types'\nimport CodeMirror from '@uiw/react-codemirror'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { json } from '@codemirror/lang-json'\nimport { vscodeDark } from '@uiw/codemirror-theme-vscode'\nimport { sublime } from '@uiw/codemirror-theme-sublime'\nimport { EditorView } from '@codemirror/view'\n\nexport const CodeEditor = ({ value, height, theme, lang, placeholder, disabled = false, basicSetup = {}, onValueChange }) => {\n    const customStyle = EditorView.baseTheme({\n        '&': {\n            color: '#191b1f',\n            padding: '10px'\n        },\n        '.cm-placeholder': {\n            color: 'rgba(120, 120, 120, 0.5)'\n        }\n    })\n\n    return (\n        <CodeMirror\n            placeholder={placeholder}\n            value={value}\n            height={height ?? 'calc(100vh - 220px)'}\n            theme={theme === 'dark' ? (lang === 'js' ? vscodeDark : sublime) : 'none'}\n            extensions={\n                lang === 'js'\n                    ? [javascript({ jsx: true }), EditorView.lineWrapping, customStyle]\n                    : [json(), EditorView.lineWrapping, customStyle]\n            }\n            onChange={onValueChange}\n            readOnly={disabled}\n            editable={!disabled}\n            basicSetup={basicSetup}\n        />\n    )\n}\n\nCodeEditor.propTypes = {\n    value: PropTypes.string,\n    height: PropTypes.string,\n    theme: PropTypes.string,\n    lang: PropTypes.string,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n    basicSetup: PropTypes.object,\n    onValueChange: PropTypes.func\n}\n","import { Info } from '@mui/icons-material'\nimport { IconButton, Tooltip } from '@mui/material'\nimport parser from 'html-react-parser'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\n\nexport const TooltipWithParser = ({ title, style }) => {\n    const customization = useSelector((state) => state.customization)\n\n    return (\n        <Tooltip title={parser(title)} placement='right'>\n            <IconButton sx={{ height: 15, width: 15 }}>\n                <Info\n                    style={{\n                        ...style,\n                        background: 'transparent',\n                        color: customization.isDarkMode ? 'white' : 'inherit',\n                        height: 15,\n                        width: 15\n                    }}\n                />\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nTooltipWithParser.propTypes = {\n    title: PropTypes.node,\n    style: PropTypes.any\n}\n","import client from './client'\n\nconst getAllChatflowsMarketplaces = () => client.get('/marketplaces/chatflows')\nconst getAllToolsMarketplaces = () => client.get('/marketplaces/tools')\n\nexport default {\n    getAllChatflowsMarketplaces,\n    getAllToolsMarketplaces\n}\n","import { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { Grid, Box, Stack, Tabs, Tab, Badge, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconHierarchy, IconTool } from '@tabler/icons'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport ItemCard from 'ui-component/cards/ItemCard'\nimport { gridSpacing } from 'store/constant'\nimport WorkflowEmptySVG from 'assets/images/workflow_empty.svg'\nimport ToolDialog from 'views/tools/ToolDialog'\n\n// API\nimport marketplacesApi from 'api/marketplaces'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// const\nimport { baseURL } from 'store/constant'\nimport { withAuthenticationRequired } from '@auth0/auth0-react'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\n// ==============================|| Marketplace ||============================== //\n\nconst Marketplace = () => {\n    const navigate = useNavigate()\n\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n\n    const [isChatflowsLoading, setChatflowsLoading] = useState(true)\n    const [isToolsLoading, setToolsLoading] = useState(true)\n    const [images, setImages] = useState({})\n    const tabItems = ['Chatflows', 'Tools']\n    const [value, setValue] = useState(0)\n    const [showToolDialog, setShowToolDialog] = useState(false)\n    const [toolDialogProps, setToolDialogProps] = useState({})\n\n    const getAllChatflowsMarketplacesApi = useApi(marketplacesApi.getAllChatflowsMarketplaces)\n    const getAllToolsMarketplacesApi = useApi(marketplacesApi.getAllToolsMarketplaces)\n\n    const onUseTemplate = (selectedTool) => {\n        const dialogProp = {\n            title: 'Add New Tool',\n            type: 'IMPORT',\n            cancelButtonName: 'Cancel',\n            confirmButtonName: 'Add',\n            data: selectedTool\n        }\n        setToolDialogProps(dialogProp)\n        setShowToolDialog(true)\n    }\n\n    const goToTool = (selectedTool) => {\n        const dialogProp = {\n            title: selectedTool.templateName,\n            type: 'TEMPLATE',\n            data: selectedTool\n        }\n        setToolDialogProps(dialogProp)\n        setShowToolDialog(true)\n    }\n\n    const goToCanvas = (selectedChatflow) => {\n        navigate(`/marketplace/${selectedChatflow.id}`, { state: selectedChatflow })\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    // Request for getting data of chatflows and tools\n    useEffect(() => {\n        getAllChatflowsMarketplacesApi.request()\n        getAllToolsMarketplacesApi.request()\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        setChatflowsLoading(getAllChatflowsMarketplacesApi.loading)\n    }, [getAllChatflowsMarketplacesApi.loading])\n\n    useEffect(() => {\n        setToolsLoading(getAllToolsMarketplacesApi.loading)\n    }, [getAllToolsMarketplacesApi.loading])\n\n    useEffect(() => {\n        if (getAllChatflowsMarketplacesApi.data) {\n            try {\n                const chatflows = getAllChatflowsMarketplacesApi.data\n                const images = {}\n                for (let i = 0; i < chatflows.length; i += 1) {\n                    const flowDataStr = chatflows[i].flowData\n                    const flowData = JSON.parse(flowDataStr)\n                    const nodes = flowData.nodes || []\n                    images[chatflows[i].id] = []\n                    for (let j = 0; j < nodes.length; j += 1) {\n                        const imageSrc = `${baseURL}/api/v1/node-icon/${nodes[j].data.name}`\n                        if (!images[chatflows[i].id].includes(imageSrc)) {\n                            images[chatflows[i].id].push(imageSrc)\n                        }\n                    }\n                }\n                setImages(images)\n            } catch (e) {\n                console.error(e)\n            }\n        }\n    }, [getAllChatflowsMarketplacesApi.data])\n\n    return (\n        <>\n            <MainCard sx={{ background: customization.isDarkMode ? theme.palette.common.black : '' }}>\n                <Stack flexDirection='row'>\n                    {/* <h1>Marketplace</h1> */}\n                    <Typography variant='h1'>Marketplace</Typography>\n                </Stack>\n                <Tabs sx={{ mb: 2 }} variant='fullWidth' value={value} onChange={handleChange} aria-label='tabs'>\n                    {tabItems.map((item, index) => (\n                        <Tab\n                            key={index}\n                            icon={index === 0 ? <IconHierarchy /> : <IconTool />}\n                            iconPosition='start'\n                            label={<span style={{ fontSize: '1.1rem' }}>{item}</span>}\n                        />\n                    ))}\n                </Tabs>\n                {tabItems.map((item, index) => (\n                    <TabPanel key={index} value={value} index={index}>\n                        {item === 'Chatflows' && (\n                            <Grid container spacing={gridSpacing}>\n                                {!isChatflowsLoading &&\n                                    getAllChatflowsMarketplacesApi.data &&\n                                    getAllChatflowsMarketplacesApi.data.map((data, index) => (\n                                        <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\n                                            {data.badge && (\n                                                <Badge\n                                                    sx={{\n                                                        '& .MuiBadge-badge': {\n                                                            right: 20\n                                                        }\n                                                    }}\n                                                    badgeContent={data.badge}\n                                                    color={data.badge === 'POPULAR' ? 'primary' : 'error'}\n                                                >\n                                                    <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.id]} />\n                                                </Badge>\n                                            )}\n                                            {!data.badge && (\n                                                <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.id]} />\n                                            )}\n                                        </Grid>\n                                    ))}\n                            </Grid>\n                        )}\n                        {item === 'Tools' && (\n                            <Grid container spacing={gridSpacing}>\n                                {!isToolsLoading &&\n                                    getAllToolsMarketplacesApi.data &&\n                                    getAllToolsMarketplacesApi.data.map((data, index) => (\n                                        <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\n                                            {data.badge && (\n                                                <Badge\n                                                    sx={{\n                                                        '& .MuiBadge-badge': {\n                                                            right: 20\n                                                        }\n                                                    }}\n                                                    badgeContent={data.badge}\n                                                    color={data.badge === 'POPULAR' ? 'primary' : 'error'}\n                                                >\n                                                    <ItemCard data={data} onClick={() => goToTool(data)} />\n                                                </Badge>\n                                            )}\n                                            {!data.badge && <ItemCard data={data} onClick={() => goToTool(data)} />}\n                                        </Grid>\n                                    ))}\n                            </Grid>\n                        )}\n                    </TabPanel>\n                ))}\n                {((!isChatflowsLoading && (!getAllChatflowsMarketplacesApi.data || getAllChatflowsMarketplacesApi.data.length === 0)) ||\n                    (!isToolsLoading && (!getAllToolsMarketplacesApi.data || getAllToolsMarketplacesApi.data.length === 0))) && (\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\n                        <Box sx={{ p: 2, height: 'auto' }}>\n                            <img\n                                style={{ objectFit: 'cover', height: '30vh', width: 'auto' }}\n                                src={WorkflowEmptySVG}\n                                alt='WorkflowEmptySVG'\n                            />\n                        </Box>\n                        <div>No Marketplace Yet</div>\n                    </Stack>\n                )}\n            </MainCard>\n            <ToolDialog\n                show={showToolDialog}\n                dialogProps={toolDialogProps}\n                onCancel={() => setShowToolDialog(false)}\n                onConfirm={() => setShowToolDialog(false)}\n                onUseTemplate={(tool) => onUseTemplate(tool)}\n            ></ToolDialog>\n        </>\n    )\n}\n\nexport default withAuthenticationRequired(Marketplace)\n","import PropTypes from 'prop-types'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { IconPlus } from '@tabler/icons'\nimport { Button } from '@mui/material'\n\nexport const Grid = ({ columns, rows, style, disabled = false, onRowUpdate, addNewRow }) => {\n    const handleProcessRowUpdate = (newRow) => {\n        onRowUpdate(newRow)\n        return newRow\n    }\n\n    return (\n        <>\n            {!disabled && (\n                <Button variant='outlined' onClick={addNewRow} startIcon={<IconPlus />}>\n                    Add Item\n                </Button>\n            )}\n            {rows && columns && (\n                <div style={{ marginTop: 10, height: 300, width: '100%', ...style }}>\n                    <DataGrid\n                        processRowUpdate={handleProcessRowUpdate}\n                        isCellEditable={() => {\n                            return !disabled\n                        }}\n                        onProcessRowUpdateError={(error) => console.error(error)}\n                        rows={rows}\n                        columns={columns}\n                    />\n                </div>\n            )}\n        </>\n    )\n}\n\nGrid.propTypes = {\n    rows: PropTypes.array,\n    columns: PropTypes.array,\n    style: PropTypes.any,\n    disabled: PropTypes.bool,\n    addNewRow: PropTypes.func,\n    onRowUpdate: PropTypes.func\n}\n","import { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\nimport { cloneDeep } from 'lodash'\n\nimport { Box, Typography, Button, Dialog, DialogActions, DialogContent, DialogTitle, Stack, OutlinedInput } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { Grid } from 'ui-component/grid/Grid'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\nimport { GridActionsCellItem } from '@mui/x-data-grid'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { CodeEditor } from 'ui-component/editor/CodeEditor'\n\n// Icons\nimport { IconX, IconFileExport } from '@tabler/icons'\n\n// API\nimport toolsApi from 'api/tools'\n\n// Hooks\nimport useConfirm from 'hooks/useConfirm'\nimport useApi from 'hooks/useApi'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\nimport { generateRandomGradient, formatDataGridRows } from 'utils/genericHelper'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\nconst exampleAPIFunc = `/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Output Schema as variables. Ex: Property = userid, Variable = $userid\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}`\n\nconst ToolDialog = ({ show, dialogProps, onUseTemplate, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n\n    const customization = useSelector((state) => state.customization)\n    const dispatch = useDispatch()\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const { confirm } = useConfirm()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const getSpecificToolApi = useApi(toolsApi.getSpecificTool)\n\n    const [toolId, setToolId] = useState('')\n    const [toolName, setToolName] = useState('')\n    const [toolDesc, setToolDesc] = useState('')\n    const [toolIcon, setToolIcon] = useState('')\n    const [toolSchema, setToolSchema] = useState([])\n    const [toolFunc, setToolFunc] = useState('')\n\n    const deleteItem = useCallback(\n        (id) => () => {\n            setTimeout(() => {\n                setToolSchema((prevRows) => prevRows.filter((row) => row.id !== id))\n            })\n        },\n        []\n    )\n\n    const addNewRow = () => {\n        setTimeout(() => {\n            setToolSchema((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                const lastRowId = allRows.length ? allRows[allRows.length - 1].id + 1 : 1\n                allRows.push({\n                    id: lastRowId,\n                    property: '',\n                    description: '',\n                    type: '',\n                    required: false\n                })\n                return allRows\n            })\n        })\n    }\n\n    const onRowUpdate = (newRow) => {\n        setTimeout(() => {\n            setToolSchema((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                const indexToUpdate = allRows.findIndex((row) => row.id === newRow.id)\n                if (indexToUpdate >= 0) {\n                    allRows[indexToUpdate] = { ...newRow }\n                }\n                return allRows\n            })\n        })\n    }\n\n    const columns = useMemo(\n        () => [\n            { field: 'property', headerName: 'Property', editable: true, flex: 1 },\n            {\n                field: 'type',\n                headerName: 'Type',\n                type: 'singleSelect',\n                valueOptions: ['string', 'number', 'boolean', 'date'],\n                editable: true,\n                width: 120\n            },\n            { field: 'description', headerName: 'Description', editable: true, flex: 1 },\n            { field: 'required', headerName: 'Required', type: 'boolean', editable: true, width: 80 },\n            {\n                field: 'actions',\n                type: 'actions',\n                width: 80,\n                getActions: (params) => [\n                    <GridActionsCellItem key={'Delete'} icon={<DeleteIcon />} label='Delete' onClick={deleteItem(params.id)} />\n                ]\n            }\n        ],\n        [deleteItem]\n    )\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    useEffect(() => {\n        if (getSpecificToolApi.data) {\n            setToolId(getSpecificToolApi.data.id)\n            setToolName(getSpecificToolApi.data.name)\n            setToolDesc(getSpecificToolApi.data.description)\n            setToolSchema(formatDataGridRows(getSpecificToolApi.data.schema))\n            if (getSpecificToolApi.data.func) setToolFunc(getSpecificToolApi.data.func)\n            else setToolFunc('')\n        }\n    }, [getSpecificToolApi.data])\n\n    useEffect(() => {\n        if (dialogProps.type === 'EDIT' && dialogProps.data) {\n            // When tool dialog is opened from Tools dashboard\n            setToolId(dialogProps.data.id)\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'EDIT' && dialogProps.toolId) {\n            // When tool dialog is opened from CustomTool node in canvas\n            getSpecificToolApi.request(dialogProps.toolId)\n        } else if (dialogProps.type === 'IMPORT' && dialogProps.data) {\n            // When tool dialog is to import existing tool\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'TEMPLATE' && dialogProps.data) {\n            // When tool dialog is a template\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'ADD') {\n            // When tool dialog is to add a new tool\n            setToolId('')\n            setToolName('')\n            setToolDesc('')\n            setToolIcon('')\n            setToolSchema([])\n            setToolFunc('')\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    const useToolTemplate = () => {\n        onUseTemplate(dialogProps.data)\n    }\n\n    const exportTool = async () => {\n        try {\n            const toolResp = await toolsApi.getSpecificTool(toolId)\n            if (toolResp.data) {\n                const toolData = toolResp.data\n                delete toolData.id\n                delete toolData.createdDate\n                delete toolData.updatedDate\n                let dataStr = JSON.stringify(toolData, null, 2)\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n                let exportFileDefaultName = `${toolName}-CustomTool.json`\n\n                let linkElement = document.createElement('a')\n                linkElement.setAttribute('href', dataUri)\n                linkElement.setAttribute('download', exportFileDefaultName)\n                linkElement.click()\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to export Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const addNewTool = async () => {\n        try {\n            const obj = {\n                name: toolName,\n                description: toolDesc,\n                color: generateRandomGradient(),\n                schema: JSON.stringify(toolSchema),\n                func: toolFunc,\n                iconSrc: toolIcon\n            }\n            const createResp = await toolsApi.createNewTool(obj)\n            if (createResp.data) {\n                enqueueSnackbar({\n                    message: 'New Tool added',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onConfirm(createResp.data.id)\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to add new Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const saveTool = async () => {\n        try {\n            const saveResp = await toolsApi.updateTool(toolId, {\n                name: toolName,\n                description: toolDesc,\n                schema: JSON.stringify(toolSchema),\n                func: toolFunc,\n                iconSrc: toolIcon\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Tool saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onConfirm(saveResp.data.id)\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const deleteTool = async () => {\n        const confirmPayload = {\n            title: `Delete Tool`,\n            description: `Delete tool ${toolName}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                const delResp = await toolsApi.deleteTool(toolId)\n                if (delResp.data) {\n                    enqueueSnackbar({\n                        message: 'Tool deleted',\n                        options: {\n                            key: new Date().getTime() + Math.random(),\n                            variant: 'success',\n                            action: (key) => (\n                                <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                    <IconX />\n                                </Button>\n                            )\n                        }\n                    })\n                    onConfirm()\n                }\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: `Failed to delete Tool: ${errorData}`,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onCancel()\n            }\n        }\n    }\n\n    const component = show ? (\n        <Dialog\n            fullWidth\n            maxWidth='md'\n            open={show}\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }} />\n                    {dialogProps.type === 'EDIT' && (\n                        <Button variant='outlined' onClick={() => exportTool()} startIcon={<IconFileExport />}>\n                            Export\n                        </Button>\n                    )}\n                </div>\n            </DialogTitle>\n            <DialogContent>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Tool Name\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title={'Tool name must be small capital letter with underscore. Ex: my_tool'}\n                            />\n                        </Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolName'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='My New Tool'\n                        value={toolName}\n                        name='toolName'\n                        onChange={(e) => setToolName(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Tool description\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title={'Description of what the tool does. This is for ChatGPT to determine when to use this tool.'}\n                            />\n                        </Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolDesc'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='Description of what the tool does. This is for ChatGPT to determine when to use this tool.'\n                        multiline={true}\n                        rows={3}\n                        value={toolDesc}\n                        name='toolDesc'\n                        onChange={(e) => setToolDesc(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>Tool Icon Src</Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolIcon'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='https://raw.githubusercontent.com/gilbarbara/logos/main/logos/airtable.svg'\n                        value={toolIcon}\n                        name='toolIcon'\n                        onChange={(e) => setToolIcon(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Output Schema\n                            <TooltipWithParser style={{ marginLeft: 10 }} title={'What should be the output response in JSON format?'} />\n                        </Typography>\n                    </Stack>\n                    <Grid\n                        columns={columns}\n                        rows={toolSchema}\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        addNewRow={addNewRow}\n                        onRowUpdate={onRowUpdate}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Javascript Function\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title='Function to execute when tool is being used. You can use properties specified in Output Schema as variables. For example, if the property is <code>userid</code>, you can use as <code>$userid</code>. Return value must be a string. You can also override the code from API by following this <a target=\"_blank\" href=\"https://docs.flowiseai.com/tools/custom-tool#override-function-from-api\">guide</a>'\n                            />\n                        </Typography>\n                    </Stack>\n                    {dialogProps.type !== 'TEMPLATE' && (\n                        <Button style={{ marginBottom: 10 }} variant='outlined' onClick={() => setToolFunc(exampleAPIFunc)}>\n                            See Example\n                        </Button>\n                    )}\n                    <CodeEditor\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        value={toolFunc}\n                        height='calc(100vh - 220px)'\n                        theme={customization.isDarkMode ? 'dark' : 'light'}\n                        lang={'js'}\n                        onValueChange={(code) => setToolFunc(code)}\n                    />\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                {dialogProps.type === 'EDIT' && (\n                    <StyledButton color='error' variant='contained' onClick={() => deleteTool()}>\n                        Delete\n                    </StyledButton>\n                )}\n                {dialogProps.type === 'TEMPLATE' && (\n                    <StyledButton color='secondary' variant='contained' onClick={useToolTemplate}>\n                        Use Template\n                    </StyledButton>\n                )}\n                {dialogProps.type !== 'TEMPLATE' && (\n                    <StyledButton\n                        disabled={!(toolName && toolDesc)}\n                        variant='contained'\n                        onClick={() => (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT' ? addNewTool() : saveTool())}\n                    >\n                        {dialogProps.confirmButtonName}\n                    </StyledButton>\n                )}\n            </DialogActions>\n            <ConfirmDialog />\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nToolDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onUseTemplate: PropTypes.func,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default ToolDialog\n"],"names":["getAllTools","client","get","getSpecificTool","id","concat","createNewTool","body","post","updateTool","put","deleteTool","delete","CodeEditor","_ref","value","height","theme","lang","placeholder","disabled","basicSetup","onValueChange","customStyle","EditorView","baseTheme","color","padding","_jsx","CodeMirror","vscodeDark","sublime","extensions","javascript","jsx","lineWrapping","json","onChange","readOnly","editable","TooltipWithParser","title","style","customization","useSelector","state","Tooltip","parser","placement","children","IconButton","sx","width","Info","background","isDarkMode","getAllChatflowsMarketplaces","getAllToolsMarketplaces","TabPanel","props","index","other","role","hidden","Box","p","withAuthenticationRequired","Marketplace","navigate","useNavigate","useTheme","isChatflowsLoading","setChatflowsLoading","useState","isToolsLoading","setToolsLoading","images","setImages","tabItems","setValue","showToolDialog","setShowToolDialog","toolDialogProps","setToolDialogProps","getAllChatflowsMarketplacesApi","useApi","marketplacesApi","getAllToolsMarketplacesApi","goToTool","selectedTool","dialogProp","templateName","type","data","goToCanvas","selectedChatflow","useEffect","request","loading","chatflows","i","length","flowDataStr","flowData","nodes","JSON","parse","j","imageSrc","baseURL","name","includes","push","e","console","error","_jsxs","_Fragment","MainCard","palette","common","black","Stack","flexDirection","Typography","variant","Tabs","mb","handleChange","event","newValue","map","item","Tab","icon","IconHierarchy","IconTool","iconPosition","label","fontSize","Grid","container","spacing","gridSpacing","lg","md","sm","xs","badge","Badge","right","badgeContent","ItemCard","onClick","alignItems","justifyContent","objectFit","src","WorkflowEmptySVG","alt","ToolDialog","show","dialogProps","onCancel","onConfirm","onUseTemplate","tool","cancelButtonName","confirmButtonName","columns","rows","onRowUpdate","addNewRow","Button","startIcon","IconPlus","marginTop","DataGrid","processRowUpdate","newRow","isCellEditable","onProcessRowUpdateError","portalElement","document","getElementById","dispatch","useDispatch","useNotifier","confirm","useConfirm","enqueueSnackbar","enqueueSnackbarAction","arguments","closeSnackbar","closeSnackbarAction","getSpecificToolApi","toolsApi","toolId","setToolId","toolName","setToolName","toolDesc","setToolDesc","toolIcon","setToolIcon","toolSchema","setToolSchema","toolFunc","setToolFunc","deleteItem","useCallback","setTimeout","prevRows","filter","row","useMemo","field","headerName","flex","valueOptions","getActions","params","GridActionsCellItem","DeleteIcon","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","description","formatDataGridRows","schema","func","iconSrc","component","Dialog","fullWidth","maxWidth","open","onClose","DialogTitle","display","async","toolResp","toolData","createdDate","updatedDate","dataStr","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","errorData","response","status","statusText","message","options","key","Date","getTime","Math","random","persist","action","IconX","exportTool","IconFileExport","DialogContent","position","direction","marginLeft","OutlinedInput","target","multiline","allRows","cloneDeep","lastRowId","property","required","indexToUpdate","findIndex","marginBottom","code","DialogActions","StyledButton","confirmPayload","useToolTemplate","obj","generateRandomGradient","createResp","addNewTool","saveResp","saveTool","ConfirmDialog","createPortal"],"sourceRoot":""}
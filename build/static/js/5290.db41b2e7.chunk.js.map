{"version":3,"file":"static/js/5290.db41b2e7.chunk.js","mappings":"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","sources":["api/chatflows.js","ui-component/dialog/LoginDialog.js","ui-component/dialog/SaveChatflowDialog.js","ui-component/dialog/StarterPromptsDialog.js","ui-component/input/Input.js","ui-component/json/SelectVariable.js","ui-component/dialog/TagDialog.js","ui-component/button/FlowListMenu.js","ui-component/table/FlowListTable.js","views/chatflows/index.js"],"sourcesContent":["import client from './client'\n\nconst getAllChatflows = () => client.get('/chatflows')\n\nconst getSpecificChatflow = (id) => client.get(`/chatflows/${id}`)\n\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\n\nconst createNewChatflow = (body) => client.post(`/chatflows`, body)\n\nconst updateChatflow = (id, body) => client.put(`/chatflows/${id}`, body)\n\nconst deleteChatflow = (id) => client.delete(`/chatflows/${id}`)\n\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\n\nexport default {\n    getAllChatflows,\n    getSpecificChatflow,\n    getSpecificChatflowFromPublicEndpoint,\n    createNewChatflow,\n    updateChatflow,\n    deleteChatflow,\n    getIsChatflowStreaming\n}\n","import { createPortal } from 'react-dom'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Dialog, DialogActions, DialogContent, Typography, DialogTitle } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { Input } from 'ui-component/input/Input'\n\nconst LoginDialog = ({ show, dialogProps, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n    const usernameInput = {\n        label: 'Username',\n        name: 'username',\n        type: 'string',\n        placeholder: 'john doe'\n    }\n    const passwordInput = {\n        label: 'Password',\n        name: 'password',\n        type: 'password'\n    }\n    const [usernameVal, setUsernameVal] = useState('')\n    const [passwordVal, setPasswordVal] = useState('')\n\n    const component = show ? (\n        <Dialog\n            onKeyUp={(e) => {\n                if (e.key === 'Enter') {\n                    onConfirm(usernameVal, passwordVal)\n                }\n            }}\n            open={show}\n            fullWidth\n            maxWidth='xs'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <Typography>Username</Typography>\n                <Input\n                    inputParam={usernameInput}\n                    onChange={(newValue) => setUsernameVal(newValue)}\n                    value={usernameVal}\n                    showDialog={false}\n                />\n                <div style={{ marginTop: 20 }}></div>\n                <Typography>Password</Typography>\n                <Input inputParam={passwordInput} onChange={(newValue) => setPasswordVal(newValue)} value={passwordVal} />\n            </DialogContent>\n            <DialogActions>\n                <StyledButton variant='contained' onClick={() => onConfirm(usernameVal, passwordVal)}>\n                    {dialogProps.confirmButtonName}\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nLoginDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onConfirm: PropTypes.func\n}\n\nexport default LoginDialog\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\nconst SaveChatflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n\n    const [chatflowName, setChatflowName] = useState('')\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\n\n    useEffect(() => {\n        if (chatflowName) setIsReadyToSave(true)\n        else setIsReadyToSave(false)\n    }, [chatflowName])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='xs'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <OutlinedInput\n                    sx={{ mt: 1 }}\n                    id='chatflow-name'\n                    type='text'\n                    fullWidth\n                    placeholder='My New Chatflow'\n                    value={chatflowName}\n                    onChange={(e) => setChatflowName(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\n                <StyledButton disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(chatflowName)}>\n                    {dialogProps.confirmButtonName}\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nSaveChatflowDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default SaveChatflowDialog\n","import { createPortal } from 'react-dom'\nimport { useDispatch } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\n\n// material-ui\nimport {\n    Button,\n    IconButton,\n    Dialog,\n    DialogContent,\n    OutlinedInput,\n    DialogTitle,\n    DialogActions,\n    Box,\n    List,\n    InputAdornment\n} from '@mui/material'\nimport { IconX, IconTrash, IconPlus, IconBulb } from '@tabler/icons'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\n// store\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\nimport useNotifier from 'utils/useNotifier'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\nconst StarterPromptsDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [inputFields, setInputFields] = useState([\n        {\n            prompt: ''\n        }\n    ])\n\n    const [chatbotConfig, setChatbotConfig] = useState({})\n\n    const addInputField = () => {\n        setInputFields([\n            ...inputFields,\n            {\n                prompt: ''\n            }\n        ])\n    }\n    const removeInputFields = (index) => {\n        const rows = [...inputFields]\n        rows.splice(index, 1)\n        setInputFields(rows)\n    }\n\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n        const list = [...inputFields]\n        list[index][name] = value\n        setInputFields(list)\n    }\n\n    const onSave = async () => {\n        try {\n            let value = {\n                starterPrompts: {\n                    ...inputFields\n                }\n            }\n            chatbotConfig.starterPrompts = value.starterPrompts\n            const saveResp = await chatflowsApi.updateChatflow(dialogProps.chatflow.id, {\n                chatbotConfig: JSON.stringify(chatbotConfig)\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Conversation Starter Prompts Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n            onConfirm()\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Conversation Starter Prompts: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    useEffect(() => {\n        if (dialogProps.chatflow && dialogProps.chatflow.chatbotConfig) {\n            try {\n                let chatbotConfig = JSON.parse(dialogProps.chatflow.chatbotConfig)\n                setChatbotConfig(chatbotConfig || {})\n                if (chatbotConfig.starterPrompts) {\n                    let inputFields = []\n                    Object.getOwnPropertyNames(chatbotConfig.starterPrompts).forEach((key) => {\n                        if (chatbotConfig.starterPrompts[key]) {\n                            inputFields.push(chatbotConfig.starterPrompts[key])\n                        }\n                    })\n                    setInputFields(inputFields)\n                } else {\n                    setInputFields([\n                        {\n                            prompt: ''\n                        }\n                    ])\n                }\n            } catch (e) {\n                setInputFields([\n                    {\n                        prompt: ''\n                    }\n                ])\n            }\n        }\n\n        return () => {}\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title || 'Conversation Starter Prompts'}\n            </DialogTitle>\n            <DialogContent>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        borderRadius: 10,\n                        background: '#d8f3dc',\n                        padding: 10\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center'\n                        }}\n                    >\n                        <IconBulb size={30} color='#2d6a4f' />\n                        <span style={{ color: '#2d6a4f', marginLeft: 10, fontWeight: 500 }}>\n                            Starter prompts will only be shown when there is no messages on the chat\n                        </span>\n                    </div>\n                </div>\n                <Box sx={{ '& > :not(style)': { m: 1 }, pt: 2 }}>\n                    <List>\n                        {inputFields.map((data, index) => {\n                            return (\n                                <div key={index} style={{ display: 'flex', width: '100%' }}>\n                                    <Box sx={{ width: '95%', mb: 1 }}>\n                                        <OutlinedInput\n                                            sx={{ width: '100%' }}\n                                            key={index}\n                                            type='text'\n                                            onChange={(e) => handleChange(index, e)}\n                                            size='small'\n                                            value={data.prompt}\n                                            name='prompt'\n                                            endAdornment={\n                                                <InputAdornment position='end' sx={{ padding: '2px' }}>\n                                                    {inputFields.length > 1 && (\n                                                        <IconButton\n                                                            sx={{ height: 30, width: 30 }}\n                                                            size='small'\n                                                            color='error'\n                                                            disabled={inputFields.length === 1}\n                                                            onClick={() => removeInputFields(index)}\n                                                            edge='end'\n                                                        >\n                                                            <IconTrash />\n                                                        </IconButton>\n                                                    )}\n                                                </InputAdornment>\n                                            }\n                                        />\n                                    </Box>\n                                    <Box sx={{ width: '5%', mb: 1 }}>\n                                        {index === inputFields.length - 1 && (\n                                            <IconButton color='primary' onClick={addInputField}>\n                                                <IconPlus />\n                                            </IconButton>\n                                        )}\n                                    </Box>\n                                </div>\n                            )\n                        })}\n                    </List>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancel}>Cancel</Button>\n                <StyledButton variant='contained' onClick={onSave}>\n                    Save\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nStarterPromptsDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default StarterPromptsDialog\n","import { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormControl, OutlinedInput, Popover } from '@mui/material'\nimport SelectVariable from 'ui-component/json/SelectVariable'\nimport { getAvailableNodesForVariable } from 'utils/genericHelper'\n\nexport const Input = ({ inputParam, value, nodes, edges, nodeId, onChange, disabled = false }) => {\n    const [myValue, setMyValue] = useState(value ?? '')\n    const [anchorEl, setAnchorEl] = useState(null)\n    const [availableNodesForVariable, setAvailableNodesForVariable] = useState([])\n    const ref = useRef(null)\n\n    const openPopOver = Boolean(anchorEl)\n\n    const handleClosePopOver = () => {\n        setAnchorEl(null)\n    }\n\n    const setNewVal = (val) => {\n        const newVal = myValue + val.substring(2)\n        onChange(newVal)\n        setMyValue(newVal)\n    }\n\n    const getInputType = (type) => {\n        switch (type) {\n            case 'string':\n                return 'text'\n            case 'password':\n                return 'password'\n            case 'number':\n                return 'number'\n            default:\n                return 'text'\n        }\n    }\n\n    useEffect(() => {\n        if (!disabled && nodes && edges && nodeId && inputParam) {\n            const nodesForVariable = inputParam?.acceptVariable ? getAvailableNodesForVariable(nodes, edges, nodeId, inputParam.id) : []\n            setAvailableNodesForVariable(nodesForVariable)\n        }\n    }, [disabled, inputParam, nodes, edges, nodeId])\n\n    useEffect(() => {\n        if (typeof myValue === 'string' && myValue && myValue.endsWith('{{')) {\n            setAnchorEl(ref.current)\n        }\n    }, [myValue])\n\n    return (\n        <>\n            <FormControl sx={{ mt: 1, width: '100%' }} size='small'>\n                <OutlinedInput\n                    id={inputParam.name}\n                    size='small'\n                    disabled={disabled}\n                    type={getInputType(inputParam.type)}\n                    placeholder={inputParam.placeholder}\n                    multiline={!!inputParam.rows}\n                    rows={inputParam.rows ?? 1}\n                    value={myValue}\n                    name={inputParam.name}\n                    onChange={(e) => {\n                        setMyValue(e.target.value)\n                        onChange(e.target.value)\n                    }}\n                    inputProps={{\n                        step: inputParam.step ?? 1,\n                        style: {\n                            height: inputParam.rows ? '90px' : 'inherit'\n                        }\n                    }}\n                />\n            </FormControl>\n            <div ref={ref}></div>\n            {inputParam?.acceptVariable && (\n                <Popover\n                    open={openPopOver}\n                    anchorEl={anchorEl}\n                    onClose={handleClosePopOver}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                >\n                    <SelectVariable\n                        disabled={disabled}\n                        availableNodesForVariable={availableNodesForVariable}\n                        onSelectAndReturnVal={(val) => {\n                            setNewVal(val)\n                            handleClosePopOver()\n                        }}\n                    />\n                </Popover>\n            )}\n        </>\n    )\n}\n\nInput.propTypes = {\n    inputParam: PropTypes.object,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n    nodes: PropTypes.array,\n    edges: PropTypes.array,\n    nodeId: PropTypes.string\n}\n","import { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Box, List, ListItemButton, ListItem, ListItemAvatar, ListItemText, Typography, Stack } from '@mui/material'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport robotPNG from 'assets/images/robot.png'\nimport chatPNG from 'assets/images/chathistory.png'\nimport { baseURL } from 'store/constant'\n\nconst SelectVariable = ({ availableNodesForVariable, disabled = false, onSelectAndReturnVal }) => {\n    const customization = useSelector((state) => state.customization)\n\n    const onSelectOutputResponseClick = (node, prefix) => {\n        let variablePath = node ? `${node.id}.data.instance` : prefix\n        const newInput = `{{${variablePath}}}`\n        onSelectAndReturnVal(newInput)\n    }\n\n    return (\n        <>\n            {!disabled && (\n                <div style={{ flex: 30 }}>\n                    <Stack flexDirection='row' sx={{ mb: 1, ml: 2, mt: 2 }}>\n                        <Typography variant='h5'>Select Variable</Typography>\n                    </Stack>\n                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\n                        <Box sx={{ pl: 2, pr: 2 }}>\n                            <List>\n                                <ListItemButton\n                                    sx={{\n                                        p: 0,\n                                        borderRadius: `${customization.borderRadius}px`,\n                                        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n                                        mb: 1\n                                    }}\n                                    disabled={disabled}\n                                    onClick={() => onSelectOutputResponseClick(null, 'question')}\n                                >\n                                    <ListItem alignItems='center'>\n                                        <ListItemAvatar>\n                                            <div\n                                                style={{\n                                                    width: 50,\n                                                    height: 50,\n                                                    borderRadius: '50%',\n                                                    backgroundColor: 'white'\n                                                }}\n                                            >\n                                                <img\n                                                    style={{\n                                                        width: '100%',\n                                                        height: '100%',\n                                                        padding: 10,\n                                                        objectFit: 'contain'\n                                                    }}\n                                                    alt='AI'\n                                                    src={robotPNG}\n                                                />\n                                            </div>\n                                        </ListItemAvatar>\n                                        <ListItemText sx={{ ml: 1 }} primary='question' secondary={`User's question from chatbox`} />\n                                    </ListItem>\n                                </ListItemButton>\n                                <ListItemButton\n                                    sx={{\n                                        p: 0,\n                                        borderRadius: `${customization.borderRadius}px`,\n                                        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n                                        mb: 1\n                                    }}\n                                    disabled={disabled}\n                                    onClick={() => onSelectOutputResponseClick(null, 'chat_history')}\n                                >\n                                    <ListItem alignItems='center'>\n                                        <ListItemAvatar>\n                                            <div\n                                                style={{\n                                                    width: 50,\n                                                    height: 50,\n                                                    borderRadius: '50%',\n                                                    backgroundColor: 'white'\n                                                }}\n                                            >\n                                                <img\n                                                    style={{\n                                                        width: '100%',\n                                                        height: '100%',\n                                                        padding: 10,\n                                                        objectFit: 'contain'\n                                                    }}\n                                                    alt='chatHistory'\n                                                    src={chatPNG}\n                                                />\n                                            </div>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            sx={{ ml: 1 }}\n                                            primary='chat_history'\n                                            secondary={`Past conversation history between user and AI`}\n                                        />\n                                    </ListItem>\n                                </ListItemButton>\n                                {availableNodesForVariable &&\n                                    availableNodesForVariable.length > 0 &&\n                                    availableNodesForVariable.map((node, index) => {\n                                        const selectedOutputAnchor = node.data.outputAnchors[0].options.find(\n                                            (ancr) => ancr.name === node.data.outputs['output']\n                                        )\n                                        return (\n                                            <ListItemButton\n                                                key={index}\n                                                sx={{\n                                                    p: 0,\n                                                    borderRadius: `${customization.borderRadius}px`,\n                                                    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n                                                    mb: 1\n                                                }}\n                                                disabled={disabled}\n                                                onClick={() => onSelectOutputResponseClick(node)}\n                                            >\n                                                <ListItem alignItems='center'>\n                                                    <ListItemAvatar>\n                                                        <div\n                                                            style={{\n                                                                width: 50,\n                                                                height: 50,\n                                                                borderRadius: '50%',\n                                                                backgroundColor: 'white'\n                                                            }}\n                                                        >\n                                                            <img\n                                                                style={{\n                                                                    width: '100%',\n                                                                    height: '100%',\n                                                                    padding: 10,\n                                                                    objectFit: 'contain'\n                                                                }}\n                                                                alt={node.data.name}\n                                                                src={`${baseURL}/api/v1/node-icon/${node.data.name}`}\n                                                            />\n                                                        </div>\n                                                    </ListItemAvatar>\n                                                    <ListItemText\n                                                        sx={{ ml: 1 }}\n                                                        primary={\n                                                            node.data.inputs.chainName ??\n                                                            node.data.inputs.functionName ??\n                                                            node.data.inputs.variableName ??\n                                                            node.data.id\n                                                        }\n                                                        secondary={\n                                                            node.data.name === 'ifElseFunction'\n                                                                ? `${node.data.description}`\n                                                                : `${selectedOutputAnchor?.label ?? 'output'} from ${node.data.label}`\n                                                        }\n                                                    />\n                                                </ListItem>\n                                            </ListItemButton>\n                                        )\n                                    })}\n                            </List>\n                        </Box>\n                    </PerfectScrollbar>\n                </div>\n            )}\n        </>\n    )\n}\n\nSelectVariable.propTypes = {\n    availableNodesForVariable: PropTypes.array,\n    disabled: PropTypes.bool,\n    onSelectAndReturnVal: PropTypes.func\n}\n\nexport default SelectVariable\n","import { useState, useEffect } from 'react'\nimport Dialog from '@mui/material/Dialog'\nimport Box from '@mui/material/Box'\nimport Button from '@mui/material/Button'\nimport TextField from '@mui/material/TextField'\nimport Chip from '@mui/material/Chip'\nimport PropTypes from 'prop-types'\nimport { DialogActions, DialogContent, DialogTitle, Typography } from '@mui/material'\n\nconst TagDialog = ({ isOpen, dialogProps, onClose, onSubmit }) => {\n    const [inputValue, setInputValue] = useState('')\n    const [categoryValues, setCategoryValues] = useState([])\n\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value)\n    }\n\n    const handleInputKeyDown = (event) => {\n        if (event.key === 'Enter' && inputValue.trim()) {\n            event.preventDefault()\n            if (!categoryValues.includes(inputValue)) {\n                setCategoryValues([...categoryValues, inputValue])\n                setInputValue('')\n            }\n        }\n    }\n\n    const handleDeleteTag = (categoryToDelete) => {\n        setCategoryValues(categoryValues.filter((category) => category !== categoryToDelete))\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        let newCategories = [...categoryValues]\n        if (inputValue.trim() && !categoryValues.includes(inputValue)) {\n            newCategories = [...newCategories, inputValue]\n            setCategoryValues(newCategories)\n        }\n        onSubmit(newCategories)\n    }\n\n    useEffect(() => {\n        if (dialogProps.category) setCategoryValues(dialogProps.category)\n\n        return () => {\n            setInputValue('')\n            setCategoryValues([])\n        }\n    }, [dialogProps])\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth='xs'\n            open={isOpen}\n            onClose={onClose}\n            aria-labelledby='category-dialog-title'\n            aria-describedby='category-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                Set Chatflow Category Tags\n            </DialogTitle>\n            <DialogContent>\n                <Box>\n                    <form onSubmit={handleSubmit}>\n                        {categoryValues.length > 0 && (\n                            <div style={{ marginBottom: 10 }}>\n                                {categoryValues.map((category, index) => (\n                                    <Chip\n                                        key={index}\n                                        label={category}\n                                        onDelete={() => handleDeleteTag(category)}\n                                        style={{ marginRight: 5, marginBottom: 5 }}\n                                    />\n                                ))}\n                            </div>\n                        )}\n                        <TextField\n                            sx={{ mt: 2 }}\n                            fullWidth\n                            value={inputValue}\n                            onChange={handleInputChange}\n                            onKeyDown={handleInputKeyDown}\n                            label='Add a tag'\n                            variant='outlined'\n                        />\n                        <Typography variant='body2' sx={{ fontStyle: 'italic', mt: 1 }} color='text.secondary'>\n                            Enter a tag and press enter to add it to the list. You can add as many tags as you want.\n                        </Typography>\n                    </form>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose}>Cancel</Button>\n                <Button variant='contained' onClick={handleSubmit}>\n                    Submit\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nTagDialog.propTypes = {\n    isOpen: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onClose: PropTypes.func,\n    onSubmit: PropTypes.func\n}\n\nexport default TagDialog\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { styled, alpha } from '@mui/material/styles'\nimport Menu from '@mui/material/Menu'\nimport MenuItem from '@mui/material/MenuItem'\nimport EditIcon from '@mui/icons-material/Edit'\nimport Divider from '@mui/material/Divider'\nimport FileCopyIcon from '@mui/icons-material/FileCopy'\nimport FileDownloadIcon from '@mui/icons-material/Downloading'\nimport FileDeleteIcon from '@mui/icons-material/Delete'\nimport FileCategoryIcon from '@mui/icons-material/Category'\nimport PictureInPictureAltIcon from '@mui/icons-material/PictureInPictureAlt'\nimport Button from '@mui/material/Button'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport { IconX } from '@tabler/icons'\n\nimport chatflowsApi from 'api/chatflows'\n\nimport useApi from '../../hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\nimport { uiBaseURL } from '../../store/constant'\nimport { closeSnackbar as closeSnackbarAction, enqueueSnackbar as enqueueSnackbarAction } from '../../store/actions'\n\nimport SaveChatflowDialog from '../dialog/SaveChatflowDialog'\nimport TagDialog from '../dialog/TagDialog'\n\nimport { generateExportFlowData } from '../../utils/genericHelper'\nimport useNotifier from '../../utils/useNotifier'\nimport StarterPromptsDialog from '../dialog/StarterPromptsDialog'\n\nconst StyledMenu = styled((props) => (\n    <Menu\n        elevation={0}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'right'\n        }}\n        transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right'\n        }}\n        {...props}\n    />\n))(({ theme }) => ({\n    '& .MuiPaper-root': {\n        borderRadius: 6,\n        marginTop: theme.spacing(1),\n        minWidth: 180,\n        boxShadow:\n            'rgb(255, 255, 255) 0px 0px 0px 0px, rgba(0, 0, 0, 0.05) 0px 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px',\n        '& .MuiMenu-list': {\n            padding: '4px 0'\n        },\n        '& .MuiMenuItem-root': {\n            '& .MuiSvgIcon-root': {\n                fontSize: 18,\n                color: theme.palette.text.secondary,\n                marginRight: theme.spacing(1.5)\n            },\n            '&:active': {\n                backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n            }\n        }\n    }\n}))\n\nexport default function FlowListMenu({ chatflow, updateFlowsApi }) {\n    const { confirm } = useConfirm()\n    const dispatch = useDispatch()\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [flowDialogOpen, setFlowDialogOpen] = useState(false)\n    const [categoryDialogOpen, setCategoryDialogOpen] = useState(false)\n    const [categoryDialogProps, setCategoryDialogProps] = useState({})\n    const [anchorEl, setAnchorEl] = useState(null)\n    const open = Boolean(anchorEl)\n    const [conversationStartersDialogOpen, setConversationStartersDialogOpen] = useState(false)\n    const [conversationStartersDialogProps, setConversationStartersDialogProps] = useState({})\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null)\n    }\n\n    const handleFlowRename = () => {\n        setAnchorEl(null)\n        setFlowDialogOpen(true)\n    }\n\n    const handleFlowStarterPrompts = () => {\n        setAnchorEl(null)\n        setConversationStartersDialogProps({\n            title: 'Starter Prompts - ' + chatflow.name,\n            chatflow: chatflow\n        })\n        setConversationStartersDialogOpen(true)\n    }\n\n    const saveFlowStarterPrompts = async () => {\n        setConversationStartersDialogOpen(false)\n        await updateFlowsApi.request()\n    }\n\n    const saveFlowRename = async (chatflowName) => {\n        const updateBody = {\n            name: chatflowName,\n            chatflow\n        }\n        try {\n            await updateChatflowApi.request(chatflow.id, updateBody)\n            await updateFlowsApi.request()\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: errorData,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const handleFlowCategory = () => {\n        setAnchorEl(null)\n        if (chatflow.category) {\n            setCategoryDialogProps({\n                category: chatflow.category.split(';')\n            })\n        }\n        setCategoryDialogOpen(true)\n    }\n\n    const saveFlowCategory = async (categories) => {\n        setCategoryDialogOpen(false)\n        // save categories as string\n        const categoryTags = categories.join(';')\n        const updateBody = {\n            category: categoryTags,\n            chatflow\n        }\n        try {\n            await updateChatflowApi.request(chatflow.id, updateBody)\n            await updateFlowsApi.request()\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: errorData,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const handleDelete = async () => {\n        setAnchorEl(null)\n        const confirmPayload = {\n            title: `Delete`,\n            description: `Delete chatflow ${chatflow.name}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                await chatflowsApi.deleteChatflow(chatflow.id)\n                await updateFlowsApi.request()\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const handleDuplicate = () => {\n        setAnchorEl(null)\n        try {\n            localStorage.setItem('duplicatedFlowData', chatflow.flowData)\n            window.open(`${uiBaseURL}/canvas`, '_blank')\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const handleExport = () => {\n        setAnchorEl(null)\n        try {\n            const flowData = JSON.parse(chatflow.flowData)\n            let dataStr = JSON.stringify(generateExportFlowData(flowData), null, 2)\n            let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n            let exportFileDefaultName = `${chatflow.name} Chatflow.json`\n\n            let linkElement = document.createElement('a')\n            linkElement.setAttribute('href', dataUri)\n            linkElement.setAttribute('download', exportFileDefaultName)\n            linkElement.click()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    return (\n        <div>\n            <Button\n                id='demo-customized-button'\n                aria-controls={open ? 'demo-customized-menu' : undefined}\n                aria-haspopup='true'\n                aria-expanded={open ? 'true' : undefined}\n                disableElevation\n                onClick={handleClick}\n                endIcon={<KeyboardArrowDownIcon />}\n            >\n                Options\n            </Button>\n            <StyledMenu\n                id='demo-customized-menu'\n                MenuListProps={{\n                    'aria-labelledby': 'demo-customized-button'\n                }}\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={handleFlowRename} disableRipple>\n                    <EditIcon />\n                    Rename\n                </MenuItem>\n                <MenuItem onClick={handleDuplicate} disableRipple>\n                    <FileCopyIcon />\n                    Duplicate\n                </MenuItem>\n                <MenuItem onClick={handleExport} disableRipple>\n                    <FileDownloadIcon />\n                    Export\n                </MenuItem>\n                <Divider sx={{ my: 0.5 }} />\n                <MenuItem onClick={handleFlowStarterPrompts} disableRipple>\n                    <PictureInPictureAltIcon />\n                    Starter Prompts\n                </MenuItem>\n                <MenuItem onClick={handleFlowCategory} disableRipple>\n                    <FileCategoryIcon />\n                    Update Category\n                </MenuItem>\n                <Divider sx={{ my: 0.5 }} />\n                <MenuItem onClick={handleDelete} disableRipple>\n                    <FileDeleteIcon />\n                    Delete\n                </MenuItem>\n            </StyledMenu>\n            <SaveChatflowDialog\n                show={flowDialogOpen}\n                dialogProps={{\n                    title: `Rename Chatflow`,\n                    confirmButtonName: 'Rename',\n                    cancelButtonName: 'Cancel'\n                }}\n                onCancel={() => setFlowDialogOpen(false)}\n                onConfirm={saveFlowRename}\n            />\n            <TagDialog\n                isOpen={categoryDialogOpen}\n                dialogProps={categoryDialogProps}\n                onClose={() => setCategoryDialogOpen(false)}\n                onSubmit={saveFlowCategory}\n            />\n            <StarterPromptsDialog\n                show={conversationStartersDialogOpen}\n                dialogProps={conversationStartersDialogProps}\n                onConfirm={saveFlowStarterPrompts}\n                onCancel={() => setConversationStartersDialogOpen(false)}\n            />\n        </div>\n    )\n}\n\nFlowListMenu.propTypes = {\n    chatflow: PropTypes.object,\n    updateFlowsApi: PropTypes.object\n}\n","import PropTypes from 'prop-types'\nimport { useNavigate } from 'react-router-dom'\nimport moment from 'moment'\nimport { styled } from '@mui/material/styles'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport Chip from '@mui/material/Chip'\nimport { Button, Stack, Typography } from '@mui/material'\nimport FlowListMenu from '../button/FlowListMenu'\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14\n    }\n}))\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0\n    }\n}))\n\nexport const FlowListTable = ({ data, images, filterFunction, updateFlowsApi }) => {\n    const navigate = useNavigate()\n    const goToCanvas = (selectedChatflow) => {\n        navigate(`/canvas/${selectedChatflow.id}`)\n    }\n\n    return (\n        <>\n            <TableContainer style={{ marginTop: '30', border: 1 }} component={Paper}>\n                <Table sx={{ minWidth: 650 }} size='small' aria-label='a dense table'>\n                    <TableHead>\n                        <TableRow sx={{ marginTop: '10', backgroundColor: 'primary' }}>\n                            <StyledTableCell component='th' scope='row' style={{ width: '20%' }} key='0'>\n                                Name\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: '25%' }} key='1'>\n                                Category\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: '30%' }} key='2'>\n                                Nodes\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: '15%' }} key='3'>\n                                Last Modified Date\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: '10%' }} key='4'>\n                                Actions\n                            </StyledTableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {data.filter(filterFunction).map((row, index) => (\n                            <StyledTableRow key={index}>\n                                <TableCell key='0'>\n                                    <Typography\n                                        sx={{ fontSize: '1.2rem', fontWeight: 500, overflowWrap: 'break-word', whiteSpace: 'pre-line' }}\n                                    >\n                                        <Button onClick={() => goToCanvas(row)} sx={{ textAlign: 'left' }}>\n                                            {row.templateName || row.name}\n                                        </Button>\n                                    </Typography>\n                                </TableCell>\n                                <TableCell key='1'>\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            flexDirection: 'row',\n                                            flexWrap: 'wrap',\n                                            marginTop: 5\n                                        }}\n                                    >\n                                        &nbsp;\n                                        {row.category &&\n                                            row.category\n                                                .split(';')\n                                                .map((tag, index) => (\n                                                    <Chip key={index} label={tag} style={{ marginRight: 5, marginBottom: 5 }} />\n                                                ))}\n                                    </div>\n                                </TableCell>\n                                <TableCell key='2'>\n                                    {images[row.id] && (\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'row',\n                                                flexWrap: 'wrap',\n                                                marginTop: 5\n                                            }}\n                                        >\n                                            {images[row.id].slice(0, images[row.id].length > 5 ? 5 : images[row.id].length).map((img) => (\n                                                <div\n                                                    key={img}\n                                                    style={{\n                                                        width: 35,\n                                                        height: 35,\n                                                        marginRight: 5,\n                                                        borderRadius: '50%',\n                                                        backgroundColor: 'white',\n                                                        marginTop: 5\n                                                    }}\n                                                >\n                                                    <img\n                                                        style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\n                                                        alt=''\n                                                        src={img}\n                                                    />\n                                                </div>\n                                            ))}\n                                            {images[row.id].length > 5 && (\n                                                <Typography\n                                                    sx={{ alignItems: 'center', display: 'flex', fontSize: '.8rem', fontWeight: 200 }}\n                                                >\n                                                    + {images[row.id].length - 5} More\n                                                </Typography>\n                                            )}\n                                        </div>\n                                    )}\n                                </TableCell>\n                                <TableCell key='3'>{moment(row.updatedDate).format('MMMM Do, YYYY')}</TableCell>\n                                <TableCell key='4'>\n                                    <Stack direction={{ xs: 'column', sm: 'row' }} spacing={1} justifyContent='center' alignItems='center'>\n                                        <FlowListMenu chatflow={row} updateFlowsApi={updateFlowsApi} />\n                                    </Stack>\n                                </TableCell>\n                            </StyledTableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    )\n}\n\nFlowListTable.propTypes = {\n    data: PropTypes.array,\n    images: PropTypes.object,\n    filterFunction: PropTypes.func,\n    updateFlowsApi: PropTypes.object\n}\n","import { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n\r\n// material-ui\r\nimport { Grid, Box, Stack, Toolbar, ToggleButton, ButtonGroup, InputAdornment, TextField, Typography } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport ItemCard from 'ui-component/cards/ItemCard'\r\nimport { gridSpacing } from 'store/constant'\r\nimport WorkflowEmptySVG from 'assets/images/workflow_empty.svg'\r\nimport LoginDialog from 'ui-component/dialog/LoginDialog'\r\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\r\n\r\n// API\r\nimport chatflowsApi from 'api/chatflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\n// icons\r\nimport { IconPlus, IconSearch, IconLayoutGrid, IconList } from '@tabler/icons'\r\nimport * as React from 'react'\r\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup'\r\nimport { FlowListTable } from '../../ui-component/table/FlowListTable'\r\nimport { StyledButton } from '../../ui-component/button/StyledButton'\r\nimport { withAuthenticationRequired } from '@auth0/auth0-react'\r\n\r\n// ==============================|| CHATFLOWS ||============================== //\r\n\r\nconst Chatflows = () => {\r\n    const navigate = useNavigate()\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [images, setImages] = useState({})\r\n    const [search, setSearch] = useState('')\r\n    const [loginDialogOpen, setLoginDialogOpen] = useState(false)\r\n    const [loginDialogProps, setLoginDialogProps] = useState({})\r\n\r\n    const getAllChatflowsApi = useApi(chatflowsApi.getAllChatflows)\r\n    const [view, setView] = React.useState(localStorage.getItem('flowDisplayStyle') || 'card')\r\n\r\n    const handleChange = (event, nextView) => {\r\n        localStorage.setItem('flowDisplayStyle', nextView)\r\n        setView(nextView)\r\n    }\r\n\r\n    const onSearchChange = (event) => {\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    function filterFlows(data) {\r\n        return (\r\n            data.name.toLowerCase().indexOf(search.toLowerCase()) > -1 ||\r\n            (data.category && data.category.toLowerCase().indexOf(search.toLowerCase()) > -1)\r\n        )\r\n    }\r\n\r\n    const onLoginClick = (username, password) => {\r\n        localStorage.setItem('username', username)\r\n        localStorage.setItem('password', password)\r\n        navigate(0)\r\n    }\r\n\r\n    const addNew = () => {\r\n        navigate('/canvas')\r\n    }\r\n\r\n    const goToCanvas = (selectedChatflow) => {\r\n        navigate(`/canvas/${selectedChatflow.id}`)\r\n    }\r\n\r\n    // Chatflows API Request\r\n    useEffect(() => {\r\n        getAllChatflowsApi.request()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     if (getAllChatflowsApi.error) {\r\n    //         if (getAllChatflowsApi.error?.response?.status === 401) {\r\n    //             setLoginDialogProps({\r\n    //                 title: 'Login',\r\n    //                 confirmButtonName: 'Login'\r\n    //             })\r\n    //             setLoginDialogOpen(true)\r\n    //         }\r\n    //     }\r\n    // }, [getAllChatflowsApi.error])\r\n\r\n    // The Chatflows API waits for data to be received from the server\r\n    useEffect(() => {\r\n        setLoading(getAllChatflowsApi.loading)\r\n    }, [getAllChatflowsApi.loading])\r\n\r\n    // The Chatflows API's Data handled\r\n    useEffect(() => {\r\n        if (getAllChatflowsApi.data) {\r\n            try {\r\n                const chatflows = getAllChatflowsApi.data\r\n                const images = {}\r\n                for (let i = 0; i < chatflows.length; i += 1) {\r\n                    const flowDataStr = chatflows[i].flowData\r\n                    const flowData = JSON.parse(flowDataStr)\r\n                    const nodes = flowData.nodes || []\r\n                    images[chatflows[i].id] = []\r\n                    for (let j = 0; j < nodes.length; j += 1) {\r\n                        const imageSrc = `${baseURL}/api/v1/node-icon/${nodes[j].data.name}`\r\n                        if (!images[chatflows[i].id].includes(imageSrc)) {\r\n                            images[chatflows[i].id].push(imageSrc)\r\n                        }\r\n                    }\r\n                }\r\n                setImages(images)\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }\r\n    }, [getAllChatflowsApi.data])\r\n\r\n    return (\r\n        <MainCard sx={{ background: customization.isDarkMode ? theme.palette.common.black : '' }}>\r\n            <Stack flexDirection='column'>\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Toolbar\r\n                        disableGutters={true}\r\n                        style={{\r\n                            margin: 1,\r\n                            padding: 1,\r\n                            paddingBottom: 10,\r\n                            display: 'flex',\r\n                            justifyContent: 'space-between',\r\n                            width: '100%'\r\n                        }}\r\n                    >\r\n                        {/* <h1 style={{color:  customization.isDarkMode ? \"\" : \"#121D35\"}}>Chatflows</h1> */}\r\n                        <Typography variant='h1'>Chatflows</Typography>\r\n                        {/* <h1>Chatflows</h1> */}\r\n                        <TextField\r\n                            size='small'\r\n                            sx={{ display: { xs: 'none', sm: 'block' }, ml: 3 }}\r\n                            variant='outlined'\r\n                            placeholder='Search name or category'\r\n                            onChange={onSearchChange}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position='start'>\r\n                                        <IconSearch />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <ButtonGroup sx={{ maxHeight: 40 }} disableElevation variant='contained' aria-label='outlined primary button group'>\r\n                            <ButtonGroup disableElevation variant='contained' aria-label='outlined primary button group'>\r\n                                <ToggleButtonGroup sx={{ maxHeight: 40 }} value={view} color='primary' exclusive onChange={handleChange}>\r\n                                    <ToggleButton\r\n                                        // sx={{ color: theme?.customization?.isDarkMode ? 'white' : 'inherit' }}\r\n                                        sx={{ borderRadius: '0px' }}\r\n                                        variant='contained'\r\n                                        value='card'\r\n                                        title='Card View'\r\n                                    >\r\n                                        <IconLayoutGrid />\r\n                                    </ToggleButton>\r\n                                    <ToggleButton\r\n                                        sx={{ borderRadius: '0px' }}\r\n                                        variant='contained'\r\n                                        value='list'\r\n                                        title='List View'\r\n                                    >\r\n                                        <IconList />\r\n                                    </ToggleButton>\r\n                                </ToggleButtonGroup>\r\n                            </ButtonGroup>\r\n                            <Box sx={{ width: 5 }} />\r\n                            <ButtonGroup disableElevation aria-label='outlined primary button group'>\r\n                                <StyledButton variant='contained' onClick={addNew} startIcon={<IconPlus />}>\r\n                                    Add New\r\n                                </StyledButton>\r\n                            </ButtonGroup>\r\n                        </ButtonGroup>\r\n                    </Toolbar>\r\n                </Box>\r\n                {!isLoading && (!view || view === 'card') && getAllChatflowsApi.data && (\r\n                    <Grid container spacing={gridSpacing}>\r\n                        {getAllChatflowsApi.data.filter(filterFlows).map((data, index) => (\r\n                            <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\r\n                                <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.id]} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                )}\r\n                {!isLoading && view === 'list' && getAllChatflowsApi.data && (\r\n                    <FlowListTable\r\n                        sx={{ mt: 20 }}\r\n                        data={getAllChatflowsApi.data}\r\n                        images={images}\r\n                        filterFunction={filterFlows}\r\n                        updateFlowsApi={getAllChatflowsApi}\r\n                    />\r\n                )}\r\n            </Stack>\r\n\r\n            {!isLoading && (!getAllChatflowsApi.data || getAllChatflowsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WorkflowEmptySVG} alt='WorkflowEmptySVG' />\r\n                    </Box>\r\n                    <div>No Chatflows Yet</div>\r\n                </Stack>\r\n            )}\r\n            {/* <LoginDialog show={loginDialogOpen} dialogProps={loginDialogProps} onConfirm={onLoginClick} />\r\n            <ConfirmDialog /> */}\r\n        </MainCard>\r\n    )\r\n}\r\n\r\nexport default withAuthenticationRequired(Chatflows)\r\n"],"names":["getAllChatflows","client","get","getSpecificChatflow","id","concat","getSpecificChatflowFromPublicEndpoint","createNewChatflow","body","post","updateChatflow","put","deleteChatflow","delete","getIsChatflowStreaming","_ref","show","dialogProps","onConfirm","portalElement","document","getElementById","usernameVal","setUsernameVal","useState","passwordVal","setPasswordVal","component","_jsxs","Dialog","onKeyUp","e","key","open","fullWidth","maxWidth","children","_jsx","DialogTitle","sx","fontSize","title","DialogContent","Typography","Input","inputParam","label","name","type","placeholder","onChange","newValue","value","showDialog","style","marginTop","DialogActions","StyledButton","variant","onClick","confirmButtonName","createPortal","onCancel","chatflowName","setChatflowName","isReadyToSave","setIsReadyToSave","useEffect","onClose","OutlinedInput","mt","target","Button","cancelButtonName","disabled","dispatch","useDispatch","useNotifier","enqueueSnackbar","enqueueSnackbarAction","arguments","closeSnackbar","closeSnackbarAction","inputFields","setInputFields","prompt","chatbotConfig","setChatbotConfig","addInputField","chatflow","JSON","parse","starterPrompts","Object","getOwnPropertyNames","forEach","push","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","display","flexDirection","borderRadius","background","padding","alignItems","IconBulb","size","color","marginLeft","fontWeight","Box","m","pt","List","map","data","index","width","mb","handleChange","evnt","list","endAdornment","InputAdornment","position","length","IconButton","height","rows","splice","removeInputFields","edge","IconTrash","IconPlus","async","saveResp","chatflowsApi","stringify","message","options","Date","getTime","Math","random","action","IconX","SET_CHATFLOW","error","errorData","response","status","statusText","persist","_inputParam$rows","_inputParam$step","nodes","edges","nodeId","myValue","setMyValue","anchorEl","setAnchorEl","availableNodesForVariable","setAvailableNodesForVariable","ref","useRef","openPopOver","Boolean","handleClosePopOver","nodesForVariable","acceptVariable","getAvailableNodesForVariable","endsWith","current","_Fragment","FormControl","getInputType","multiline","inputProps","step","Popover","anchorOrigin","vertical","horizontal","transformOrigin","SelectVariable","onSelectAndReturnVal","val","newVal","substring","setNewVal","customization","useSelector","state","onSelectOutputResponseClick","node","prefix","variablePath","newInput","flex","Stack","ml","PerfectScrollbar","maxHeight","overflowX","pl","pr","ListItemButton","p","boxShadow","ListItem","ListItemAvatar","backgroundColor","objectFit","alt","src","robotPNG","ListItemText","primary","secondary","chatPNG","_ref2","_ref3","_node$data$inputs$cha","_selectedOutputAnchor","selectedOutputAnchor","outputAnchors","find","ancr","outputs","baseURL","inputs","chainName","functionName","variableName","description","isOpen","onSubmit","inputValue","setInputValue","categoryValues","setCategoryValues","handleSubmit","event","preventDefault","newCategories","trim","includes","category","marginBottom","Chip","onDelete","handleDeleteTag","categoryToDelete","filter","marginRight","TextField","onKeyDown","fontStyle","StyledMenu","styled","props","Menu","elevation","theme","spacing","minWidth","palette","text","alpha","main","selectedOpacity","FlowListMenu","updateFlowsApi","confirm","useConfirm","updateChatflowApi","useApi","flowDialogOpen","setFlowDialogOpen","categoryDialogOpen","setCategoryDialogOpen","categoryDialogProps","setCategoryDialogProps","conversationStartersDialogOpen","setConversationStartersDialogOpen","conversationStartersDialogProps","setConversationStartersDialogProps","undefined","disableElevation","currentTarget","endIcon","KeyboardArrowDownIcon","MenuListProps","handleClose","MenuItem","handleFlowRename","disableRipple","EditIcon","handleDuplicate","localStorage","setItem","flowData","window","uiBaseURL","console","FileCopyIcon","handleExport","dataStr","generateExportFlowData","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","FileDownloadIcon","Divider","my","handleFlowStarterPrompts","PictureInPictureAltIcon","handleFlowCategory","split","FileCategoryIcon","confirmPayload","request","FileDeleteIcon","SaveChatflowDialog","updateBody","TagDialog","categories","join","StarterPromptsDialog","StyledTableCell","TableCell","tableCellClasses","head","common","black","white","StyledTableRow","TableRow","hover","border","FlowListTable","images","filterFunction","navigate","useNavigate","TableContainer","Paper","Table","TableHead","scope","TableBody","row","overflowWrap","whiteSpace","textAlign","templateName","flexWrap","tag","slice","img","moment","updatedDate","format","direction","xs","sm","justifyContent","withAuthenticationRequired","Chatflows","useTheme","isLoading","setLoading","setImages","search","setSearch","loginDialogOpen","setLoginDialogOpen","loginDialogProps","setLoginDialogProps","getAllChatflowsApi","view","setView","React","getItem","filterFlows","toLowerCase","indexOf","loading","chatflows","i","flowDataStr","j","imageSrc","MainCard","isDarkMode","flexGrow","Toolbar","disableGutters","margin","paddingBottom","InputProps","startAdornment","IconSearch","ButtonGroup","ToggleButtonGroup","exclusive","nextView","ToggleButton","IconLayoutGrid","IconList","addNew","startIcon","Grid","container","gridSpacing","item","lg","md","ItemCard","WorkflowEmptySVG"],"sourceRoot":""}
{"version":3,"file":"static/js/5801.c08783f5.chunk.js","mappings":"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","sources":["api/apikey.js","api/chatflows.js","ui-component/dialog/SaveChatflowDialog.js","ui-component/dialog/StarterPromptsDialog.js","utils/usePrompt.js","ui-component/table/Table.js","api/config.js","ui-component/dialog/NodeInfoDialog.js","views/canvas/CanvasNode.js","views/canvas/ButtonEdge.js","menu-items/settings.js","views/settings/index.js","views/chatflows/ShareChatbot.js","ui-component/checkbox/Checkbox.js","views/chatflows/EmbedChat.js","views/chatflows/Configuration.js","assets/images/python.svg","assets/images/javascript.svg","assets/images/cURL.svg","assets/images/embed.svg","assets/images/settings.svg","views/chatflows/APICodeDialog.js","assets/images/lunary.svg","ui-component/dialog/AnalyseFlowDialog.js","assets/images/langfuse.svg","assets/images/message_empty.svg","ui-component/dialog/SourceDocDialog.js","api/chatmessage.js","ui-component/dialog/ViewMessagesDialog.js","views/canvas/CanvasHeader.js","ui-component/button/StyledFab.js","views/canvas/AddNodes.js","api/prediction.js","ui-component/cards/StarterPromptsCard.js","views/chatmessage/ChatMessage.js","views/chatmessage/ChatExpandDialog.js","views/chatmessage/ChatPopUp.js","api/vectorstore.js","views/vectorstore/VectorStoreDialog.js","views/vectorstore/VectorStorePopUp.js","views/canvas/index.js"],"sourcesContent":["import client from './client'\n\nconst getAllAPIKeys = () => client.get('/apikey')\n\nconst createNewAPI = (body) => client.post(`/apikey`, body)\n\nconst updateAPI = (id, body) => client.put(`/apikey/${id}`, body)\n\nconst deleteAPI = (id) => client.delete(`/apikey/${id}`)\n\nexport default {\n    getAllAPIKeys,\n    createNewAPI,\n    updateAPI,\n    deleteAPI\n}\n","import client from './client'\n\nconst getAllChatflows = () => client.get('/chatflows')\n\nconst getSpecificChatflow = (id) => client.get(`/chatflows/${id}`)\n\nconst getSpecificChatflowFromPublicEndpoint = (id) => client.get(`/public-chatflows/${id}`)\n\nconst createNewChatflow = (body) => client.post(`/chatflows`, body)\n\nconst updateChatflow = (id, body) => client.put(`/chatflows/${id}`, body)\n\nconst deleteChatflow = (id) => client.delete(`/chatflows/${id}`)\n\nconst getIsChatflowStreaming = (id) => client.get(`/chatflows-streaming/${id}`)\n\nexport default {\n    getAllChatflows,\n    getSpecificChatflow,\n    getSpecificChatflowFromPublicEndpoint,\n    createNewChatflow,\n    updateChatflow,\n    deleteChatflow,\n    getIsChatflowStreaming\n}\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\nconst SaveChatflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n\n    const [chatflowName, setChatflowName] = useState('')\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\n\n    useEffect(() => {\n        if (chatflowName) setIsReadyToSave(true)\n        else setIsReadyToSave(false)\n    }, [chatflowName])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='xs'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <OutlinedInput\n                    sx={{ mt: 1 }}\n                    id='chatflow-name'\n                    type='text'\n                    fullWidth\n                    placeholder='My New Chatflow'\n                    value={chatflowName}\n                    onChange={(e) => setChatflowName(e.target.value)}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\n                <StyledButton disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(chatflowName)}>\n                    {dialogProps.confirmButtonName}\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nSaveChatflowDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default SaveChatflowDialog\n","import { createPortal } from 'react-dom'\nimport { useDispatch } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\n\n// material-ui\nimport {\n    Button,\n    IconButton,\n    Dialog,\n    DialogContent,\n    OutlinedInput,\n    DialogTitle,\n    DialogActions,\n    Box,\n    List,\n    InputAdornment\n} from '@mui/material'\nimport { IconX, IconTrash, IconPlus, IconBulb } from '@tabler/icons'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\n// store\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\nimport useNotifier from 'utils/useNotifier'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\nconst StarterPromptsDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [inputFields, setInputFields] = useState([\n        {\n            prompt: ''\n        }\n    ])\n\n    const [chatbotConfig, setChatbotConfig] = useState({})\n\n    const addInputField = () => {\n        setInputFields([\n            ...inputFields,\n            {\n                prompt: ''\n            }\n        ])\n    }\n    const removeInputFields = (index) => {\n        const rows = [...inputFields]\n        rows.splice(index, 1)\n        setInputFields(rows)\n    }\n\n    const handleChange = (index, evnt) => {\n        const { name, value } = evnt.target\n        const list = [...inputFields]\n        list[index][name] = value\n        setInputFields(list)\n    }\n\n    const onSave = async () => {\n        try {\n            let value = {\n                starterPrompts: {\n                    ...inputFields\n                }\n            }\n            chatbotConfig.starterPrompts = value.starterPrompts\n            const saveResp = await chatflowsApi.updateChatflow(dialogProps.chatflow.id, {\n                chatbotConfig: JSON.stringify(chatbotConfig)\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Conversation Starter Prompts Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n            onConfirm()\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Conversation Starter Prompts: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    useEffect(() => {\n        if (dialogProps.chatflow && dialogProps.chatflow.chatbotConfig) {\n            try {\n                let chatbotConfig = JSON.parse(dialogProps.chatflow.chatbotConfig)\n                setChatbotConfig(chatbotConfig || {})\n                if (chatbotConfig.starterPrompts) {\n                    let inputFields = []\n                    Object.getOwnPropertyNames(chatbotConfig.starterPrompts).forEach((key) => {\n                        if (chatbotConfig.starterPrompts[key]) {\n                            inputFields.push(chatbotConfig.starterPrompts[key])\n                        }\n                    })\n                    setInputFields(inputFields)\n                } else {\n                    setInputFields([\n                        {\n                            prompt: ''\n                        }\n                    ])\n                }\n            } catch (e) {\n                setInputFields([\n                    {\n                        prompt: ''\n                    }\n                ])\n            }\n        }\n\n        return () => {}\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title || 'Conversation Starter Prompts'}\n            </DialogTitle>\n            <DialogContent>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        borderRadius: 10,\n                        background: '#d8f3dc',\n                        padding: 10\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center'\n                        }}\n                    >\n                        <IconBulb size={30} color='#2d6a4f' />\n                        <span style={{ color: '#2d6a4f', marginLeft: 10, fontWeight: 500 }}>\n                            Starter prompts will only be shown when there is no messages on the chat\n                        </span>\n                    </div>\n                </div>\n                <Box sx={{ '& > :not(style)': { m: 1 }, pt: 2 }}>\n                    <List>\n                        {inputFields.map((data, index) => {\n                            return (\n                                <div key={index} style={{ display: 'flex', width: '100%' }}>\n                                    <Box sx={{ width: '95%', mb: 1 }}>\n                                        <OutlinedInput\n                                            sx={{ width: '100%' }}\n                                            key={index}\n                                            type='text'\n                                            onChange={(e) => handleChange(index, e)}\n                                            size='small'\n                                            value={data.prompt}\n                                            name='prompt'\n                                            endAdornment={\n                                                <InputAdornment position='end' sx={{ padding: '2px' }}>\n                                                    {inputFields.length > 1 && (\n                                                        <IconButton\n                                                            sx={{ height: 30, width: 30 }}\n                                                            size='small'\n                                                            color='error'\n                                                            disabled={inputFields.length === 1}\n                                                            onClick={() => removeInputFields(index)}\n                                                            edge='end'\n                                                        >\n                                                            <IconTrash />\n                                                        </IconButton>\n                                                    )}\n                                                </InputAdornment>\n                                            }\n                                        />\n                                    </Box>\n                                    <Box sx={{ width: '5%', mb: 1 }}>\n                                        {index === inputFields.length - 1 && (\n                                            <IconButton color='primary' onClick={addInputField}>\n                                                <IconPlus />\n                                            </IconButton>\n                                        )}\n                                    </Box>\n                                </div>\n                            )\n                        })}\n                    </List>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onCancel}>Cancel</Button>\n                <StyledButton variant='contained' onClick={onSave}>\n                    Save\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nStarterPromptsDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default StarterPromptsDialog\n","import { useCallback, useContext, useEffect } from 'react'\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom'\n\n// https://stackoverflow.com/questions/71572678/react-router-v-6-useprompt-typescript\n\nexport function useBlocker(blocker, when = true) {\n    const { navigator } = useContext(NavigationContext)\n\n    useEffect(() => {\n        if (!when) return\n\n        const unblock = navigator.block((tx) => {\n            const autoUnblockingTx = {\n                ...tx,\n                retry() {\n                    unblock()\n                    tx.retry()\n                }\n            }\n\n            blocker(autoUnblockingTx)\n        })\n\n        return unblock\n    }, [navigator, blocker, when])\n}\n\nexport function usePrompt(message, when = true) {\n    const blocker = useCallback(\n        (tx) => {\n            if (window.confirm(message)) tx.retry()\n        },\n        [message]\n    )\n\n    useBlocker(blocker, when)\n}\n","import PropTypes from 'prop-types'\nimport { TableContainer, Table, TableHead, TableCell, TableRow, TableBody, Paper } from '@mui/material'\n\nexport const TableViewOnly = ({ columns, rows, sx }) => {\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table sx={{ minWidth: 650, ...sx }} aria-label='simple table'>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((col, index) => (\n                                <TableCell key={index}>{col.charAt(0).toUpperCase() + col.slice(1)}</TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row, index) => (\n                            <TableRow key={index} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                                {Object.keys(row).map((key, index) => (\n                                    <TableCell key={index}>{row[key]}</TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    )\n}\n\nTableViewOnly.propTypes = {\n    rows: PropTypes.array,\n    columns: PropTypes.array,\n    sx: PropTypes.object\n}\n","import client from './client'\n\nconst getConfig = (id) => client.get(`/flow-config/${id}`)\nconst getNodeConfig = (body) => client.post(`/node-config`, body)\n\nexport default {\n    getConfig,\n    getNodeConfig\n}\n","import { createPortal } from 'react-dom'\nimport { useDispatch } from 'react-redux'\nimport { useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n// Material\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\nimport { TableViewOnly } from 'ui-component/table/Table'\n\n// Store\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\nimport { baseURL } from 'store/constant'\n\n// API\nimport configApi from 'api/config'\nimport useApi from 'hooks/useApi'\n\nconst NodeInfoDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n\n    const getNodeConfigApi = useApi(configApi.getNodeConfig)\n\n    useEffect(() => {\n        if (dialogProps.data) {\n            getNodeConfigApi.request(dialogProps.data)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='md'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.data && dialogProps.data.name && dialogProps.data.label && (\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                        <div\n                            style={{\n                                width: 50,\n                                height: 50,\n                                marginRight: 10,\n                                borderRadius: '50%',\n                                backgroundColor: 'white'\n                            }}\n                        >\n                            <img\n                                style={{\n                                    width: '100%',\n                                    height: '100%',\n                                    padding: 7,\n                                    borderRadius: '50%',\n                                    objectFit: 'contain'\n                                }}\n                                alt={dialogProps.data.name}\n                                src={`${baseURL}/api/v1/node-icon/${dialogProps.data.name}`}\n                            />\n                        </div>\n                        <div style={{ display: 'flex', flexDirection: 'column', marginLeft: 10 }}>\n                            {dialogProps.data.label}\n                            <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                <div\n                                    style={{\n                                        display: 'flex',\n                                        flexDirection: 'row',\n                                        width: 'max-content',\n                                        borderRadius: 15,\n                                        background: 'rgb(254,252,191)',\n                                        padding: 5,\n                                        paddingLeft: 10,\n                                        paddingRight: 10,\n                                        marginTop: 5,\n                                        marginBottom: 5\n                                    }}\n                                >\n                                    <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>{dialogProps.data.id}</span>\n                                </div>\n                                {dialogProps.data.version && (\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            flexDirection: 'row',\n                                            width: 'max-content',\n                                            borderRadius: 15,\n                                            background: '#e9edc9',\n                                            padding: 5,\n                                            paddingLeft: 10,\n                                            paddingRight: 10,\n                                            marginTop: 5,\n                                            marginLeft: 10,\n                                            marginBottom: 5\n                                        }}\n                                    >\n                                        <span style={{ color: '#606c38', fontSize: '0.825rem' }}>version {dialogProps.data.version}</span>\n                                    </div>\n                                )}\n                                {dialogProps.data.badge && (\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            flexDirection: 'row',\n                                            width: 'max-content',\n                                            borderRadius: 15,\n                                            background: dialogProps.data.badge === 'DEPRECATING' ? '#ffe57f' : '#52b69a',\n                                            padding: 5,\n                                            paddingLeft: 10,\n                                            paddingRight: 10,\n                                            marginTop: 5,\n                                            marginLeft: 10,\n                                            marginBottom: 5\n                                        }}\n                                    >\n                                        <span\n                                            style={{\n                                                color: dialogProps.data.badge !== 'DEPRECATING' ? 'white' : 'inherit',\n                                                fontSize: '0.825rem'\n                                            }}\n                                        >\n                                            {dialogProps.data.badge}\n                                        </span>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </DialogTitle>\n            <DialogContent>\n                {dialogProps.data?.description && (\n                    <div\n                        style={{\n                            padding: 10,\n                            marginBottom: 10\n                        }}\n                    >\n                        <span>{dialogProps.data.description}</span>\n                    </div>\n                )}\n                {getNodeConfigApi.data && getNodeConfigApi.data.length > 0 && (\n                    <TableViewOnly\n                        rows={getNodeConfigApi.data.map((obj) => {\n                            // eslint-disable-next-line\n                            const { node, nodeId, ...rest } = obj\n                            return rest\n                        })}\n                        columns={Object.keys(getNodeConfigApi.data[0]).slice(-3)}\n                    />\n                )}\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nNodeInfoDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default NodeInfoDialog\n","import PropTypes from 'prop-types'\nimport { useContext, useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles'\nimport { IconButton, Box, Typography, Divider, Button } from '@mui/material'\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport NodeInputHandler from './NodeInputHandler'\nimport NodeOutputHandler from './NodeOutputHandler'\nimport AdditionalParamsDialog from 'ui-component/dialog/AdditionalParamsDialog'\nimport NodeInfoDialog from 'ui-component/dialog/NodeInfoDialog'\n\n// const\nimport { baseURL } from 'store/constant'\nimport { IconTrash, IconCopy, IconInfoCircle, IconAlertTriangle } from '@tabler/icons'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    background: theme.palette.card.main,\n    // background: theme.paper,\n    color: theme.darkTextPrimary,\n    border: 'solid 1px',\n    borderColor: theme.palette.primary[200] + 75,\n    width: '300px',\n    height: 'auto',\n    padding: '10px',\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n    '&:hover': {\n        borderColor: theme.palette.primary.main\n    // background: theme.paper,\n\n    }\n}))\n\nconst LightTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)(({ theme }) => ({\n    [`& .${tooltipClasses.tooltip}`]: {\n        backgroundColor: theme.palette.nodeToolTip.background,\n        color: theme.palette.nodeToolTip.color,\n        boxShadow: theme.shadows[1]\n    }\n}))\n\n// ===========================|| CANVAS NODE ||=========================== //\n\nconst CanvasNode = ({ data }) => {\n    const theme = useTheme()\n    const canvas = useSelector((state) => state.canvas)\n    const { deleteNode, duplicateNode } = useContext(flowContext)\n\n    const [showDialog, setShowDialog] = useState(false)\n    const [dialogProps, setDialogProps] = useState({})\n    const [showInfoDialog, setShowInfoDialog] = useState(false)\n    const [infoDialogProps, setInfoDialogProps] = useState({})\n    const [warningMessage, setWarningMessage] = useState('')\n    const [open, setOpen] = useState(false)\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const handleOpen = () => {\n        setOpen(true)\n    }\n\n    const nodeOutdatedMessage = (oldVersion, newVersion) => `Node version ${oldVersion} outdated\\nUpdate to latest version ${newVersion}`\n\n    const nodeVersionEmptyMessage = (newVersion) => `Node outdated\\nUpdate to latest version ${newVersion}`\n\n    const onDialogClicked = () => {\n        const dialogProps = {\n            data,\n            inputParams: data.inputParams.filter((param) => param.additionalParams),\n            confirmButtonName: 'Save',\n            cancelButtonName: 'Cancel'\n        }\n        setDialogProps(dialogProps)\n        setShowDialog(true)\n    }\n\n    useEffect(() => {\n        const componentNode = canvas.componentNodes.find((nd) => nd.name === data.name)\n        if (componentNode) {\n            if (!data.version) {\n                setWarningMessage(nodeVersionEmptyMessage(componentNode.version))\n            } else if (data.version && componentNode.version > data.version) {\n                setWarningMessage(nodeOutdatedMessage(data.version, componentNode.version))\n            } else if (componentNode.badge === 'DEPRECATING') {\n                setWarningMessage('This node will be deprecated in the next release. Change to a new node tagged with NEW')\n            }\n        }\n    }, [canvas.componentNodes, data.name, data.version])\n\n    return (\n        <>\n            <CardWrapper\n                content={false}\n                sx={{\n                    padding: 0,\n                    borderColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary\n                }}\n                border={false}\n            >\n                <LightTooltip\n                    open={!canvas.canvasDialogShow && open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    disableFocusListener={true}\n                    title={\n                        <div\n                            style={{\n                                background: 'transparent',\n                                display: 'flex',\n                                flexDirection: 'column'\n                            }}\n                        >\n                            <IconButton\n                                title='Duplicate'\n                                onClick={() => {\n                                    duplicateNode(data.id)\n                                }}\n                                sx={{ height: '35px', width: '35px', '&:hover': { color: theme?.palette.primary.main } }}\n                                color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\n                            >\n                                <IconCopy />\n                            </IconButton>\n                            <IconButton\n                                title='Delete'\n                                onClick={() => {\n                                    deleteNode(data.id)\n                                }}\n                                sx={{ height: '35px', width: '35px', '&:hover': { color: 'red' } }}\n                                color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\n                            >\n                                <IconTrash />\n                            </IconButton>\n                            <IconButton\n                                title='Info'\n                                onClick={() => {\n                                    setInfoDialogProps({ data })\n                                    setShowInfoDialog(true)\n                                }}\n                                sx={{ height: '35px', width: '35px', '&:hover': { color: theme?.palette.secondary.main } }}\n                                color={theme?.customization?.isDarkMode ? theme.colors?.paper : 'inherit'}\n                            >\n                                <IconInfoCircle />\n                            </IconButton>\n                        </div>\n                    }\n                    placement='right-start'\n                >\n                    <Box>\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                            <Box style={{ width: 50, marginRight: 10, padding: 5 }}>\n                                <div\n                                    style={{\n                                        ...theme.typography.commonAvatar,\n                                        ...theme.typography.largeAvatar,\n                                        // borderRadius: '50%',\n                                        // backgroundColor: 'white',\n                                        backgroundColor: '#EEEEEE',\n                                        cursor: 'grab'\n                                    }}\n                                >\n                                    <img\n                                        style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\n                                        src={`${baseURL}/api/v1/node-icon/${data.name}`}\n                                        alt='Notification'\n                                    />\n                                </div>\n                            </Box>\n                            <Box>\n                                <Typography\n                                    sx={{\n                                        fontSize: '1rem',\n                                        fontWeight: 500,\n                                        mr: 2\n                                    }}\n                                >\n                                    {data.label}\n                                </Typography>\n                            </Box>\n                            {warningMessage && (\n                                <>\n                                    <div style={{ flexGrow: 1 }}></div>\n                                    <Tooltip title={<span style={{ whiteSpace: 'pre-line' }}>{warningMessage}</span>} placement='top'>\n                                        <IconButton sx={{ height: 35, width: 35 }}>\n                                            <IconAlertTriangle size={35} color='orange' />\n                                        </IconButton>\n                                    </Tooltip>\n                                </>\n                            )}\n                        </div>\n                        {(data.inputAnchors.length > 0 || data.inputParams.length > 0) && (\n                            <>\n                                <Divider />\n                                <Box sx={{ background: theme.palette.asyncSelect.main, p: 1 }}>\n                                    <Typography\n                                        sx={{\n                                            fontWeight: 500,\n                                            textAlign: 'center',\n                                        }}\n                                    >\n                                        Inputs\n                                    </Typography>\n                                </Box>\n                                <Divider />\n                            </>\n                        )}\n                        {data.inputAnchors.map((inputAnchor, index) => (\n                            <NodeInputHandler key={index} inputAnchor={inputAnchor} data={data} />\n                        ))}\n                        {data.inputParams\n                            .filter((inputParam) => !inputParam.hidden)\n                            .map((inputParam, index) => (\n                                <NodeInputHandler key={index} inputParam={inputParam} data={data} />\n                            ))}\n                        {data.inputParams.find((param) => param.additionalParams) && (\n                            <div\n                                style={{\n                                    textAlign: 'center',\n                                    marginTop:\n                                        data.inputParams.filter((param) => param.additionalParams).length ===\n                                        data.inputParams.length + data.inputAnchors.length\n                                            ? 20\n                                            : 0\n                                }}\n                            >\n                                <Button disableRipple sx={{ width: '90%', mb: 2 }} onClick={onDialogClicked}>\n                                    Additional Parameters\n                                </Button>\n                            </div>\n                        )}\n                        <Divider />\n                        <Box sx={{ background: theme.palette.asyncSelect.main, p: 1 }}>\n                            <Typography\n                                sx={{\n                                    fontWeight: 500,\n                                    textAlign: 'center'\n                                }}\n                            >\n                                Output\n                            </Typography>\n                        </Box>\n                        <Divider />\n\n                        {data.outputAnchors.map((outputAnchor, index) => (\n                            <NodeOutputHandler key={index} outputAnchor={outputAnchor} data={data} />\n                        ))}\n                    </Box>\n                </LightTooltip>\n            </CardWrapper>\n            <AdditionalParamsDialog\n                show={showDialog}\n                dialogProps={dialogProps}\n                onCancel={() => setShowDialog(false)}\n            ></AdditionalParamsDialog>\n            <NodeInfoDialog show={showInfoDialog} dialogProps={infoDialogProps} onCancel={() => setShowInfoDialog(false)}></NodeInfoDialog>\n        </>\n    )\n}\n\nCanvasNode.propTypes = {\n    data: PropTypes.object\n}\n\nexport default CanvasNode\n","import { getBezierPath, EdgeText } from 'reactflow'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { useContext } from 'react'\nimport { SET_DIRTY } from 'store/actions'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\nimport './index.css'\n\nconst foreignObjectSize = 40\n\nconst ButtonEdge = ({ id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style = {}, data, markerEnd }) => {\n    const [edgePath, edgeCenterX, edgeCenterY] = getBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition\n    })\n\n    const { deleteEdge } = useContext(flowContext)\n\n    const dispatch = useDispatch()\n\n    const onEdgeClick = (evt, id) => {\n        evt.stopPropagation()\n        deleteEdge(id)\n        dispatch({ type: SET_DIRTY })\n    }\n\n    return (\n        <>\n            <path id={id} style={style} className='react-flow__edge-path' d={edgePath} markerEnd={markerEnd} />\n            {data && data.label && (\n                <EdgeText\n                    x={sourceX + 10}\n                    y={sourceY + 10}\n                    label={data.label}\n                    labelStyle={{ fill: 'black' }}\n                    labelBgStyle={{ fill: 'transparent' }}\n                    labelBgPadding={[2, 4]}\n                    labelBgBorderRadius={2}\n                />\n            )}\n            <foreignObject\n                width={foreignObjectSize}\n                height={foreignObjectSize}\n                x={edgeCenterX - foreignObjectSize / 2}\n                y={edgeCenterY - foreignObjectSize / 2}\n                className='edgebutton-foreignobject'\n                requiredExtensions='http://www.w3.org/1999/xhtml'\n            >\n                <div>\n                    <button className='edgebutton' onClick={(event) => onEdgeClick(event, id)}>\n                        ×\n                    </button>\n                </div>\n            </foreignObject>\n        </>\n    )\n}\n\nButtonEdge.propTypes = {\n    id: PropTypes.string,\n    sourceX: PropTypes.number,\n    sourceY: PropTypes.number,\n    targetX: PropTypes.number,\n    targetY: PropTypes.number,\n    sourcePosition: PropTypes.any,\n    targetPosition: PropTypes.any,\n    style: PropTypes.object,\n    data: PropTypes.object,\n    markerEnd: PropTypes.any\n}\n\nexport default ButtonEdge\n","// assets\nimport { IconTrash, IconFileUpload, IconFileExport, IconCopy, IconSearch, IconMessage, IconPictureInPictureOff } from '@tabler/icons'\n\n// constant\nconst icons = { IconTrash, IconFileUpload, IconFileExport, IconCopy, IconSearch, IconMessage, IconPictureInPictureOff }\n\n// ==============================|| SETTINGS MENU ITEMS ||============================== //\n\nconst settings = {\n    id: 'settings',\n    title: '',\n    type: 'group',\n    children: [\n        {\n            id: 'conversationStarters',\n            title: 'Starter Prompts',\n            type: 'item',\n            url: '',\n            icon: icons.IconPictureInPictureOff\n        },\n        {\n            id: 'viewMessages',\n            title: 'View Messages',\n            type: 'item',\n            url: '',\n            icon: icons.IconMessage\n        },\n        {\n            id: 'duplicateChatflow',\n            title: 'Duplicate Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconCopy\n        },\n        {\n            id: 'loadChatflow',\n            title: 'Load Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconFileUpload\n        },\n        {\n            id: 'exportChatflow',\n            title: 'Export Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconFileExport\n        },\n        {\n            id: 'analyseChatflow',\n            title: 'Analyse Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconSearch\n        },\n        {\n            id: 'deleteChatflow',\n            title: 'Delete Chatflow',\n            type: 'item',\n            url: '',\n            icon: icons.IconTrash\n        }\n    ]\n}\n\nexport default settings\n","import { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport { Box, List, Paper, Popper, ClickAwayListener } from '@mui/material'\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport NavItem from 'layout/MainLayout/Sidebar/MenuList/NavItem'\n\nimport settings from 'menu-items/settings'\n\n// ==============================|| SETTINGS ||============================== //\n\nconst Settings = ({ chatflow, isSettingsOpen, anchorEl, onSettingsItemClick, onUploadFile, onClose }) => {\n    const theme = useTheme()\n    const [settingsMenu, setSettingsMenu] = useState([])\n\n    const [open, setOpen] = useState(false)\n\n    useEffect(() => {\n        if (chatflow && !chatflow.id) {\n            const settingsMenu = settings.children.filter((menu) => menu.id === 'loadChatflow')\n            setSettingsMenu(settingsMenu)\n        } else if (chatflow && chatflow.id) {\n            const settingsMenu = settings.children\n            setSettingsMenu(settingsMenu)\n        }\n    }, [chatflow])\n\n    useEffect(() => {\n        setOpen(isSettingsOpen)\n    }, [isSettingsOpen])\n\n    // settings list items\n    const items = settingsMenu.map((menu) => {\n        return (\n            <NavItem\n                key={menu.id}\n                item={menu}\n                level={1}\n                navType='SETTINGS'\n                onClick={(id) => onSettingsItemClick(id)}\n                onUploadFile={onUploadFile}\n            />\n        )\n    })\n\n    return (\n        <>\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorEl}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [170, 20]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={onClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\n                                        <Box sx={{ p: 2 }}>\n                                            <List>{items}</List>\n                                        </Box>\n                                    </PerfectScrollbar>\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper>\n        </>\n    )\n}\n\nSettings.propTypes = {\n    chatflow: PropTypes.object,\n    isSettingsOpen: PropTypes.bool,\n    anchorEl: PropTypes.any,\n    onSettingsItemClick: PropTypes.func,\n    onUploadFile: PropTypes.func,\n    onClose: PropTypes.func\n}\n\nexport default Settings\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\nimport { SketchPicker } from 'react-color'\nimport PropTypes from 'prop-types'\n\nimport { Box, Typography, Button, Switch, OutlinedInput, Popover, Stack, IconButton } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\n\n// Icons\nimport { IconX, IconCopy, IconArrowUpRightCircle } from '@tabler/icons'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nconst defaultConfig = {\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n    poweredByTextColor: '#303235',\n    botMessage: {\n        backgroundColor: '#f7f8ff',\n        textColor: '#303235'\n    },\n    userMessage: {\n        backgroundColor: '#3B81F6',\n        textColor: '#ffffff'\n    },\n    textInput: {\n        backgroundColor: '#ffffff',\n        textColor: '#303235',\n        sendButtonColor: '#3B81F6'\n    }\n}\n\nconst ShareChatbot = ({ isSessionMemory }) => {\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const chatflow = useSelector((state) => state.canvas.chatflow)\n    const chatflowid = chatflow.id\n    const chatbotConfig = chatflow.chatbotConfig ? JSON.parse(chatflow.chatbotConfig) : {}\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [isPublicChatflow, setChatflowIsPublic] = useState(chatflow.isPublic ?? false)\n    const [generateNewSession, setGenerateNewSession] = useState(chatbotConfig?.generateNewSession ?? false)\n\n    const [title, setTitle] = useState(chatbotConfig?.title ?? '')\n    const [titleAvatarSrc, setTitleAvatarSrc] = useState(chatbotConfig?.titleAvatarSrc ?? '')\n\n    const [welcomeMessage, setWelcomeMessage] = useState(chatbotConfig?.welcomeMessage ?? '')\n    const [backgroundColor, setBackgroundColor] = useState(chatbotConfig?.backgroundColor ?? defaultConfig.backgroundColor)\n    const [fontSize, setFontSize] = useState(chatbotConfig?.fontSize ?? defaultConfig.fontSize)\n    const [poweredByTextColor, setPoweredByTextColor] = useState(chatbotConfig?.poweredByTextColor ?? defaultConfig.poweredByTextColor)\n\n    const [botMessageBackgroundColor, setBotMessageBackgroundColor] = useState(\n        chatbotConfig?.botMessage?.backgroundColor ?? defaultConfig.botMessage.backgroundColor\n    )\n    const [botMessageTextColor, setBotMessageTextColor] = useState(\n        chatbotConfig?.botMessage?.textColor ?? defaultConfig.botMessage.textColor\n    )\n    const [botMessageAvatarSrc, setBotMessageAvatarSrc] = useState(chatbotConfig?.botMessage?.avatarSrc ?? '')\n    const [botMessageShowAvatar, setBotMessageShowAvatar] = useState(chatbotConfig?.botMessage?.showAvatar ?? false)\n\n    const [userMessageBackgroundColor, setUserMessageBackgroundColor] = useState(\n        chatbotConfig?.userMessage?.backgroundColor ?? defaultConfig.userMessage.backgroundColor\n    )\n    const [userMessageTextColor, setUserMessageTextColor] = useState(\n        chatbotConfig?.userMessage?.textColor ?? defaultConfig.userMessage.textColor\n    )\n    const [userMessageAvatarSrc, setUserMessageAvatarSrc] = useState(chatbotConfig?.userMessage?.avatarSrc ?? '')\n    const [userMessageShowAvatar, setUserMessageShowAvatar] = useState(chatbotConfig?.userMessage?.showAvatar ?? false)\n\n    const [textInputBackgroundColor, setTextInputBackgroundColor] = useState(\n        chatbotConfig?.textInput?.backgroundColor ?? defaultConfig.textInput.backgroundColor\n    )\n    const [textInputTextColor, setTextInputTextColor] = useState(chatbotConfig?.textInput?.textColor ?? defaultConfig.textInput.textColor)\n    const [textInputPlaceholder, setTextInputPlaceholder] = useState(chatbotConfig?.textInput?.placeholder ?? '')\n    const [textInputSendButtonColor, setTextInputSendButtonColor] = useState(\n        chatbotConfig?.textInput?.sendButtonColor ?? defaultConfig.textInput.sendButtonColor\n    )\n\n    const [colorAnchorEl, setColorAnchorEl] = useState(null)\n    const [selectedColorConfig, setSelectedColorConfig] = useState('')\n    const [sketchPickerColor, setSketchPickerColor] = useState('')\n    const openColorPopOver = Boolean(colorAnchorEl)\n\n    const [copyAnchorEl, setCopyAnchorEl] = useState(null)\n    const openCopyPopOver = Boolean(copyAnchorEl)\n\n    const formatObj = () => {\n        const obj = {\n            botMessage: {\n                showAvatar: false\n            },\n            userMessage: {\n                showAvatar: false\n            },\n            textInput: {},\n            overrideConfig: {}\n        }\n        if (title) obj.title = title\n        if (titleAvatarSrc) obj.titleAvatarSrc = titleAvatarSrc\n        if (welcomeMessage) obj.welcomeMessage = welcomeMessage\n        if (backgroundColor) obj.backgroundColor = backgroundColor\n        if (fontSize) obj.fontSize = fontSize\n        if (poweredByTextColor) obj.poweredByTextColor = poweredByTextColor\n\n        if (botMessageBackgroundColor) obj.botMessage.backgroundColor = botMessageBackgroundColor\n        if (botMessageTextColor) obj.botMessage.textColor = botMessageTextColor\n        if (botMessageAvatarSrc) obj.botMessage.avatarSrc = botMessageAvatarSrc\n        if (botMessageShowAvatar) obj.botMessage.showAvatar = botMessageShowAvatar\n\n        if (userMessageBackgroundColor) obj.userMessage.backgroundColor = userMessageBackgroundColor\n        if (userMessageTextColor) obj.userMessage.textColor = userMessageTextColor\n        if (userMessageAvatarSrc) obj.userMessage.avatarSrc = userMessageAvatarSrc\n        if (userMessageShowAvatar) obj.userMessage.showAvatar = userMessageShowAvatar\n\n        if (textInputBackgroundColor) obj.textInput.backgroundColor = textInputBackgroundColor\n        if (textInputTextColor) obj.textInput.textColor = textInputTextColor\n        if (textInputPlaceholder) obj.textInput.placeholder = textInputPlaceholder\n        if (textInputSendButtonColor) obj.textInput.sendButtonColor = textInputSendButtonColor\n\n        if (isSessionMemory) obj.overrideConfig.generateNewSession = generateNewSession\n\n        if (chatbotConfig?.starterPrompts) obj.starterPrompts = chatbotConfig.starterPrompts\n\n        return obj\n    }\n\n    const onSave = async () => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\n                chatbotConfig: JSON.stringify(formatObj())\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const onSwitchChange = async (checked) => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, { isPublic: checked })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const handleClosePopOver = () => {\n        setColorAnchorEl(null)\n    }\n\n    const handleCloseCopyPopOver = () => {\n        setCopyAnchorEl(null)\n    }\n\n    const onColorSelected = (hexColor) => {\n        switch (selectedColorConfig) {\n            case 'backgroundColor':\n                setBackgroundColor(hexColor)\n                break\n            case 'poweredByTextColor':\n                setPoweredByTextColor(hexColor)\n                break\n            case 'botMessageBackgroundColor':\n                setBotMessageBackgroundColor(hexColor)\n                break\n            case 'botMessageTextColor':\n                setBotMessageTextColor(hexColor)\n                break\n            case 'userMessageBackgroundColor':\n                setUserMessageBackgroundColor(hexColor)\n                break\n            case 'userMessageTextColor':\n                setUserMessageTextColor(hexColor)\n                break\n            case 'textInputBackgroundColor':\n                setTextInputBackgroundColor(hexColor)\n                break\n            case 'textInputTextColor':\n                setTextInputTextColor(hexColor)\n                break\n            case 'textInputSendButtonColor':\n                setTextInputSendButtonColor(hexColor)\n                break\n        }\n        setSketchPickerColor(hexColor)\n    }\n\n    const onTextChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'title':\n                setTitle(value)\n                break\n            case 'titleAvatarSrc':\n                setTitleAvatarSrc(value)\n                break\n            case 'welcomeMessage':\n                setWelcomeMessage(value)\n                break\n            case 'fontSize':\n                setFontSize(value)\n                break\n            case 'botMessageAvatarSrc':\n                setBotMessageAvatarSrc(value)\n                break\n            case 'userMessageAvatarSrc':\n                setUserMessageAvatarSrc(value)\n                break\n            case 'textInputPlaceholder':\n                setTextInputPlaceholder(value)\n                break\n        }\n    }\n\n    const onBooleanChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'botMessageShowAvatar':\n                setBotMessageShowAvatar(value)\n                break\n            case 'userMessageShowAvatar':\n                setUserMessageShowAvatar(value)\n                break\n            case 'generateNewSession':\n                setGenerateNewSession(value)\n                break\n        }\n    }\n\n    const colorField = (color, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Box\n                        sx={{\n                            cursor: 'pointer',\n                            width: '30px',\n                            height: '30px',\n                            border: '1px solid #616161',\n                            marginRight: '10px',\n                            backgroundColor: color ?? '#ffffff',\n                            borderRadius: '5px'\n                        }}\n                        onClick={(event) => {\n                            setSelectedColorConfig(fieldName)\n                            setSketchPickerColor(color ?? '#ffffff')\n                            setColorAnchorEl(event.currentTarget)\n                        }}\n                    ></Box>\n                </div>\n            </Box>\n        )\n    }\n\n    const booleanField = (value, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Switch\n                        id={fieldName}\n                        checked={value}\n                        onChange={(event) => {\n                            onBooleanChanged(event.target.checked, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <OutlinedInput\n                        id={fieldName}\n                        type={fieldType}\n                        fullWidth\n                        value={message}\n                        placeholder={placeholder}\n                        name={fieldName}\n                        onChange={(e) => {\n                            onTextChanged(e.target.value, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    return (\n        <>\n            <Stack direction='row'>\n                <Typography\n                    sx={{\n                        p: 1,\n                        borderRadius: 10,\n                        backgroundColor: theme.palette.primary.light,\n                        width: 'max-content',\n                        height: 'max-content'\n                    }}\n                    variant='h5'\n                >\n                    {`${baseURL}/chatbot/${chatflowid}`}\n                </Typography>\n                <IconButton\n                    title='Copy Link'\n                    color='success'\n                    onClick={(event) => {\n                        navigator.clipboard.writeText(`${baseURL}/chatbot/${chatflowid}`)\n                        setCopyAnchorEl(event.currentTarget)\n                        setTimeout(() => {\n                            handleCloseCopyPopOver()\n                        }, 1500)\n                    }}\n                >\n                    <IconCopy />\n                </IconButton>\n                <IconButton title='Open New Tab' color='primary' onClick={() => window.open(`${baseURL}/chatbot/${chatflowid}`, '_blank')}>\n                    <IconArrowUpRightCircle />\n                </IconButton>\n                <div style={{ flex: 1 }} />\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <Switch\n                        checked={isPublicChatflow}\n                        onChange={(event) => {\n                            setChatflowIsPublic(event.target.checked)\n                            onSwitchChange(event.target.checked)\n                        }}\n                    />\n                    <Typography>Make Public</Typography>\n                    <TooltipWithParser\n                        style={{ marginLeft: 10 }}\n                        title={'Making public will allow anyone to access the chatbot without username & password'}\n                    />\n                </div>\n            </Stack>\n            {textField(title, 'title', 'Title', 'string', 'Flowise Assistant')}\n            {textField(\n                titleAvatarSrc,\n                'titleAvatarSrc',\n                'Title Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/FlowiseAI/Flowise/main/assets/FloWiseAI_dark.png`\n            )}\n            {textField(welcomeMessage, 'welcomeMessage', 'Welcome Message', 'string', 'Hello! This is custom welcome message')}\n            {colorField(backgroundColor, 'backgroundColor', 'Background Color')}\n            {textField(fontSize, 'fontSize', 'Font Size', 'number')}\n            {colorField(poweredByTextColor, 'poweredByTextColor', 'PoweredBy TextColor')}\n\n            {/*BOT Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Bot Message\n            </Typography>\n            {colorField(botMessageBackgroundColor, 'botMessageBackgroundColor', 'Background Color')}\n            {colorField(botMessageTextColor, 'botMessageTextColor', 'Text Color')}\n            {textField(\n                botMessageAvatarSrc,\n                'botMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png`\n            )}\n            {booleanField(botMessageShowAvatar, 'botMessageShowAvatar', 'Show Avatar')}\n\n            {/*USER Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                User Message\n            </Typography>\n            {colorField(userMessageBackgroundColor, 'userMessageBackgroundColor', 'Background Color')}\n            {colorField(userMessageTextColor, 'userMessageTextColor', 'Text Color')}\n            {textField(\n                userMessageAvatarSrc,\n                'userMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png`\n            )}\n            {booleanField(userMessageShowAvatar, 'userMessageShowAvatar', 'Show Avatar')}\n\n            {/*TEXT Input*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Text Input\n            </Typography>\n            {colorField(textInputBackgroundColor, 'textInputBackgroundColor', 'Background Color')}\n            {colorField(textInputTextColor, 'textInputTextColor', 'Text Color')}\n            {textField(textInputPlaceholder, 'textInputPlaceholder', 'TextInput Placeholder', 'string', `Type question..`)}\n            {colorField(textInputSendButtonColor, 'textInputSendButtonColor', 'TextIntput Send Button Color')}\n\n            {/*Session Memory Input*/}\n            {isSessionMemory && (\n                <>\n                    <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                        Session Memory\n                    </Typography>\n                    {booleanField(generateNewSession, 'generateNewSession', 'Start new session when chatbot link is opened or refreshed')}\n                </>\n            )}\n\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\n                Save Changes\n            </StyledButton>\n            <Popover\n                open={openColorPopOver}\n                anchorEl={colorAnchorEl}\n                onClose={handleClosePopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <SketchPicker color={sketchPickerColor} onChange={(color) => onColorSelected(color.hex)} />\n            </Popover>\n            <Popover\n                open={openCopyPopOver}\n                anchorEl={copyAnchorEl}\n                onClose={handleCloseCopyPopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                    Copied!\n                </Typography>\n            </Popover>\n        </>\n    )\n}\n\nShareChatbot.propTypes = {\n    isSessionMemory: PropTypes.bool\n}\n\nexport default ShareChatbot\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormControlLabel, Checkbox } from '@mui/material'\n\nexport const CheckboxInput = ({ value, label, onChange, disabled = false }) => {\n    const [myValue, setMyValue] = useState(value)\n\n    return (\n        <>\n            <FormControlLabel\n                sx={{ mt: 1, width: '100%' }}\n                size='small'\n                control={\n                    <Checkbox\n                        disabled={disabled}\n                        checked={myValue}\n                        onChange={(event) => {\n                            setMyValue(event.target.checked)\n                            onChange(event.target.checked)\n                        }}\n                    />\n                }\n                label={label}\n            />\n        </>\n    )\n}\n\nCheckboxInput.propTypes = {\n    value: PropTypes.bool,\n    label: PropTypes.string,\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool\n}\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Tabs, Tab, Box } from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\n\n// Project import\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst embedPopupHtmlCode = (chatflowid) => {\n    return `<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/gh/letsgomaslow/fusionflow@embedchat-branding/fusionflow-ChatEmbed/dist/web.js\"\n    Chatbot.init({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n    })\n</script>`\n}\n\nconst embedPopupReactCode = (chatflowid) => {\n    return `import { BubbleChat } from 'flowise-embed-react'\n\nconst App = () => {\n    return (\n        <BubbleChat chatflowid=\"${chatflowid}\" apiHost=\"${baseURL}\" />\n    );\n};`\n}\n\nconst embedFullpageHtmlCode = (chatflowid) => {\n    return `<flowise-fullchatbot></flowise-fullchatbot>\n<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/gh/letsgomaslow/fusionflow@embedchat-branding/fusionflow-ChatEmbed/dist/web.js\"\n    Chatbot.initFull({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n    })\n</script>`\n}\n\nconst embedFullpageReactCode = (chatflowid) => {\n    return `import { FullPageChat } from \"flowise-embed-react\"\n\nconst App = () => {\n    return (\n        <FullPageChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n        />\n    );\n};`\n}\n\nconst buttonConfig = (isReact = false) => {\n    return isReact\n        ? `button: {\n                    backgroundColor: \"#3B81F6\",\n                    right: 20,\n                    bottom: 20,\n                    size: \"medium\",\n                    iconColor: \"white\",\n                    customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\n                }`\n        : `button: {\n                backgroundColor: \"#3B81F6\",\n                right: 20,\n                bottom: 20,\n                size: \"medium\",\n                iconColor: \"white\",\n                customIconSrc: \"https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg\",\n            }`\n}\n\nconst chatwindowConfig = (isReact = false) => {\n    return isReact\n        ? `chatWindow: {\n                    welcomeMessage: \"Hello! This is custom welcome message\",\n                    backgroundColor: \"#ffffff\",\n                    height: 700,\n                    width: 400,\n                    fontSize: 16,\n                    poweredByTextColor: \"#303235\",\n                    botMessage: {\n                        backgroundColor: \"#f7f8ff\",\n                        textColor: \"#303235\",\n                        showAvatar: true,\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\n                    },\n                    userMessage: {\n                        backgroundColor: \"#3B81F6\",\n                        textColor: \"#ffffff\",\n                        showAvatar: true,\n                        avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\n                    },\n                    textInput: {\n                        placeholder: \"Type your question\",\n                        backgroundColor: \"#ffffff\",\n                        textColor: \"#303235\",\n                        sendButtonColor: \"#3B81F6\",\n                    }\n                }`\n        : `chatWindow: {\n                welcomeMessage: \"Hello! This is custom welcome message\",\n                backgroundColor: \"#ffffff\",\n                height: 700,\n                width: 400,\n                fontSize: 16,\n                poweredByTextColor: \"#303235\",\n                botMessage: {\n                    backgroundColor: \"#f7f8ff\",\n                    textColor: \"#303235\",\n                    showAvatar: true,\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\",\n                },\n                userMessage: {\n                    backgroundColor: \"#3B81F6\",\n                    textColor: \"#ffffff\",\n                    showAvatar: true,\n                    avatarSrc: \"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\",\n                },\n                textInput: {\n                    placeholder: \"Type your question\",\n                    backgroundColor: \"#ffffff\",\n                    textColor: \"#303235\",\n                    sendButtonColor: \"#3B81F6\",\n                }\n            }`\n}\n\nconst embedPopupHtmlCodeCustomization = (chatflowid) => {\n    return `<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/gh/letsgomaslow/fusionflow@embedchat-branding/fusionflow-ChatEmbed/dist/web.js\"\n    Chatbot.init({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n        chatflowConfig: {\n            // topK: 2\n        },\n        theme: {\n            ${buttonConfig()},\n            ${chatwindowConfig()}\n        }\n    })\n</script>`\n}\n\nconst embedPopupReactCodeCustomization = (chatflowid) => {\n    return `import { BubbleChat } from 'flowise-embed-react'\n\nconst App = () => {\n    return (\n        <BubbleChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n            theme={{\n                ${buttonConfig(true)},\n                ${chatwindowConfig(true)}\n            }}\n        />\n    );\n};`\n}\n\nconst embedFullpageHtmlCodeCustomization = (chatflowid) => {\n    return `<flowise-fullchatbot></flowise-fullchatbot>\n<script type=\"module\">\n    import Chatbot from \"https://cdn.jsdelivr.net/gh/letsgomaslow/fusionflow@embedchat-branding/fusionflow-ChatEmbed/dist/web.js\"\n    Chatbot.initFull({\n        chatflowid: \"${chatflowid}\",\n        apiHost: \"${baseURL}\",\n        theme: {\n            ${chatwindowConfig()}\n        }\n    })\n</script>`\n}\n\nconst embedFullpageReactCodeCustomization = (chatflowid) => {\n    return `import { FullPageChat } from \"flowise-embed-react\"\n\nconst App = () => {\n    return (\n        <FullPageChat\n            chatflowid=\"${chatflowid}\"\n            apiHost=\"${baseURL}\"\n            theme={{\n                ${chatwindowConfig(true)}\n            }}\n        />\n    );\n};`\n}\n\nconst EmbedChat = ({ chatflowid }) => {\n    const codes = ['Popup Html', 'Fullpage Html', 'Popup React', 'Fullpage React']\n    const [value, setValue] = useState(0)\n    const [embedChatCheckboxVal, setEmbedChatCheckbox] = useState(false)\n\n    const onCheckBoxEmbedChatChanged = (newVal) => {\n        setEmbedChatCheckbox(newVal)\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        switch (codeLang) {\n            case 'Popup Html':\n                return embedPopupHtmlCode(chatflowid)\n            case 'Fullpage Html':\n                return embedFullpageHtmlCode(chatflowid)\n            case 'Popup React':\n                return embedPopupReactCode(chatflowid)\n            case 'Fullpage React':\n                return embedFullpageReactCode(chatflowid)\n            default:\n                return ''\n        }\n    }\n\n    const getCodeCustomization = (codeLang) => {\n        switch (codeLang) {\n            case 'Popup Html':\n                return embedPopupHtmlCodeCustomization(chatflowid)\n            case 'Fullpage Html':\n                return embedFullpageHtmlCodeCustomization(chatflowid)\n            case 'Popup React':\n                return embedPopupReactCodeCustomization(chatflowid)\n            case 'Fullpage React':\n                return embedFullpageReactCodeCustomization(chatflowid)\n            default:\n                return ''\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                <div style={{ flex: 80 }}>\n                    <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                        {codes.map((codeLang, index) => (\n                            <Tab key={index} label={codeLang} {...a11yProps(index)}></Tab>\n                        ))}\n                    </Tabs>\n                </div>\n            </div>\n            <div style={{ marginTop: 10 }}></div>\n            {codes.map((codeLang, index) => (\n                <TabPanel key={index} value={value} index={index}>\n                    {(value === 0 || value === 1) && (\n                        <>\n                            <span>\n                                Paste this anywhere in the <code>{`<body>`}</code> tag of your html file.\n                                {/* <p>\n                                    You can also specify a&nbsp;\n                                    <a\n                                        rel='noreferrer'\n                                        target='_blank'\n                                        href='https://www.npmjs.com/package/flowise-embed?activeTab=versions'\n                                    >\n                                        version\n                                    </a>\n                                    :&nbsp;<code>{`https://cdn.jsdelivr.net/gh/letsgomaslow/fusionflow@embedchat-branding/fusionflow-ChatEmbed/dist/web.js`}</code>\n                                    \n                                </p> */}\n                            </span>\n                            <div style={{ height: 10 }}></div>\n                        </>\n                    )}\n                    <CopyBlock theme={atomOneDark} text={getCode(codeLang)} language='javascript' showLineNumbers={false} wrapLines />\n\n                    <CheckboxInput label='Show Embed Chat Config' value={embedChatCheckboxVal} onChange={onCheckBoxEmbedChatChanged} />\n\n                    {embedChatCheckboxVal && (\n                        <CopyBlock\n                            theme={atomOneDark}\n                            text={getCodeCustomization(codeLang)}\n                            language='javascript'\n                            showLineNumbers={false}\n                            wrapLines\n                        />\n                    )}\n                </TabPanel>\n            ))}\n        </>\n    )\n}\n\nEmbedChat.propTypes = {\n    chatflowid: PropTypes.string\n}\n\nexport default EmbedChat\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\nimport PropTypes from 'prop-types'\n\nimport { Box, Typography, Button, OutlinedInput } from '@mui/material'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\n// Icons\nimport { IconX } from '@tabler/icons'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\n\nconst Configuration = () => {\n    const dispatch = useDispatch()\n    const chatflow = useSelector((state) => state.canvas.chatflow)\n    const chatflowid = chatflow.id\n    const apiConfig = chatflow.apiConfig ? JSON.parse(chatflow.apiConfig) : {}\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [limitMax, setLimitMax] = useState(apiConfig?.rateLimit?.limitMax ?? '')\n    const [limitDuration, setLimitDuration] = useState(apiConfig?.rateLimit?.limitDuration ?? '')\n    const [limitMsg, setLimitMsg] = useState(apiConfig?.rateLimit?.limitMsg ?? '')\n\n    const formatObj = () => {\n        const obj = {\n            rateLimit: {}\n        }\n        const rateLimitValuesBoolean = [!limitMax, !limitDuration, !limitMsg]\n        const rateLimitFilledValues = rateLimitValuesBoolean.filter((value) => value === false)\n        if (rateLimitFilledValues.length >= 1 && rateLimitFilledValues.length <= 2) {\n            throw new Error('Need to fill all rate limit input fields')\n        } else if (rateLimitFilledValues.length === 3) {\n            obj.rateLimit = {\n                limitMax,\n                limitDuration,\n                limitMsg\n            }\n        }\n\n        return obj\n    }\n\n    const onSave = async () => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\n                apiConfig: JSON.stringify(formatObj())\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'API Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response\n                ? error.response.data || `${error.response.status}: ${error.response.statusText}`\n                : error.message\n            enqueueSnackbar({\n                message: `Failed to save API Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const onTextChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'limitMax':\n                setLimitMax(value)\n                break\n            case 'limitDuration':\n                setLimitDuration(value)\n                break\n            case 'limitMsg':\n                setLimitMsg(value)\n                break\n        }\n    }\n\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <OutlinedInput\n                        id={fieldName}\n                        type={fieldType}\n                        fullWidth\n                        value={message}\n                        placeholder={placeholder}\n                        name={fieldName}\n                        onChange={(e) => {\n                            onTextChanged(e.target.value, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    return (\n        <>\n            {/*Rate Limit*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Rate Limit{' '}\n                <TooltipWithParser\n                    style={{ mb: 1, mt: 2, marginLeft: 10 }}\n                    title={\n                        'Visit <a target=\"_blank\" href=\"https://docs.flowiseai.com/rate-limit\">Rate Limit Setup Guide</a> to set up Rate Limit correctly in your hosting environment.'\n                    }\n                />\n            </Typography>\n            {textField(limitMax, 'limitMax', 'Message Limit per Duration', 'number')}\n            {textField(limitDuration, 'limitDuration', 'Duration in Second', 'number')}\n            {textField(limitMsg, 'limitMsg', 'Limit Message', 'string')}\n\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\n                Save Changes\n            </StyledButton>\n        </>\n    )\n}\n\nConfiguration.propTypes = {\n    isSessionMemory: PropTypes.bool\n}\n\nexport default Configuration\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPython(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.84.5a16.4,16.4,0,0,0-3.57.32C9.1,1.39,8.53,2.53,8.53,4.64V7.48H16v1H5.77a4.73,4.73,0,0,0-4.7,3.74,14.82,14.82,0,0,0,0,7.54c.57,2.28,1.86,3.82,4,3.82h2.6V20.14a4.73,4.73,0,0,1,4.63-4.63h7.38a3.72,3.72,0,0,0,3.73-3.73V4.64A4.16,4.16,0,0,0,19.65.82,20.49,20.49,0,0,0,15.84.5ZM11.78,2.77a1.39,1.39,0,0,1,1.38,1.46,1.37,1.37,0,0,1-1.38,1.38A1.42,1.42,0,0,1,10.4,4.23,1.44,1.44,0,0,1,11.78,2.77Z\",\n    fill: \"#5a9fd4\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.16,31.5a16.4,16.4,0,0,0,3.57-.32c3.17-.57,3.74-1.71,3.74-3.82V24.52H16v-1H26.23a4.73,4.73,0,0,0,4.7-3.74,14.82,14.82,0,0,0,0-7.54c-.57-2.28-1.86-3.82-4-3.82h-2.6v3.41a4.73,4.73,0,0,1-4.63,4.63H12.35a3.72,3.72,0,0,0-3.73,3.73v7.14a4.16,4.16,0,0,0,3.73,3.82A20.49,20.49,0,0,0,16.16,31.5Zm4.06-2.27a1.39,1.39,0,0,1-1.38-1.46,1.37,1.37,0,0,1,1.38-1.38,1.42,1.42,0,0,1,1.38,1.38A1.44,1.44,0,0,1,20.22,29.23Z\",\n    fill: \"#ffd43b\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPython);\nexport default __webpack_public_path__ + \"static/media/python.b0fd2326ee21d9c5524d0d243379c879.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgJavascript(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    fill: \"#f7df1e\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.5,25a3.27,3.27,0,0,0,3,1.83c1.25,0,2-.63,2-1.49,0-1-.81-1.39-2.19-2L23.56,23C21.39,22.1,20,20.94,20,18.49c0-2.25,1.72-4,4.41-4a4.44,4.44,0,0,1,4.27,2.41l-2.34,1.5a2,2,0,0,0-1.93-1.29,1.31,1.31,0,0,0-1.44,1.29c0,.9.56,1.27,1.85,1.83l.75.32c2.55,1.1,4,2.21,4,4.72,0,2.71-2.12,4.19-5,4.19a5.78,5.78,0,0,1-5.48-3.07Zm-10.63.26c.48.84.91,1.55,1.94,1.55s1.61-.39,1.61-1.89V14.69h3V25c0,3.11-1.83,4.53-4.49,4.53a4.66,4.66,0,0,1-4.51-2.75Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgJavascript);\nexport default __webpack_public_path__ + \"static/media/javascript.0baf38b3d3f5b2d24e87fb5cc2fcfea0.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCUrl(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    className: \"mr-1.5\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    width: \"1em\",\n    height: \"1em\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 32 32\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 32,\n    height: 32,\n    rx: 4,\n    fill: \"#1683a5\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.71,14A5,5,0,0,1,8.82,9.29l2.64-2.2c1.67-1.37,2.52-1.41,4.6-1.41H21.7c1.19,0,2.45.27,2.45,1.79s-1.4,1.78-2.45,1.78H15.44a3.31,3.31,0,0,0-2,.89L11.24,12c-.55.44-1,.81-1,1.52v4.41c0,.7.41,1.07,1,1.52l2.16,1.82a3.34,3.34,0,0,0,2,.89H21.7c1.05,0,2.45.23,2.45,1.78s-1.26,1.78-2.45,1.78H16.06c-2.08,0-2.94,0-4.6-1.4L8.82,22.09A5.05,5.05,0,0,1,6.71,17.4Z\",\n    fill: \"#fff\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCUrl);\nexport default __webpack_public_path__ + \"static/media/cURL.37eb8ccceafb9e8630a53aa0eb756128.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEmbed(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\",\n    focusable: \"false\",\n    className: \"chakra-icon css-lbf1w4\",\n    id: \"Capa_1\",\n    enableBackground: \"new 0 0 512 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-367.08c-39.95 0-72.46-32.51-72.46-72.47v-229.66c0-39.96 32.51-72.47 72.46-72.47h367.08c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#6aa9ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m512 141.17v229.66c0 39.96-32.51 72.47-72.46 72.47h-183.54v-374.6h183.54c39.95 0 72.46 32.51 72.46 72.47z\",\n    fill: \"#4987ea\"\n  }), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m146.16 349.223-78.4-78.4c-5.858-5.858-5.858-15.355 0-21.213l86.833-86.833c5.857-5.858 15.355-5.858 21.213 0s5.858 15.355 0 21.213l-76.226 76.226 67.793 67.794c5.858 5.858 5.858 15.355 0 21.213-5.857 5.858-15.355 5.859-21.213 0z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m336.194 349.223c-5.858-5.858-5.858-15.355 0-21.213l76.226-76.227-67.793-67.794c-5.858-5.858-5.858-15.355 0-21.213 5.857-5.858 15.355-5.858 21.213 0l78.4 78.4c5.858 5.858 5.858 15.355 0 21.213l-86.833 86.833c-5.856 5.859-15.355 5.86-21.213.001z\",\n    fill: \"#dfe7f4\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6-25.78 72.99c-2.792 7.888-11.443 11.903-19.14 9.15-7.81-2.76-11.91-11.33-9.15-19.14l54.07-153.1 25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#f0f7ff\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m309.54 148.7-53.54 151.6v-90.1l25.25-71.49c2.76-7.81 11.33-11.91 19.14-9.15s11.91 11.33 9.15 19.14z\",\n    fill: \"#dfe7f4\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEmbed);\nexport default __webpack_public_path__ + \"static/media/embed.289f71beedf481a4fab870e9fed16fec.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSettings(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: \"icon icon-tabler icon-tabler-settings\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"none\",\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettings);\nexport default __webpack_public_path__ + \"static/media/settings.b8495df74c95f19ef6411b17f7b81f27.svg\";\nexport { ForwardRef as ReactComponent };","import { createPortal } from 'react-dom'\nimport { useNavigate } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport {\n    Tabs,\n    Tab,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Box,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Typography\n} from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// Project import\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\nimport ShareChatbot from './ShareChatbot'\nimport EmbedChat from './EmbedChat'\nimport Configuration from './Configuration'\n\n// Const\nimport { baseURL } from 'store/constant'\nimport { SET_CHATFLOW } from 'store/actions'\n\n// Images\nimport pythonSVG from 'assets/images/python.svg'\nimport javascriptSVG from 'assets/images/javascript.svg'\nimport cURLSVG from 'assets/images/cURL.svg'\nimport EmbedSVG from 'assets/images/embed.svg'\nimport ShareChatbotSVG from 'assets/images/sharing.png'\nimport settingsSVG from 'assets/images/settings.svg'\nimport { IconBulb } from '@tabler/icons'\n\n// API\nimport apiKeyApi from 'api/apikey'\nimport chatflowsApi from 'api/chatflows'\nimport configApi from 'api/config'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\nimport { TableViewOnly } from 'ui-component/table/Table'\n\n// Helpers\nimport { unshiftFiles, getConfigExamplesForJS, getConfigExamplesForPython, getConfigExamplesForCurl } from 'utils/genericHelper'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst APICodeDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const codes = ['Embed', 'Python', 'JavaScript', 'cURL', 'Share Chatbot', 'Configuration']\n    const [value, setValue] = useState(0)\n    const [keyOptions, setKeyOptions] = useState([])\n    const [apiKeys, setAPIKeys] = useState([])\n    const [chatflowApiKeyId, setChatflowApiKeyId] = useState('')\n    const [selectedApiKey, setSelectedApiKey] = useState({})\n    const [checkboxVal, setCheckbox] = useState(false)\n    const [nodeConfig, setNodeConfig] = useState({})\n    const [nodeConfigExpanded, setNodeConfigExpanded] = useState({})\n\n    const getAllAPIKeysApi = useApi(apiKeyApi.getAllAPIKeys)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n    const getConfigApi = useApi(configApi.getConfig)\n\n    const onCheckBoxChanged = (newVal) => {\n        setCheckbox(newVal)\n        if (newVal) {\n            getConfigApi.request(dialogProps.chatflowid)\n        }\n    }\n\n    const onApiKeySelected = (keyValue) => {\n        if (keyValue === 'addnewkey') {\n            navigate('/apikey')\n            return\n        }\n        setChatflowApiKeyId(keyValue)\n        setSelectedApiKey(apiKeys.find((key) => key.id === keyValue))\n        const updateBody = {\n            apikeyid: keyValue\n        }\n        updateChatflowApi.request(dialogProps.chatflowid, updateBody)\n    }\n\n    const groupByNodeLabel = (nodes, isFilter = false) => {\n        const accordianNodes = {}\n        const result = nodes.reduce(function (r, a) {\n            r[a.node] = r[a.node] || []\n            r[a.node].push(a)\n            accordianNodes[a.node] = isFilter ? true : false\n            return r\n        }, Object.create(null))\n        setNodeConfig(result)\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\n        const accordianNodes = { ...nodeConfigExpanded }\n        accordianNodes[nodeLabel] = isExpanded\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n        }\n    }, [updateChatflowApi.data, dispatch])\n\n    useEffect(() => {\n        if (getConfigApi.data) {\n            groupByNodeLabel(getConfigApi.data)\n        }\n    }, [getConfigApi.data])\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    const getCodeWithAuthorization = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getLang = (codeLang) => {\n        if (codeLang === 'Python') {\n            return 'python'\n        } else if (codeLang === 'JavaScript') {\n            return 'javascript'\n        } else if (codeLang === 'cURL') {\n            return 'bash'\n        }\n        return 'python'\n    }\n\n    const getSVG = (codeLang) => {\n        if (codeLang === 'Python') {\n            return pythonSVG\n        } else if (codeLang === 'JavaScript') {\n            return javascriptSVG\n        } else if (codeLang === 'Embed') {\n            return EmbedSVG\n        } else if (codeLang === 'cURL') {\n            return cURLSVG\n        } else if (codeLang === 'Share Chatbot') {\n            return ShareChatbotSVG\n        } else if (codeLang === 'Configuration') {\n            return settingsSVG\n        }\n        return pythonSVG\n    }\n\n    // ----------------------------CONFIG FORM DATA --------------------------//\n\n    const getConfigCodeWithFormData = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            let fileType = configData[0].type\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG FORM DATA with AUTH--------------------------//\n\n    const getConfigCodeWithFormDataWithAuth = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            let fileType = configData[0].type\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, headers=headers, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: { Authorization: \"Bearer ${selectedApiKey?.apiKey}\" },\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON--------------------------//\n\n    const getConfigCode = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON with AUTH--------------------------//\n\n    const getConfigCodeWithAuthorization = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getMultiConfigCodeWithFormData = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `body_data = {\n    \"openAIApiKey[chatOpenAI_0]\": \"sk-my-openai-1st-key\",\n    \"openAIApiKey[openAIEmbeddings_0]\": \"sk-my-openai-2nd-key\"\n}`\n        } else if (codeLang === 'JavaScript') {\n            return `formData.append(\"openAIApiKey[chatOpenAI_0]\", \"sk-my-openai-1st-key\")\nformData.append(\"openAIApiKey[openAIEmbeddings_0]\", \"sk-my-openai-2nd-key\")`\n        } else if (codeLang === 'cURL') {\n            return `-F \"openAIApiKey[chatOpenAI_0]=sk-my-openai-1st-key\" \\\\\n-F \"openAIApiKey[openAIEmbeddings_0]=sk-my-openai-2nd-key\" \\\\`\n        }\n    }\n\n    const getMultiConfigCode = () => {\n        return `{\n    \"overrideConfig\": {\n        \"openAIApiKey\": {\n            \"chatOpenAI_0\": \"sk-my-openai-1st-key\",\n            \"openAIEmbeddings_0\": \"sk-my-openai-2nd-key\"\n        }\n    }\n}`\n    }\n\n    useEffect(() => {\n        if (getAllAPIKeysApi.data) {\n            const options = [\n                {\n                    label: 'No Authorization',\n                    name: ''\n                }\n            ]\n            for (const key of getAllAPIKeysApi.data) {\n                options.push({\n                    label: key.keyName,\n                    name: key.id\n                })\n            }\n            options.push({\n                label: '- Add New Key -',\n                name: 'addnewkey'\n            })\n            setKeyOptions(options)\n            setAPIKeys(getAllAPIKeysApi.data)\n\n            if (dialogProps.chatflowApiKeyId) {\n                setChatflowApiKeyId(dialogProps.chatflowApiKeyId)\n                setSelectedApiKey(getAllAPIKeysApi.data.find((key) => key.id === dialogProps.chatflowApiKeyId))\n            }\n        }\n    }, [dialogProps, getAllAPIKeysApi.data])\n\n    useEffect(() => {\n        if (show) {\n            getAllAPIKeysApi.request()\n            getIsChatflowStreamingApi.request(dialogProps.chatflowid)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [show])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    <div style={{ flex: 80 }}>\n                        <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                            {codes.map((codeLang, index) => (\n                                <Tab\n                                    icon={\n                                        <img style={{ objectFit: 'cover', height: 15, width: 'auto' }} src={getSVG(codeLang)} alt='code' />\n                                    }\n                                    iconPosition='start'\n                                    key={index}\n                                    label={codeLang}\n                                    {...a11yProps(index)}\n                                ></Tab>\n                            ))}\n                        </Tabs>\n                    </div>\n                    <div style={{ flex: 20 }}>\n                        <Dropdown\n                            name='SelectKey'\n                            disableClearable={true}\n                            options={keyOptions}\n                            onSelect={(newValue) => onApiKeySelected(newValue)}\n                            value={dialogProps.chatflowApiKeyId ?? chatflowApiKeyId ?? 'Choose an API key'}\n                        />\n                    </div>\n                </div>\n                <div style={{ marginTop: 10 }}></div>\n                {codes.map((codeLang, index) => (\n                    <TabPanel key={index} value={value} index={index}>\n                        {(codeLang === 'Embed' || codeLang === 'Share Chatbot') && chatflowApiKeyId && (\n                            <>\n                                <p>You cannot use API key while embedding/sharing chatbot.</p>\n                                <p>\n                                    Please select <b>&quot;No Authorization&quot;</b> from the dropdown at the top right corner.\n                                </p>\n                            </>\n                        )}\n                        {codeLang === 'Embed' && !chatflowApiKeyId && <EmbedChat chatflowid={dialogProps.chatflowid} />}\n                        {codeLang !== 'Embed' && codeLang !== 'Share Chatbot' && codeLang !== 'Configuration' && (\n                            <>\n                                <CopyBlock\n                                    theme={atomOneDark}\n                                    text={chatflowApiKeyId ? getCodeWithAuthorization(codeLang) : getCode(codeLang)}\n                                    language={getLang(codeLang)}\n                                    showLineNumbers={false}\n                                    wrapLines\n                                />\n                                <CheckboxInput label='Show Input Config' value={checkboxVal} onChange={onCheckBoxChanged} />\n                                {checkboxVal && getConfigApi.data && getConfigApi.data.length > 0 && (\n                                    <>\n                                        {Object.keys(nodeConfig)\n                                            .sort()\n                                            .map((nodeLabel) => (\n                                                <Accordion\n                                                    expanded={nodeConfigExpanded[nodeLabel] || false}\n                                                    onChange={handleAccordionChange(nodeLabel)}\n                                                    key={nodeLabel}\n                                                    disableGutters\n                                                >\n                                                    <AccordionSummary\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        aria-controls={`nodes-accordian-${nodeLabel}`}\n                                                        id={`nodes-accordian-header-${nodeLabel}`}\n                                                    >\n                                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                                            <Typography variant='h5'>{nodeLabel}</Typography>\n                                                            <div\n                                                                style={{\n                                                                    display: 'flex',\n                                                                    flexDirection: 'row',\n                                                                    width: 'max-content',\n                                                                    borderRadius: 15,\n                                                                    background: 'rgb(254,252,191)',\n                                                                    padding: 5,\n                                                                    paddingLeft: 10,\n                                                                    paddingRight: 10,\n                                                                    marginLeft: 10\n                                                                }}\n                                                            >\n                                                                <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>\n                                                                    {nodeConfig[nodeLabel][0].nodeId}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <TableViewOnly\n                                                            rows={nodeConfig[nodeLabel].map((obj) => {\n                                                                // eslint-disable-next-line\n                                                                const { node, nodeId, ...rest } = obj\n                                                                return rest\n                                                            })}\n                                                            columns={Object.keys(nodeConfig[nodeLabel][0]).slice(-3)}\n                                                        />\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            ))}\n                                        <CopyBlock\n                                            theme={atomOneDark}\n                                            text={\n                                                chatflowApiKeyId\n                                                    ? dialogProps.isFormDataRequired\n                                                        ? getConfigCodeWithFormDataWithAuth(codeLang, getConfigApi.data)\n                                                        : getConfigCodeWithAuthorization(codeLang, getConfigApi.data)\n                                                    : dialogProps.isFormDataRequired\n                                                    ? getConfigCodeWithFormData(codeLang, getConfigApi.data)\n                                                    : getConfigCode(codeLang, getConfigApi.data)\n                                            }\n                                            language={getLang(codeLang)}\n                                            showLineNumbers={false}\n                                            wrapLines\n                                        />\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                borderRadius: 10,\n                                                background: '#d8f3dc',\n                                                padding: 10,\n                                                marginTop: 10,\n                                                marginBottom: 10\n                                            }}\n                                        >\n                                            <div\n                                                style={{\n                                                    display: 'flex',\n                                                    flexDirection: 'row',\n                                                    alignItems: 'center'\n                                                }}\n                                            >\n                                                <IconBulb size={30} color='#2d6a4f' />\n                                                <span style={{ color: '#2d6a4f', marginLeft: 10, fontWeight: 500 }}>\n                                                    You can also specify multiple values for a config parameter by specifying the node id\n                                                </span>\n                                            </div>\n                                            <div style={{ padding: 10 }}>\n                                                <CopyBlock\n                                                    theme={atomOneDark}\n                                                    text={\n                                                        dialogProps.isFormDataRequired\n                                                            ? getMultiConfigCodeWithFormData(codeLang)\n                                                            : getMultiConfigCode()\n                                                    }\n                                                    language={getLang(codeLang)}\n                                                    showLineNumbers={false}\n                                                    wrapLines\n                                                />\n                                            </div>\n                                        </div>\n                                    </>\n                                )}\n                                {/* {getIsChatflowStreamingApi.data?.isStreaming && (\n                                    <p>\n                                        Read&nbsp;\n                                        <a rel='noreferrer' target='_blank' href='https://docs.flowiseai.com/how-to-use#streaming'>\n                                            here\n                                        </a>\n                                        &nbsp;on how to stream response back to application\n                                    </p>\n                                )} */}\n                            </>\n                        )}\n                        {codeLang === 'Share Chatbot' && !chatflowApiKeyId && (\n                            <ShareChatbot isSessionMemory={dialogProps.isSessionMemory} />\n                        )}\n                        {codeLang === 'Configuration' && <Configuration />}\n                    </TabPanel>\n                ))}\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nAPICodeDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default APICodeDialog\n","var _ellipse, _path, _path2, _path3, _path4;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLunary(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ellipse || (_ellipse = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 15.9562,\n    cy: 16.0002,\n    rx: 4.3478,\n    ry: 4.34782,\n    stroke: \"black\",\n    strokeWidth: 2\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.5651 23.6086C21.603 25.621 18.8688 26.8695 15.8445 26.8695C10.2386 26.8695 5.62933 22.5797 5.08691 17.0869\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.34766 8.23751C10.314 6.3155 13.0074 5.13037 15.9785 5.13037C21.6311 5.13037 26.2789 9.42024 26.8258 14.913\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.5217 9.47815C9.5217 10.7268 8.50948 11.739 7.26085 11.739C6.01222 11.739 5 10.7268 5 9.47815C5 8.22951 6.01222 7.21729 7.26085 7.21729C8.50948 7.21729 9.5217 8.22951 9.5217 9.47815Z\",\n    fill: \"black\",\n    stroke: \"black\",\n    strokeWidth: 2\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.0002 21.4347C28.0002 22.6833 26.988 23.6956 25.7394 23.6956C24.4907 23.6956 23.4785 22.6833 23.4785 21.4347C23.4785 20.186 24.4907 19.1738 25.7394 19.1738C26.988 19.1738 28.0002 20.186 28.0002 21.4347Z\",\n    fill: \"black\",\n    stroke: \"black\",\n    strokeWidth: 2\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLunary);\nexport default __webpack_public_path__ + \"static/media/lunary.4e5c25a7ec33a54bd00981129f33e94c.svg\";\nexport { ForwardRef as ReactComponent };","import { createPortal } from 'react-dom'\nimport { useDispatch } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\n\n// material-ui\nimport {\n    Typography,\n    Box,\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    DialogActions,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    ListItem,\n    ListItemAvatar,\n    ListItemText\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport { IconX } from '@tabler/icons'\n\n// Project import\nimport CredentialInputHandler from 'views/canvas/CredentialInputHandler'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\nimport { SwitchInput } from 'ui-component/switch/Switch'\nimport { Input } from 'ui-component/input/Input'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport langsmithPNG from 'assets/images/langchain.png'\nimport langfuseSVG from 'assets/images/langfuse.svg'\nimport llmonitorSVG from 'assets/images/lunary.svg'\n\n// store\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\nimport useNotifier from 'utils/useNotifier'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\nconst analyticProviders = [\n    {\n        label: 'LangSmith',\n        name: 'langSmith',\n        icon: langsmithPNG,\n        url: 'https://smith.langchain.com',\n        inputs: [\n            {\n                label: 'Connect Credential',\n                name: 'credential',\n                type: 'credential',\n                credentialNames: ['langsmithApi']\n            },\n            {\n                label: 'Project Name',\n                name: 'projectName',\n                type: 'string',\n                optional: true,\n                description: 'If not provided, default will be used',\n                placeholder: 'default'\n            },\n            {\n                label: 'On/Off',\n                name: 'status',\n                type: 'boolean',\n                optional: true\n            }\n        ]\n    },\n    {\n        label: 'LangFuse',\n        name: 'langFuse',\n        icon: langfuseSVG,\n        url: 'https://langfuse.com',\n        inputs: [\n            {\n                label: 'Connect Credential',\n                name: 'credential',\n                type: 'credential',\n                credentialNames: ['langfuseApi']\n            },\n            {\n                label: 'Release',\n                name: 'release',\n                type: 'string',\n                optional: true,\n                description: 'The release number/hash of the application to provide analytics grouped by release'\n            },\n            {\n                label: 'On/Off',\n                name: 'status',\n                type: 'boolean',\n                optional: true\n            }\n        ]\n    },\n    {\n        label: 'LLMonitor',\n        name: 'llmonitor',\n        icon: llmonitorSVG,\n        url: 'https://llmonitor.com',\n        inputs: [\n            {\n                label: 'Connect Credential',\n                name: 'credential',\n                type: 'credential',\n                credentialNames: ['llmonitorApi']\n            },\n            {\n                label: 'On/Off',\n                name: 'status',\n                type: 'boolean',\n                optional: true\n            }\n        ]\n    }\n]\n\nconst AnalyseFlowDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [analytic, setAnalytic] = useState({})\n    const [providerExpanded, setProviderExpanded] = useState({})\n\n    const onSave = async () => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(dialogProps.chatflow.id, {\n                analytic: JSON.stringify(analytic)\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Analytic Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n            onCancel()\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Analytic Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const setValue = (value, providerName, inputParamName) => {\n        let newVal = {}\n        if (!Object.prototype.hasOwnProperty.call(analytic, providerName)) {\n            newVal = { ...analytic, [providerName]: {} }\n        } else {\n            newVal = { ...analytic }\n        }\n\n        newVal[providerName][inputParamName] = value\n        setAnalytic(newVal)\n    }\n\n    const handleAccordionChange = (providerName) => (event, isExpanded) => {\n        const accordianProviders = { ...providerExpanded }\n        accordianProviders[providerName] = isExpanded\n        setProviderExpanded(accordianProviders)\n    }\n\n    useEffect(() => {\n        if (dialogProps.chatflow && dialogProps.chatflow.analytic) {\n            try {\n                setAnalytic(JSON.parse(dialogProps.chatflow.analytic))\n            } catch (e) {\n                setAnalytic({})\n                console.error(e)\n            }\n        }\n\n        return () => {\n            setAnalytic({})\n            setProviderExpanded({})\n        }\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                Analyse Chatflow\n            </DialogTitle>\n            <DialogContent>\n                {analyticProviders.map((provider, index) => (\n                    <Accordion\n                        expanded={providerExpanded[provider.name] || false}\n                        onChange={handleAccordionChange(provider.name)}\n                        disableGutters\n                        key={index}\n                    >\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls={provider.name} id={provider.name}>\n                            <ListItem style={{ padding: 0, margin: 0 }} alignItems='center'>\n                                <ListItemAvatar>\n                                    <div\n                                        style={{\n                                            width: 50,\n                                            height: 50,\n                                            borderRadius: '50%',\n                                            backgroundColor: 'white'\n                                        }}\n                                    >\n                                        <img\n                                            style={{\n                                                width: '100%',\n                                                height: '100%',\n                                                padding: 10,\n                                                objectFit: 'contain'\n                                            }}\n                                            alt='AI'\n                                            src={provider.icon}\n                                        />\n                                    </div>\n                                </ListItemAvatar>\n                                <ListItemText\n                                    sx={{ ml: 1 }}\n                                    primary={provider.label}\n                                    secondary={\n                                        <a target='_blank' rel='noreferrer' href={provider.url}>\n                                            {provider.url}\n                                        </a>\n                                    }\n                                />\n                                {analytic[provider.name] && analytic[provider.name].status && (\n                                    <div\n                                        style={{\n                                            display: 'flex',\n                                            flexDirection: 'row',\n                                            alignContent: 'center',\n                                            alignItems: 'center',\n                                            background: '#d8f3dc',\n                                            borderRadius: 15,\n                                            padding: 5,\n                                            paddingLeft: 7,\n                                            paddingRight: 7,\n                                            marginRight: 10\n                                        }}\n                                    >\n                                        <div\n                                            style={{\n                                                width: 15,\n                                                height: 15,\n                                                borderRadius: '50%',\n                                                backgroundColor: '#70e000'\n                                            }}\n                                        />\n                                        <span style={{ color: '#006400', marginLeft: 10 }}>ON</span>\n                                    </div>\n                                )}\n                            </ListItem>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            {provider.inputs.map((inputParam, index) => (\n                                <Box key={index} sx={{ p: 2 }}>\n                                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                        <Typography>\n                                            {inputParam.label}\n                                            {!inputParam.optional && <span style={{ color: 'red' }}>&nbsp;*</span>}\n                                            {inputParam.description && (\n                                                <TooltipWithParser style={{ marginLeft: 10 }} title={inputParam.description} />\n                                            )}\n                                        </Typography>\n                                    </div>\n                                    {providerExpanded[provider.name] && inputParam.type === 'credential' && (\n                                        <CredentialInputHandler\n                                            data={analytic[provider.name] ? { credential: analytic[provider.name].credentialId } : {}}\n                                            inputParam={inputParam}\n                                            onSelect={(newValue) => setValue(newValue, provider.name, 'credentialId')}\n                                        />\n                                    )}\n                                    {providerExpanded[provider.name] && inputParam.type === 'boolean' && (\n                                        <SwitchInput\n                                            onChange={(newValue) => setValue(newValue, provider.name, inputParam.name)}\n                                            value={\n                                                analytic[provider.name]\n                                                    ? analytic[provider.name][inputParam.name]\n                                                    : inputParam.default ?? false\n                                            }\n                                        />\n                                    )}\n                                    {providerExpanded[provider.name] &&\n                                        (inputParam.type === 'string' ||\n                                            inputParam.type === 'password' ||\n                                            inputParam.type === 'number') && (\n                                            <Input\n                                                inputParam={inputParam}\n                                                onChange={(newValue) => setValue(newValue, provider.name, inputParam.name)}\n                                                value={\n                                                    analytic[provider.name]\n                                                        ? analytic[provider.name][inputParam.name]\n                                                        : inputParam.default ?? ''\n                                                }\n                                            />\n                                        )}\n                                </Box>\n                            ))}\n                        </AccordionDetails>\n                    </Accordion>\n                ))}\n            </DialogContent>\n            <DialogActions>\n                <StyledButton variant='contained' onClick={onSave}>\n                    Save\n                </StyledButton>\n            </DialogActions>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nAnalyseFlowDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default AnalyseFlowDialog\n","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLangfuse(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24 13.2044C23.0012 13.3219 21.9869 13.2745 21 13.0618C19.7752 12.7978 18.5927 12.2794 17.5344 11.506L15.8458 10.2721C14.0933 8.99141 11.9531 8.63334 10 9.10241C9.30052 9.27041 8.62505 9.54449 8 9.92028M24 18.7958C23.0012 18.6783 21.9869 18.7258 21 18.9385C19.7752 19.2024 18.5927 19.7208 17.5344 20.4942L15.8458 21.7282C14.0933 23.0088 11.9531 23.3669 10 22.8978C9.30052 22.7298 8.62505 22.4557 8 22.08\",\n    stroke: \"#E91212\",\n    strokeWidth: 4,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 21.0001L3.58441 20.5618C6.8019 18.1487 11.2184 18.1213 14.4656 20.4942L16.1542 21.7282C19.3633 24.0733 23.8728 23.3248 26.1521 20.0686C27.862 17.6258 27.862 14.3745 26.1521 11.9317C23.8728 8.67548 19.3633 7.92693 16.1542 10.2721L14.4656 11.506C11.2184 13.879 6.8019 13.8515 3.58441 11.4384L3 11.0001\",\n    stroke: \"#1363BB\",\n    strokeWidth: 4,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29 21L28.4156 20.5617C27.0917 19.5688 25.5649 18.9798 24 18.7957C23.0012 18.6782 21.9869 18.7257 21 18.9383M29 11L28.4156 11.4383C27.0917 12.4312 25.5649 13.0202 24 13.2043C23.0012 13.3218 21.9869 13.2743 21 13.0617M10 9.10229C9.30052 9.27029 8.62505 9.54437 8 9.92017C7.17438 10.4165 6.43672 11.0904 5.84789 11.9316C4.13794 14.3743 4.13794 17.6257 5.84789 20.0684C6.43672 20.9096 7.17438 21.5835 8 22.0798C8.62505 22.4556 9.30052 22.7297 10 22.8977\",\n    stroke: \"#E91212\",\n    strokeWidth: 4,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLangfuse);\nexport default __webpack_public_path__ + \"static/media/langfuse.c3fcac167cd0e18502e7583f5fbe7be7.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _path4, _circle, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _circle2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgMessageEmpty(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"data-name\": \"Layer 1\",\n    width: 576.49928,\n    height: 493.5,\n    viewBox: \"0 0 576.49928 493.5\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M481.17233,691.60038c9.25458-7.82,14.87595-20.17341,13.40175-32.19951s-10.605-23.08177-22.44888-25.63556-25.34517,4.51552-28.94256,16.08527c-1.97981-22.306-4.26119-45.54663-16.12049-64.54228-10.73831-17.2001-29.33726-29.50744-49.49431-31.70921s-41.37985,6.11408-53.95107,22.0238-15.64923,39.03914-6.84467,57.3048c6.486,13.45569,18.43551,23.46957,30.95562,31.61638a199.78578,199.78578,0,0,0,136.64075,29.89252\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#f2f2f2\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M343.54974,560.17414A326.87926,326.87926,0,0,1,389.10355,605.409a327.83254,327.83254,0,0,1,51.30832,85.74145c.92389,2.264-2.75246,3.24952-3.66608,1.0107a324.46215,324.46215,0,0,0-29.64717-56.09367,325.69973,325.69973,0,0,0-66.23723-73.20495c-1.898-1.54556.806-4.22115,2.68835-2.68834Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M487.56461,691.60038c-9.25458-7.82-14.87595-20.17341-13.40175-32.19951s10.605-23.08177,22.44888-25.63556,25.34518,4.51552,28.94256,16.08527c1.97982-22.306,4.26119-45.54663,16.1205-64.54228,10.7383-17.2001,29.33725-29.50744,49.49431-31.70921s41.37984,6.11408,53.95106,22.0238,15.64923,39.03914,6.84468,57.3048c-6.486,13.45569-18.43552,23.46957-30.95563,31.61638a199.78578,199.78578,0,0,1-136.64075,29.89252\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#f2f2f2\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M625.18721,560.17414A326.87878,326.87878,0,0,0,579.63339,605.409a327.83254,327.83254,0,0,0-51.30832,85.74145c-.92389,2.264,2.75246,3.24952,3.66608,1.0107a325.98749,325.98749,0,0,1,95.8844-129.29862c1.898-1.54556-.806-4.22115-2.68834-2.68834Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 203.27678,\n    cy: 191,\n    r: 31,\n    fill: \"#f2f2f2\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M419.4457,287.3877H633.02714V299.073H446.71128a83.41834,83.41834,0,0,0-83.41857,83.41839V515.25H339.92222a3.89516,3.89516,0,0,1-3.89508-3.89508V370.80609A83.41833,83.41833,0,0,1,419.4457,287.3877Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#f2f2f2\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M460.52714,692.25V514.75h52v177.5a4.50508,4.50508,0,0,1-4.5,4.5h-43A4.50508,4.50508,0,0,1,460.52714,692.25Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M325.02714,511.25V366.91553A86.76355,86.76355,0,0,1,411.69242,280.25H632.02714v236h-302A5.00573,5.00573,0,0,1,325.02714,511.25Zm305-229H411.69242a84.76141,84.76141,0,0,0-84.66528,84.66553V511.25a3.00328,3.00328,0,0,0,3,3h300Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M515.02714,410.25a18.02031,18.02031,0,0,1-18-18v-129a3.00328,3.00328,0,0,0-3-3h-70a5.0058,5.0058,0,0,1-5-5v-47a5.0058,5.0058,0,0,1,5-5h104a5.00573,5.00573,0,0,1,5,5v184A18.02031,18.02031,0,0,1,515.02714,410.25Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#673ab7\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M640.02714,278.25h0a56.88093,56.88093,0,0,1,57,56.76144V499.32108h112a16.96465,16.96465,0,0,1,17,16.92887h-243V335.01143A56.88093,56.88093,0,0,1,640.02714,278.25Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M626.34909,371.81749l11.80284,48.75606L869.03313,364.682l-11.80284-48.75606a3.6384,3.6384,0,0,0-2.35767-2.59508,3.59409,3.59409,0,0,0-1.33406-.20075L720.07937,244.02819a3.682,3.682,0,0,0-4.65628,1.11925l-64.31987,89.69375L626.85528,368.664a.51379.51379,0,0,0-.089.41825A3.64176,3.64176,0,0,0,626.34909,371.81749Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M626.7663,369.08226a.48973.48973,0,0,0,.20314.31583.55943.55943,0,0,0,.43331.08552.53586.53586,0,0,0,.29889-.20727l.08326-.11537,1.26254-1.76554,22.92889-31.96427,64.30082-89.6732a2.6198,2.6198,0,0,1,3.32194-.79624l132.42537,68.56666,1.18838.6168a1.29216,1.29216,0,0,0,.14733.05165,1.61549,1.61549,0,0,1,.27147-.026.51364.51364,0,0,0,.28983-.24474.524.524,0,0,0-.21883-.7087l-.16408-.08726L720.07937,244.02819a3.682,3.682,0,0,0-4.65628,1.11925l-64.31987,89.69375L626.85528,368.664A.51379.51379,0,0,0,626.7663,369.08226Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.10724,374.05386l5.13934.57012,38.14252,4.22535,25.28583,2.79936,1.49358.166,31.55217-24.64477,1.20883-.944,7.45235-5.82019,26.5135-20.70629.15919-1.45441,9.43044-85.11413a4.4539,4.4539,0,0,0-3.92912-4.91152L712.7,224.27763a4.456,4.456,0,0,0-4.91157,3.9292L701.138,288.24439l-3.689,33.28581L694.149,351.30867l-1.52976,13.82919-.44637,4.00573A4.45691,4.45691,0,0,0,696.10724,374.05386Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#e6e6e6\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M730.69234,299.44776l54.51668,6.03806,19.33354,2.14069a6.53968,6.53968,0,1,0,1.43979-12.99988l-24.04683-2.66322-49.79941-5.52188a6.54306,6.54306,0,0,0-1.44377,13.00623Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M727.58833,323.56377c.14068.02515.28136.05031.42455.06411l63.28515,7.0109,10.5663,1.17291a6.54214,6.54214,0,0,0,1.43855-13.005l-15.27834-1.69033-50.13045-5.5548-8.43621-.93485a6.53913,6.53913,0,0,0-1.86955,12.937Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M720.42587,344.94759a6.53866,6.53866,0,0,0,4.88047,3.12537l25.9387,2.87281,46.19708,5.118.01018-.00247,1.47721.16462,7.45235-5.82019a6.47057,6.47057,0,0,0,.0011-1.33,6.5548,6.5548,0,0,0-5.78686-5.82386l-6.41729-.713-25.457-2.81712-18.31689-2.0315-23.66022-2.62223a6.54,6.54,0,0,0-6.31878,9.87953Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M756.8588,269.96954l13.5644,1.50232,5.99124.66537,9.05013,1.00159a6.54214,6.54214,0,0,0,1.43855-13.005l-28.59932-3.16545a6.54059,6.54059,0,1,0-1.445,13.00113Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M645.9437,306.1818l16.53736,68.3138,27.60123,5.24823,25.532,4.86089,27.39356,5.21238,8.753,1.6657a3.6733,3.6733,0,0,0,2.93957-.71161l7.02206-5.48451,4.44605-3.472,31.55217-24.64477-20.062-82.87362a4.40272,4.40272,0,0,0-1.24424-2.15908,4.44864,4.44864,0,0,0-4.12489-1.11718L649.22,300.81267A4.45037,4.45037,0,0,0,645.9437,306.1818Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#673ab7\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M683.86407,360.52788a6.54613,6.54613,0,0,0,7.89577,4.818l72.2144-17.48162a6.54974,6.54974,0,0,0,4.818-7.89578,2.09959,2.09959,0,0,0-.0705-.24672,6.53879,6.53879,0,0,0-7.82527-4.5713l-72.2144,17.48161A6.54613,6.54613,0,0,0,683.86407,360.52788Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M690.08229,379.74383l25.532,4.86089L769.69885,371.512a6.54051,6.54051,0,1,0-3.07775-12.7138l-72.21439,17.48162a6.49388,6.49388,0,0,0-3.74749,2.51147A6.5835,6.5835,0,0,0,690.08229,379.74383Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M743.00785,389.8171l8.753,1.6657a3.6733,3.6733,0,0,0,2.93957-.71161l7.02206-5.48451Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M698.41482,323.89664a6.54611,6.54611,0,0,0,7.89577,4.818l27.97037-6.77105a6.54973,6.54973,0,0,0,4.818-7.89577,6.46594,6.46594,0,0,0-1.20489-2.48625,6.5454,6.5454,0,0,0-6.69088-2.33178l-27.97037,6.77105a6.54142,6.54142,0,0,0-4.818,7.89577Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M715.61222,384.60434l27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm81.83767-28.539.26672,1.10181,1.21521-.9448Zm-81.83767,28.539,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm-89.26313-12.78685,30.916,127.71019a3.66655,3.66655,0,0,0,4.42206,2.69835l223.76079-54.16788a3.6663,3.6663,0,0,0,2.69835-4.42206l-30.916-127.71018a3.6384,3.6384,0,0,0-2.35767-2.59508,3.59409,3.59409,0,0,0-1.33406-.20075,3.45812,3.45812,0,0,0-1.5141.3983,3.17906,3.17906,0,0,0-.60724.37708l-18.36413,14.33976-26.67024,20.83345-8.93478,6.97911.00182.00751-.00769.00186-32.7657,25.578-5.41664,4.23905-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357L690.656,378.79172,630.59485,367.362a3.59025,3.59025,0,0,0-1.54741.03342,3.66988,3.66988,0,0,0-1.78823,1.03592,4.11057,4.11057,0,0,0-.49291.65091A3.64176,3.64176,0,0,0,626.34909,371.81749Zm89.26313,12.78685,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#fff\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M715.61222,384.60434l27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm81.83767-28.539.26672,1.10181,1.21521-.9448Zm-81.83767,28.539,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357ZM627.7849,369.161l.13589.102c.02275-.03727.06233-.07063.09239-.10968a2.64256,2.64256,0,0,1,2.38507-.76779l59.68567,11.354,25.5283,4.86479,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357L690.656,378.79172,630.59485,367.362a3.59025,3.59025,0,0,0-1.54741.03342Zm-1.43581,2.65652,30.916,127.71019a3.66655,3.66655,0,0,0,4.42206,2.69835l223.76079-54.16788a3.6663,3.6663,0,0,0,2.69835-4.42206l-30.916-127.71018a3.6384,3.6384,0,0,0-2.35767-2.59508,3.59409,3.59409,0,0,0-1.33406-.20075,3.45812,3.45812,0,0,0-1.5141.3983,3.17906,3.17906,0,0,0-.60724.37708l-18.36413,14.33976-26.67024,20.83345-8.93478,6.97911.00182.00751-.00769.00186-32.7657,25.578-5.41664,4.23905-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357L690.656,378.79172,630.59485,367.362a3.59025,3.59025,0,0,0-1.54741.03342,3.66988,3.66988,0,0,0-1.78823,1.03592,4.11057,4.11057,0,0,0-.49291.65091A3.64176,3.64176,0,0,0,626.34909,371.81749Zm1.0196-.24682a2.59762,2.59762,0,0,1,.46152-2.19054.34094.34094,0,0,1,.09058-.11714c.02275-.03727.06233-.07063.09239-.10968a2.64256,2.64256,0,0,1,2.38507-.76779l59.68567,11.354,25.5283,4.86479,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585,4.44395-3.47195,31.54686-24.64821,1.21521-.9448,7.44662-5.81748,26.5182-20.70938,19.17121-14.97157a2.60368,2.60368,0,0,1,.98714-.477,1.99722,1.99722,0,0,1,.30518-.05006,1.61549,1.61549,0,0,1,.27147-.026,2.67893,2.67893,0,0,1,.90068.14691,2.625,2.625,0,0,1,1.68605,1.85318l30.916,127.71019a2.61952,2.61952,0,0,1-1.93138,3.16522L661.4422,501.21416a2.61809,2.61809,0,0,1-3.1575-1.93331Zm88.24353,13.03367,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Zm0,0,27.398,5.21358,8.75042,1.66643a3.68877,3.68877,0,0,0,2.938-.71124l7.02714-5.48585-2.46594.59695-5.20559,4.061a2.63556,2.63556,0,0,1-2.09887.5081l-6.47926-1.23238-27.398-5.21357Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#3f3d56\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M827.1291,422.96742a8.12818,8.12818,0,0,1,5.98077-9.80128l28.24156-6.8367a8.119,8.119,0,0,1,3.82051,15.78205l-28.24156,6.8367A8.12818,8.12818,0,0,1,827.1291,422.96742Z\",\n    transform: \"translate(-311.75036 -203.25)\",\n    fill: \"#673ab7\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 203.27678,\n    cy: 189,\n    r: 7,\n    fill: \"#fff\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMessageEmpty);\nexport default __webpack_public_path__ + \"static/media/message_empty.e64ce71827642b3667c24731d5cfaaa0.svg\";\nexport { ForwardRef as ReactComponent };","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\nimport ReactJson from 'flowise-react-json-view'\n\nconst SourceDocDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const customization = useSelector((state) => state.customization)\n\n    const [data, setData] = useState({})\n\n    useEffect(() => {\n        if (dialogProps.data) setData(dialogProps.data)\n\n        return () => {\n            setData({})\n        }\n    }, [dialogProps])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title ?? 'Source Documents'}\n            </DialogTitle>\n            <DialogContent>\n                <ReactJson\n                    theme={customization.isDarkMode ? 'ocean' : 'rjv-default'}\n                    style={{ padding: 10, borderRadius: 10 }}\n                    src={data}\n                    name={null}\n                    quotesOnKeys={false}\n                    enableClipboard={false}\n                    displayDataTypes={false}\n                />\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nSourceDocDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default SourceDocDialog\n","import client from './client'\n\nconst getInternalChatmessageFromChatflow = (id) => client.get(`/internal-chatmessage/${id}`)\nconst getAllChatmessageFromChatflow = (id, params = {}) => client.get(`/chatmessage/${id}`, { params: { order: 'DESC', ...params } })\nconst getChatmessageFromPK = (id, params = {}) => client.get(`/chatmessage/${id}`, { params: { order: 'ASC', ...params } })\nconst deleteChatmessage = (id, params = {}) => client.delete(`/chatmessage/${id}`, { params: { ...params } })\n\nexport default {\n    getInternalChatmessageFromChatflow,\n    getAllChatmessageFromChatflow,\n    getChatmessageFromPK,\n    deleteChatmessage\n}\n","import { createPortal } from 'react-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useState, useEffect, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport rehypeMathjax from 'rehype-mathjax'\nimport rehypeRaw from 'rehype-raw'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport axios from 'axios'\n\n// material-ui\nimport {\n    Button,\n    Tooltip,\n    ListItemButton,\n    Box,\n    Stack,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    ListItem,\n    ListItemText,\n    Chip\n} from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport DatePicker from 'react-datepicker'\n\nimport robotPNG from 'assets/images/robot.png'\nimport userPNG from 'assets/images/account.png'\nimport msgEmptySVG from 'assets/images/message_empty.svg'\nimport { IconFileExport, IconEraser, IconX, IconDownload } from '@tabler/icons'\n\n// Project import\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\nimport { MultiDropdown } from 'ui-component/dropdown/MultiDropdown'\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\n// store\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\n// API\nimport chatmessageApi from 'api/chatmessage'\nimport useApi from 'hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\n\n// Utils\nimport { isValidURL, removeDuplicateURL } from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\nimport { baseURL } from 'store/constant'\n\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\n\nimport 'views/chatmessage/ChatMessage.css'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst DatePickerCustomInput = forwardRef(function DatePickerCustomInput({ value, onClick }, ref) {\n    return (\n        <ListItemButton style={{ borderRadius: 15, border: '1px solid #e0e0e0' }} onClick={onClick} ref={ref}>\n            {value}\n        </ListItemButton>\n    )\n})\n\nDatePickerCustomInput.propTypes = {\n    value: PropTypes.string,\n    onClick: PropTypes.func\n}\n\nconst ViewMessagesDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n    const { confirm } = useConfirm()\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [chatlogs, setChatLogs] = useState([])\n    const [allChatlogs, setAllChatLogs] = useState([])\n    const [chatMessages, setChatMessages] = useState([])\n    const [selectedMessageIndex, setSelectedMessageIndex] = useState(0)\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\n    const [chatTypeFilter, setChatTypeFilter] = useState([])\n    const [startDate, setStartDate] = useState(new Date().setMonth(new Date().getMonth() - 1))\n    const [endDate, setEndDate] = useState(new Date())\n\n    const getChatmessageApi = useApi(chatmessageApi.getAllChatmessageFromChatflow)\n    const getChatmessageFromPKApi = useApi(chatmessageApi.getChatmessageFromPK)\n\n    const onStartDateSelected = (date) => {\n        setStartDate(date)\n        getChatmessageApi.request(dialogProps.chatflow.id, {\n            startDate: date,\n            endDate: endDate,\n            chatType: chatTypeFilter.length ? chatTypeFilter : undefined\n        })\n    }\n\n    const onEndDateSelected = (date) => {\n        setEndDate(date)\n        getChatmessageApi.request(dialogProps.chatflow.id, {\n            endDate: date,\n            startDate: startDate,\n            chatType: chatTypeFilter.length ? chatTypeFilter : undefined\n        })\n    }\n\n    const onChatTypeSelected = (chatTypes) => {\n        setChatTypeFilter(chatTypes)\n        getChatmessageApi.request(dialogProps.chatflow.id, {\n            chatType: chatTypes.length ? chatTypes : undefined,\n            startDate: startDate,\n            endDate: endDate\n        })\n    }\n\n    const exportMessages = () => {\n        const obj = {}\n        for (let i = 0; i < allChatlogs.length; i += 1) {\n            const chatmsg = allChatlogs[i]\n            const chatPK = getChatPK(chatmsg)\n            const msg = {\n                content: chatmsg.content,\n                role: chatmsg.role === 'apiMessage' ? 'bot' : 'user',\n                time: chatmsg.createdDate\n            }\n            if (chatmsg.sourceDocuments) msg.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)\n            if (chatmsg.usedTools) msg.usedTools = JSON.parse(chatmsg.usedTools)\n            if (chatmsg.fileAnnotations) msg.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)\n\n            if (!Object.prototype.hasOwnProperty.call(obj, chatPK)) {\n                obj[chatPK] = {\n                    id: chatmsg.chatId,\n                    source: chatmsg.chatType === 'INTERNAL' ? 'UI' : 'API/Embed',\n                    sessionId: chatmsg.sessionId ?? null,\n                    memoryType: chatmsg.memoryType ?? null,\n                    messages: [msg]\n                }\n            } else if (Object.prototype.hasOwnProperty.call(obj, chatPK)) {\n                obj[chatPK].messages = [...obj[chatPK].messages, msg]\n            }\n        }\n\n        const exportMessages = []\n        for (const key in obj) {\n            exportMessages.push({\n                ...obj[key]\n            })\n        }\n\n        for (let i = 0; i < exportMessages.length; i += 1) {\n            exportMessages[i].messages = exportMessages[i].messages.reverse()\n        }\n\n        const dataStr = JSON.stringify(exportMessages, null, 2)\n        const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n        const exportFileDefaultName = `${dialogProps.chatflow.id}-Message.json`\n\n        let linkElement = document.createElement('a')\n        linkElement.setAttribute('href', dataUri)\n        linkElement.setAttribute('download', exportFileDefaultName)\n        linkElement.click()\n    }\n\n    const clearChat = async (chatmsg) => {\n        const description =\n            chatmsg.sessionId && chatmsg.memoryType\n                ? `Are you sure you want to clear session id: ${chatmsg.sessionId} from ${chatmsg.memoryType}?`\n                : `Are you sure you want to clear messages?`\n        const confirmPayload = {\n            title: `Clear Session`,\n            description,\n            confirmButtonName: 'Clear',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        const chatflowid = dialogProps.chatflow.id\n        if (isConfirmed) {\n            try {\n                const obj = { chatflowid, isClearFromViewMessageDialog: true }\n                if (chatmsg.chatId) obj.chatId = chatmsg.chatId\n                if (chatmsg.chatType) obj.chatType = chatmsg.chatType\n                if (chatmsg.memoryType) obj.memoryType = chatmsg.memoryType\n                if (chatmsg.sessionId) obj.sessionId = chatmsg.sessionId\n\n                await chatmessageApi.deleteChatmessage(chatflowid, obj)\n                const description =\n                    chatmsg.sessionId && chatmsg.memoryType\n                        ? `Succesfully cleared session id: ${chatmsg.sessionId} from ${chatmsg.memoryType}`\n                        : `Succesfully cleared messages`\n                enqueueSnackbar({\n                    message: description,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                getChatmessageApi.request(chatflowid)\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const getChatMessages = (chatmessages) => {\n        let prevDate = ''\n        const loadedMessages = []\n        for (let i = 0; i < chatmessages.length; i += 1) {\n            const chatmsg = chatmessages[i]\n            if (!prevDate) {\n                prevDate = chatmsg.createdDate.split('T')[0]\n                loadedMessages.push({\n                    message: chatmsg.createdDate,\n                    type: 'timeMessage'\n                })\n            } else {\n                const currentDate = chatmsg.createdDate.split('T')[0]\n                if (currentDate !== prevDate) {\n                    prevDate = currentDate\n                    loadedMessages.push({\n                        message: chatmsg.createdDate,\n                        type: 'timeMessage'\n                    })\n                }\n            }\n            const obj = {\n                ...chatmsg,\n                message: chatmsg.content,\n                type: chatmsg.role\n            }\n            if (chatmsg.sourceDocuments) obj.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)\n            if (chatmsg.usedTools) obj.usedTools = JSON.parse(chatmsg.usedTools)\n            if (chatmsg.fileAnnotations) obj.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)\n\n            loadedMessages.push(obj)\n        }\n        setChatMessages(loadedMessages)\n    }\n\n    const getChatPK = (chatmsg) => {\n        const chatId = chatmsg.chatId\n        const memoryType = chatmsg.memoryType ?? 'null'\n        const sessionId = chatmsg.sessionId ?? 'null'\n        return `${chatId}_${memoryType}_${sessionId}`\n    }\n\n    const transformChatPKToParams = (chatPK) => {\n        let [c1, c2, ...rest] = chatPK.split('_')\n        const chatId = c1\n        const memoryType = c2\n        const sessionId = rest.join('_')\n\n        const params = { chatId }\n        if (memoryType !== 'null') params.memoryType = memoryType\n        if (sessionId !== 'null') params.sessionId = sessionId\n\n        return params\n    }\n\n    const processChatLogs = (allChatMessages) => {\n        const seen = {}\n        const filteredChatLogs = []\n        for (let i = 0; i < allChatMessages.length; i += 1) {\n            const PK = getChatPK(allChatMessages[i])\n\n            const item = allChatMessages[i]\n            if (!Object.prototype.hasOwnProperty.call(seen, PK)) {\n                seen[PK] = {\n                    counter: 1,\n                    item: allChatMessages[i]\n                }\n            } else if (Object.prototype.hasOwnProperty.call(seen, PK) && seen[PK].counter === 1) {\n                seen[PK] = {\n                    counter: 2,\n                    item: {\n                        ...seen[PK].item,\n                        apiContent:\n                            seen[PK].item.role === 'apiMessage' ? `Bot: ${seen[PK].item.content}` : `User: ${seen[PK].item.content}`,\n                        userContent: item.role === 'apiMessage' ? `Bot: ${item.content}` : `User: ${item.content}`\n                    }\n                }\n                filteredChatLogs.push(seen[PK].item)\n            }\n        }\n        setChatLogs(filteredChatLogs)\n        if (filteredChatLogs.length) return getChatPK(filteredChatLogs[0])\n        return undefined\n    }\n\n    const handleItemClick = (idx, chatmsg) => {\n        setSelectedMessageIndex(idx)\n        getChatmessageFromPKApi.request(dialogProps.chatflow.id, transformChatPKToParams(getChatPK(chatmsg)))\n    }\n\n    const onURLClick = (data) => {\n        window.open(data, '_blank')\n    }\n\n    const downloadFile = async (fileAnnotation) => {\n        try {\n            const response = await axios.post(\n                `${baseURL}/api/v1/openai-assistants-file`,\n                { fileName: fileAnnotation.fileName },\n                { responseType: 'blob' }\n            )\n            const blob = new Blob([response.data], { type: response.headers['content-type'] })\n            const downloadUrl = window.URL.createObjectURL(blob)\n            const link = document.createElement('a')\n            link.href = downloadUrl\n            link.download = fileAnnotation.fileName\n            document.body.appendChild(link)\n            link.click()\n            link.remove()\n        } catch (error) {\n            console.error('Download failed:', error)\n        }\n    }\n\n    const onSourceDialogClick = (data, title) => {\n        setSourceDialogProps({ data, title })\n        setSourceDialogOpen(true)\n    }\n\n    useEffect(() => {\n        if (getChatmessageFromPKApi.data) {\n            getChatMessages(getChatmessageFromPKApi.data)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageFromPKApi.data])\n\n    useEffect(() => {\n        if (getChatmessageApi.data) {\n            setAllChatLogs(getChatmessageApi.data)\n            const chatPK = processChatLogs(getChatmessageApi.data)\n            setSelectedMessageIndex(0)\n            if (chatPK) getChatmessageFromPKApi.request(dialogProps.chatflow.id, transformChatPKToParams(chatPK))\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageApi.data])\n\n    useEffect(() => {\n        if (dialogProps.chatflow) {\n            getChatmessageApi.request(dialogProps.chatflow.id)\n        }\n\n        return () => {\n            setChatLogs([])\n            setAllChatLogs([])\n            setChatMessages([])\n            setChatTypeFilter([])\n            setSelectedMessageIndex(0)\n            setStartDate(new Date().setMonth(new Date().getMonth() - 1))\n            setEndDate(new Date())\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth={chatlogs && chatlogs.length == 0 ? 'md' : 'lg'}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }} />\n                    <Button variant='outlined' onClick={() => exportMessages()} startIcon={<IconFileExport />}>\n                        Export\n                    </Button>\n                </div>\n            </DialogTitle>\n            <DialogContent>\n                <>\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', width: '100%', marginBottom: 10 }}>\n                        <div style={{ marginRight: 10 }}>\n                            <b style={{ marginRight: 10 }}>From Date</b>\n                            <DatePicker\n                                selected={startDate}\n                                onChange={(date) => onStartDateSelected(date)}\n                                selectsStart\n                                startDate={startDate}\n                                endDate={endDate}\n                                customInput={<DatePickerCustomInput />}\n                            />\n                        </div>\n                        <div style={{ marginRight: 10 }}>\n                            <b style={{ marginRight: 10 }}>To Date</b>\n                            <DatePicker\n                                selected={endDate}\n                                onChange={(date) => onEndDateSelected(date)}\n                                selectsEnd\n                                startDate={startDate}\n                                endDate={endDate}\n                                minDate={startDate}\n                                maxDate={new Date()}\n                                customInput={<DatePickerCustomInput />}\n                            />\n                        </div>\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', minWidth: '200px', marginRight: 10 }}>\n                            <b style={{ marginRight: 10 }}>Source</b>\n                            <MultiDropdown\n                                key={JSON.stringify(chatTypeFilter)}\n                                name='chatType'\n                                options={[\n                                    {\n                                        label: 'UI',\n                                        name: 'INTERNAL'\n                                    },\n                                    {\n                                        label: 'API/Embed',\n                                        name: 'EXTERNAL'\n                                    }\n                                ]}\n                                onSelect={(newValue) => onChatTypeSelected(newValue)}\n                                value={chatTypeFilter}\n                                formControlSx={{ mt: 0 }}\n                            />\n                        </div>\n                        <div style={{ flex: 1 }}></div>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {chatlogs && chatlogs.length == 0 && (\n                            <Stack sx={{ alignItems: 'center', justifyContent: 'center', width: '100%' }} flexDirection='column'>\n                                <Box sx={{ p: 5, height: 'auto' }}>\n                                    <img\n                                        style={{ objectFit: 'cover', height: '20vh', width: 'auto' }}\n                                        src={msgEmptySVG}\n                                        alt='msgEmptySVG'\n                                    />\n                                </Box>\n                                <div>No Messages</div>\n                            </Stack>\n                        )}\n                        {chatlogs && chatlogs.length > 0 && (\n                            <div style={{ flexBasis: '40%' }}>\n                                <Box\n                                    sx={{\n                                        overflowY: 'auto',\n                                        display: 'flex',\n                                        flexGrow: 1,\n                                        flexDirection: 'column',\n                                        maxHeight: 'calc(100vh - 260px)'\n                                    }}\n                                >\n                                    {chatlogs.map((chatmsg, index) => (\n                                        <ListItemButton\n                                            key={index}\n                                            sx={{\n                                                p: 0,\n                                                borderRadius: `${customization.borderRadius}px`,\n                                                boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n                                                mt: 1,\n                                                ml: 1,\n                                                mr: 1,\n                                                mb: index === chatlogs.length - 1 ? 1 : 0,\n                                                '&.Mui-selected span': {\n                                                    color: customization.isDarkMode ? '#FFF860 !important' : '#fff !important',\n                                                    '&:hover span': {\n                                                        color: customization.isDarkMode ? '#FFF860 !important' : '#fff !important',\n                                                    },\n                                                },\n                                                '&.Mui-selected p': {\n                                                    color: customization.isDarkMode ? '#fff !important' : '#d9d1d1 !important',\n                                                    '&:hover p': {\n                                                        color: customization.isDarkMode ? '#fff !important' : '#d9d1d1 !important',\n                                                    },\n                                                },\n                                                '&:hover span': {\n                                                    color: customization.isDarkMode ? '#FFF860 !important' : '#fff !important',\n                                                },\n                                                '&:hover p': {\n                                                    color: customization.isDarkMode ? '#fff !important' : '#d9d1d1 !important',\n                                                },\n                                            }}\n                                            selected={selectedMessageIndex === index}\n                                            onClick={() => handleItemClick(index, chatmsg)}\n                                        >\n                                            <ListItem alignItems='center'>\n                                                <ListItemText\n                                                    primary={\n                                                        <div style={{ display: 'flex', flexDirection: 'column', marginBottom: 10 }}>\n                                                            <span\n                                                                style={{\n                                                                    color: customization.isDarkMode ? '#FFF860' : '#121D35'\n                                                                }}\n                                                            >\n                                                                {chatmsg?.userContent}\n                                                            </span>\n                                                            <div\n                                                                style={{\n                                                                    maxHeight: '100px',\n                                                                    maxWidth: '400px',\n                                                                    whiteSpace: 'nowrap',\n                                                                    overflow: 'hidden',\n                                                                    textOverflow: 'ellipsis'\n                                                                }}\n                                                            >\n                                                                {chatmsg?.apiContent}\n                                                            </div>\n                                                        </div>\n                                                    }\n                                                    secondary={moment(chatmsg.createdDate).format('MMMM Do YYYY, h:mm:ss a')}\n                                                />\n                                            </ListItem>\n                                        </ListItemButton>\n                                    ))}\n                                </Box>\n                            </div>\n                        )}\n                        {chatlogs && chatlogs.length > 0 && (\n                            <div style={{ flexBasis: '60%', paddingRight: '30px' }}>\n                                {chatMessages && chatMessages.length > 1 && (\n                                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                        <div style={{ flex: 1, marginLeft: '20px', marginBottom: '15px', marginTop: '10px' }}>\n                                            {chatMessages[1].sessionId && (\n                                                <div>\n                                                    Session Id:&nbsp;<b>{chatMessages[1].sessionId}</b>\n                                                </div>\n                                            )}\n                                            {chatMessages[1].chatType && (\n                                                <div>\n                                                    Source:&nbsp;<b>{chatMessages[1].chatType === 'INTERNAL' ? 'UI' : 'API/Embed'}</b>\n                                                </div>\n                                            )}\n                                            {chatMessages[1].memoryType && (\n                                                <div>\n                                                    Memory:&nbsp;<b>{chatMessages[1].memoryType}</b>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignContent: 'center',\n                                                alignItems: 'end'\n                                            }}\n                                        >\n                                            <StyledButton\n                                                sx={{ height: 'max-content', width: 'max-content' }}\n                                                variant='outlined'\n                                                color='error'\n                                                title='Clear Message'\n                                                onClick={() => clearChat(chatMessages[1])}\n                                                startIcon={<IconEraser />}\n                                            >\n                                                Clear\n                                            </StyledButton>\n                                            {chatMessages[1].sessionId && (\n                                                <Tooltip\n                                                    title={\n                                                        'At your left 👈 you will see the Memory node that was used in this conversation. You need to have the matching Memory node with same parameters in the canvas, in order to delete the session conversations stored on the Memory node'\n                                                    }\n                                                    placement='bottom'\n                                                >\n                                                    <h5 style={{ cursor: 'pointer', color: theme.palette.primary.main }}>\n                                                        Why my session is not deleted?\n                                                    </h5>\n                                                </Tooltip>\n                                            )}\n                                        </div>\n                                    </div>\n                                )}\n                                <div\n                                    style={{\n                                        marginLeft: '20px',\n                                        border: '1px solid #e0e0e0',\n                                        borderRadius: `${customization.borderRadius}px`\n                                    }}\n                                    className='cloud-message'\n                                >\n                                    <div style={{ width: '100%', height: '100%' }}>\n                                        {chatMessages &&\n                                            chatMessages.map((message, index) => {\n                                                if (message.type === 'apiMessage' || message.type === 'userMessage') {\n                                                    return (\n                                                        <Box\n                                                            sx={{\n                                                                background:\n                                                                    message.type === 'apiMessage' ? theme.palette.asyncSelect.main : '',\n                                                                pl: 1,\n                                                                pr: 1\n                                                            }}\n                                                            key={index}\n                                                            style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}\n                                                        >\n                                                            {/* Display the correct icon depending on the message type */}\n                                                            {message.type === 'apiMessage' ? (\n                                                                <img\n                                                                    style={{ marginLeft: '10px' }}\n                                                                    src={robotPNG}\n                                                                    alt='AI'\n                                                                    width='25'\n                                                                    height='25'\n                                                                    className='boticon'\n                                                                />\n                                                            ) : (\n                                                                <img\n                                                                    style={{ marginLeft: '10px' }}\n                                                                    src={userPNG}\n                                                                    alt='Me'\n                                                                    width='25'\n                                                                    height='25'\n                                                                    className='usericon'\n                                                                />\n                                                            )}\n                                                            <div\n                                                                style={{\n                                                                    display: 'flex',\n                                                                    flexDirection: 'column',\n                                                                    width: '100%'\n                                                                }}\n                                                            >\n                                                                {message.usedTools && (\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                                        {message.usedTools.map((tool, index) => {\n                                                                            return (\n                                                                                <Chip\n                                                                                    size='small'\n                                                                                    key={index}\n                                                                                    label={tool.tool}\n                                                                                    component='a'\n                                                                                    sx={{ mr: 1, mt: 1 }}\n                                                                                    variant='outlined'\n                                                                                    clickable\n                                                                                    onClick={() => onSourceDialogClick(tool, 'Used Tools')}\n                                                                                />\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                )}\n                                                                <div className='markdownanswer'>\n                                                                    {/* Messages are being rendered in Markdown format */}\n                                                                    <MemoizedReactMarkdown\n                                                                        remarkPlugins={[remarkGfm, remarkMath]}\n                                                                        rehypePlugins={[rehypeMathjax, rehypeRaw]}\n                                                                        components={{\n                                                                            code({ inline, className, children, ...props }) {\n                                                                                const match = /language-(\\w+)/.exec(className || '')\n                                                                                return !inline ? (\n                                                                                    <CodeBlock\n                                                                                        key={Math.random()}\n                                                                                        chatflowid={dialogProps.chatflow.id}\n                                                                                        isDialog={true}\n                                                                                        language={(match && match[1]) || ''}\n                                                                                        value={String(children).replace(/\\n$/, '')}\n                                                                                        {...props}\n                                                                                    />\n                                                                                ) : (\n                                                                                    <code className={className} {...props}>\n                                                                                        {children}\n                                                                                    </code>\n                                                                                )\n                                                                            }\n                                                                        }}\n                                                                    >\n                                                                        {message.message}\n                                                                    </MemoizedReactMarkdown>\n                                                                </div>\n                                                                {message.fileAnnotations && (\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                                        {message.fileAnnotations.map((fileAnnotation, index) => {\n                                                                            return (\n                                                                                <Button\n                                                                                    sx={{\n                                                                                        fontSize: '0.85rem',\n                                                                                        textTransform: 'none',\n                                                                                        mb: 1,\n                                                                                        mr: 1\n                                                                                    }}\n                                                                                    key={index}\n                                                                                    variant='outlined'\n                                                                                    onClick={() => downloadFile(fileAnnotation)}\n                                                                                    endIcon={\n                                                                                        <IconDownload color={theme.palette.primary.main} />\n                                                                                    }\n                                                                                >\n                                                                                    {fileAnnotation.fileName}\n                                                                                </Button>\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                )}\n                                                                {message.sourceDocuments && (\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                                        {removeDuplicateURL(message).map((source, index) => {\n                                                                            const URL =\n                                                                                source.metadata && source.metadata.source\n                                                                                    ? isValidURL(source.metadata.source)\n                                                                                    : undefined\n                                                                            return (\n                                                                                <Chip\n                                                                                    size='small'\n                                                                                    key={index}\n                                                                                    label={\n                                                                                        URL\n                                                                                            ? URL.pathname.substring(0, 15) === '/'\n                                                                                                ? URL.host\n                                                                                                : `${URL.pathname.substring(0, 15)}...`\n                                                                                            : `${source.pageContent.substring(0, 15)}...`\n                                                                                    }\n                                                                                    component='a'\n                                                                                    sx={{ mr: 1, mb: 1 }}\n                                                                                    variant='outlined'\n                                                                                    clickable\n                                                                                    onClick={() =>\n                                                                                        URL\n                                                                                            ? onURLClick(source.metadata.source)\n                                                                                            : onSourceDialogClick(source)\n                                                                                    }\n                                                                                />\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                )}\n                                                            </div>\n                                                        </Box>\n                                                    )\n                                                } else {\n                                                    return (\n                                                        <Box\n                                                            sx={{\n                                                                background: theme.palette.timeMessage.main,\n                                                                p: 2\n                                                            }}\n                                                            key={index}\n                                                            style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}\n                                                        >\n                                                            {moment(message.message).format('MMMM Do YYYY, h:mm:ss a')}\n                                                        </Box>\n                                                    )\n                                                }\n                                            })}\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\n                </>\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nViewMessagesDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default ViewMessagesDialog\n","import PropTypes from \"prop-types\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// material-ui\nimport { useTheme } from \"@mui/material/styles\";\nimport {\n  Avatar,\n  Box,\n  ButtonBase,\n  Typography,\n  Stack,\n  TextField,\n} from \"@mui/material\";\n\n// icons\nimport {\n  IconSettings,\n  IconChevronLeft,\n  IconDeviceFloppy,\n  IconPencil,\n  IconCheck,\n  IconX,\n  IconCode,\n} from \"@tabler/icons\";\n\n// project imports\nimport Settings from \"views/settings\";\nimport SaveChatflowDialog from \"ui-component/dialog/SaveChatflowDialog\";\nimport APICodeDialog from \"views/chatflows/APICodeDialog\";\nimport AnalyseFlowDialog from \"ui-component/dialog/AnalyseFlowDialog\";\nimport ViewMessagesDialog from \"ui-component/dialog/ViewMessagesDialog\";\nimport StarterPromptsDialog from \"ui-component/dialog/StarterPromptsDialog\";\n\n// API\nimport chatflowsApi from \"api/chatflows\";\n\n// Hooks\nimport useApi from \"hooks/useApi\";\n\n// utils\nimport { generateExportFlowData } from \"utils/genericHelper\";\nimport { uiBaseURL } from \"store/constant\";\nimport { SET_CHATFLOW } from \"store/actions\";\n\n// ==============================|| CANVAS HEADER ||============================== //\n\nconst CanvasHeader = ({\n  chatflow,\n  handleSaveFlow,\n  handleDeleteFlow,\n  handleLoadFlow,\n}) => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const flowNameRef = useRef();\n  const settingsRef = useRef();\n\n  const [isEditingFlowName, setEditingFlowName] = useState(null);\n  const [flowName, setFlowName] = useState(\"\");\n  const [isSettingsOpen, setSettingsOpen] = useState(false);\n  const [flowDialogOpen, setFlowDialogOpen] = useState(false);\n  const [apiDialogOpen, setAPIDialogOpen] = useState(false);\n  const [apiDialogProps, setAPIDialogProps] = useState({});\n  const [analyseDialogOpen, setAnalyseDialogOpen] = useState(false);\n  const [analyseDialogProps, setAnalyseDialogProps] = useState({});\n  const [conversationStartersDialogOpen, setConversationStartersDialogOpen] =\n    useState(false);\n  const [conversationStartersDialogProps, setConversationStartersDialogProps] =\n    useState({});\n  const [viewMessagesDialogOpen, setViewMessagesDialogOpen] = useState(false);\n  const [viewMessagesDialogProps, setViewMessagesDialogProps] = useState({});\n\n  const updateChatflowApi = useApi(chatflowsApi.updateChatflow);\n  const canvas = useSelector((state) => state.canvas);\n\n  const onSettingsItemClick = (setting) => {\n    setSettingsOpen(false);\n\n    if (setting === \"deleteChatflow\") {\n      handleDeleteFlow();\n    } else if (setting === \"conversationStarters\") {\n      setConversationStartersDialogProps({\n        title: \"Starter Prompts - \" + chatflow.name,\n        chatflow: chatflow,\n      });\n      setConversationStartersDialogOpen(true);\n    } else if (setting === \"analyseChatflow\") {\n      setAnalyseDialogProps({\n        title: \"Analyse Chatflow\",\n        chatflow: chatflow,\n      });\n      setAnalyseDialogOpen(true);\n    } else if (setting === \"viewMessages\") {\n      setViewMessagesDialogProps({\n        title: \"View Messages\",\n        chatflow: chatflow,\n      });\n      setViewMessagesDialogOpen(true);\n    } else if (setting === \"duplicateChatflow\") {\n      try {\n        localStorage.setItem(\"duplicatedFlowData\", chatflow.flowData);\n        window.open(`${uiBaseURL}/canvas`, \"_blank\");\n      } catch (e) {\n        console.error(e);\n      }\n    } else if (setting === \"exportChatflow\") {\n      try {\n        const flowData = JSON.parse(chatflow.flowData);\n        let dataStr = JSON.stringify(generateExportFlowData(flowData), null, 2);\n        let dataUri =\n          \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n\n        let exportFileDefaultName = `${chatflow.name} Chatflow.json`;\n\n        let linkElement = document.createElement(\"a\");\n        linkElement.setAttribute(\"href\", dataUri);\n        linkElement.setAttribute(\"download\", exportFileDefaultName);\n        linkElement.click();\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n\n  const onUploadFile = (file) => {\n    setSettingsOpen(false);\n    handleLoadFlow(file);\n  };\n\n  const submitFlowName = () => {\n    if (chatflow.id) {\n      const updateBody = {\n        name: flowNameRef.current.value,\n      };\n      updateChatflowApi.request(chatflow.id, updateBody);\n    }\n  };\n\n  const onAPIDialogClick = () => {\n    // If file type is file, isFormDataRequired = true\n    let isFormDataRequired = false;\n    try {\n      const flowData = JSON.parse(chatflow.flowData);\n      const nodes = flowData.nodes;\n      for (const node of nodes) {\n        if (node.data.inputParams.find((param) => param.type === \"file\")) {\n          isFormDataRequired = true;\n          break;\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    // If sessionId memory, isSessionMemory = true\n    let isSessionMemory = false;\n    try {\n      const flowData = JSON.parse(chatflow.flowData);\n      const nodes = flowData.nodes;\n      for (const node of nodes) {\n        if (node.data.inputParams.find((param) => param.name === \"sessionId\")) {\n          isSessionMemory = true;\n          break;\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    setAPIDialogProps({\n      title: \"Embed in website or use as API\",\n      chatflowid: chatflow.id,\n      chatflowApiKeyId: chatflow.apikeyid,\n      isFormDataRequired,\n      isSessionMemory,\n    });\n    setAPIDialogOpen(true);\n  };\n\n  const onSaveChatflowClick = () => {\n    if (chatflow.id) handleSaveFlow(flowName);\n    else setFlowDialogOpen(true);\n  };\n\n  const onConfirmSaveName = (flowName) => {\n    setFlowDialogOpen(false);\n    handleSaveFlow(flowName);\n  };\n\n  useEffect(() => {\n    if (updateChatflowApi.data) {\n      setFlowName(updateChatflowApi.data.name);\n      dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data });\n    }\n    setEditingFlowName(false);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updateChatflowApi.data]);\n\n  useEffect(() => {\n    if (chatflow) {\n      setFlowName(chatflow.name);\n    }\n  }, [chatflow]);\n\n  return (\n    <>\n      <Box>\n        <ButtonBase title=\"Back\" sx={{ borderRadius: \"50%\" }}>\n          <Avatar\n            variant=\"square\"\n            // variant='rounded'\n            sx={{\n              ...theme.typography.commonAvatar,\n              ...theme.typography.mediumAvatar,\n              transition: \"all .2s ease-in-out\",\n              // background: theme.palette.secondary.light,\n              // color: theme.palette.secondary.dark,\n              background: \"#E19379\",\n              color: \"#ffffff\",\n              \"&:hover\": {\n                // background: theme.palette.secondary.dark,\n                // color: theme.palette.secondary.light\n                background: \"#df6a43\",\n                color: \"#ffffff\",\n              },\n            }}\n            color=\"inherit\"\n            onClick={() =>\n              window.history.state && window.history.state.idx > 0\n                ? navigate(-1)\n                : navigate(\"/\", { replace: true })\n            }\n          >\n            <IconChevronLeft stroke={1.5} size=\"1.3rem\" />\n          </Avatar>\n        </ButtonBase>\n      </Box>\n      <Box sx={{ flexGrow: 1 }}>\n        {!isEditingFlowName && (\n          <Stack flexDirection=\"row\">\n            <Typography\n              sx={{\n                fontSize: \"1.5rem\",\n                fontWeight: 600,\n                ml: 2,\n              }}\n            >\n              {canvas.isDirty && (\n                <strong style={{ color: theme.palette.orange.main }}>*</strong>\n              )}{\" \"}\n              {flowName}\n            </Typography>\n            {chatflow?.id && (\n              <ButtonBase title=\"Edit Name\" sx={{ borderRadius: \"50%\" }}>\n                <Avatar\n            variant=\"square\"\n            // variant=\"rounded\"\n                  sx={{\n                    ...theme.typography.commonAvatar,\n                    ...theme.typography.mediumAvatar,\n                    transition: \"all .2s ease-in-out\",\n                    ml: 1,\n                    // background: theme.palette.secondary.light,\n                    // color: theme.palette.secondary.dark,\n              background: \"#E19379\",\n              color: \"#ffffff\",\n                    \"&:hover\": {\n                      background: theme.palette.secondary.dark,\n                      color: theme.palette.secondary.light,\n                    },\n                  }}\n                  color=\"inherit\"\n                  onClick={() => setEditingFlowName(true)}\n                >\n                  <IconPencil stroke={1.5} size=\"1.3rem\" />\n                </Avatar>\n              </ButtonBase>\n            )}\n          </Stack>\n        )}\n        {isEditingFlowName && (\n          <Stack flexDirection=\"row\">\n            <TextField\n              size=\"small\"\n              inputRef={flowNameRef}\n              sx={{\n                width: \"50%\",\n                ml: 2,\n              }}\n              defaultValue={flowName}\n            />\n            <ButtonBase title=\"Save Name\" sx={{ borderRadius: \"50%\" }}>\n              <Avatar\n                variant=\"square\"\n                // variant=\"rounded\"\n                sx={{\n                  ...theme.typography.commonAvatar,\n                  ...theme.typography.mediumAvatar,\n                  transition: \"all .2s ease-in-out\",\n                  //   background: theme.palette.success.light,\n                  //   color: theme.palette.success.dark,\n                  background: \"#469DBB\",\n                  color: \"#fff\",\n                  ml: 1,\n                  \"&:hover\": {\n                    // background: theme.palette.success.dark,\n                    // color: theme.palette.success.light,\n                    backgroundColor: \"#2398c1\",\n                    color: \"#fff\",\n                  },\n                }}\n                color=\"inherit\"\n                onClick={submitFlowName}\n              >\n                <IconCheck stroke={1.5} size=\"1.3rem\" />\n              </Avatar>\n            </ButtonBase>\n            <ButtonBase title=\"Cancel\" sx={{ borderRadius: \"50%\" }}>\n              <Avatar\n            variant=\"square\"\n            // variant=\"rounded\"\n                sx={{\n                  ...theme.typography.commonAvatar,\n                  ...theme.typography.mediumAvatar,\n                  transition: \"all .2s ease-in-out\",\n                  background: theme.palette.error.light,\n                  // color: theme.palette.error.dark,\n                  ml: 1,\n                  \"&:hover\": {\n                    background: theme.palette.error.dark,\n                    // color: theme.palette.error.light,\n                  },\n                }}\n                color=\"inherit\"\n                onClick={() => setEditingFlowName(false)}\n              >\n                <IconX stroke={1.5} size=\"1.3rem\" />\n              </Avatar>\n            </ButtonBase>\n          </Stack>\n        )}\n      </Box>\n      <Box>\n        {chatflow?.id && (\n          <ButtonBase title=\"API Endpoint\" sx={{ borderRadius: \"50%\", mr: 2 }}>\n            <Avatar\n            variant=\"square\"\n            // variant=\"rounded\"\n              sx={{\n                ...theme.typography.commonAvatar,\n                ...theme.typography.mediumAvatar,\n                transition: \"all .2s ease-in-out\",\n                background: theme.palette.canvasHeader.deployLight,\n                color: theme.palette.canvasHeader.deployDark,\n                \"&:hover\": {\n                  background: theme.palette.canvasHeader.deployDark,\n                  color: theme.palette.canvasHeader.deployLight,\n                },\n              }}\n              color=\"inherit\"\n              onClick={onAPIDialogClick}\n            >\n              <IconCode stroke={1.5} size=\"1.3rem\" />\n            </Avatar>\n          </ButtonBase>\n        )}\n        <ButtonBase title=\"Save Chatflow\" sx={{ borderRadius: \"50%\", mr: 2 }}>\n          <Avatar\n            variant=\"square\"\n            // variant=\"rounded\"\n            sx={{\n              ...theme.typography.commonAvatar,\n              ...theme.typography.mediumAvatar,\n              transition: \"all .2s ease-in-out\",\n              //   background: theme.palette.canvasHeader.saveLight,\n              //   color: theme.palette.canvasHeader.saveDark,\n              background: \"#9D4B8E\",\n              color: \"#fff\",\n              \"&:hover\": {\n                // background: theme.palette.canvasHeader.saveDark,\n                // color: theme.palette.canvasHeader.saveLight,\n                backgroundColor: \"#83076c\",\n                color: \"#fff\",\n              },\n            }}\n            color=\"inherit\"\n            onClick={onSaveChatflowClick}\n          >\n            <IconDeviceFloppy stroke={1.5} size=\"1.3rem\" />\n          </Avatar>\n        </ButtonBase>\n        <ButtonBase\n          ref={settingsRef}\n          title=\"Settings\"\n          sx={{ borderRadius: \"50%\" }}\n        >\n          <Avatar\n            variant=\"square\"\n            // variant=\"rounded\"\n            sx={{\n              ...theme.typography.commonAvatar,\n              ...theme.typography.mediumAvatar,\n              transition: \"all .2s ease-in-out\",\n              //   background: theme.palette.canvasHeader.settingsLight,\n              //   color: theme.palette.canvasHeader.settingsDark,\n              background: \"#E19379\",\n              color: \"#ffffff\",\n              \"&:hover\": {\n                // background: theme.palette.canvasHeader.settingsDark,\n                // color: theme.palette.canvasHeader.settingsLight,\n                background: \"#df6a43\",\n                color: \"#ffffff\",\n              },\n            }}\n            onClick={() => setSettingsOpen(!isSettingsOpen)}\n          >\n            <IconSettings stroke={1.5} size=\"1.3rem\" />\n          </Avatar>\n        </ButtonBase>\n      </Box>\n      <Settings\n        chatflow={chatflow}\n        isSettingsOpen={isSettingsOpen}\n        anchorEl={settingsRef.current}\n        onClose={() => setSettingsOpen(false)}\n        onSettingsItemClick={onSettingsItemClick}\n        onUploadFile={onUploadFile}\n      />\n      <SaveChatflowDialog\n        show={flowDialogOpen}\n        dialogProps={{\n          title: `Save New Chatflow`,\n          confirmButtonName: \"Save\",\n          cancelButtonName: \"Cancel\",\n        }}\n        onCancel={() => setFlowDialogOpen(false)}\n        onConfirm={onConfirmSaveName}\n      />\n      <APICodeDialog\n        show={apiDialogOpen}\n        dialogProps={apiDialogProps}\n        onCancel={() => setAPIDialogOpen(false)}\n      />\n      <AnalyseFlowDialog\n        show={analyseDialogOpen}\n        dialogProps={analyseDialogProps}\n        onCancel={() => setAnalyseDialogOpen(false)}\n      />\n      <StarterPromptsDialog\n        show={conversationStartersDialogOpen}\n        dialogProps={conversationStartersDialogProps}\n        onConfirm={() => setConversationStartersDialogOpen(false)}\n        onCancel={() => setConversationStartersDialogOpen(false)}\n      />\n      <ViewMessagesDialog\n        show={viewMessagesDialogOpen}\n        dialogProps={viewMessagesDialogProps}\n        onCancel={() => setViewMessagesDialogOpen(false)}\n      />\n    </>\n  );\n};\n\nCanvasHeader.propTypes = {\n  chatflow: PropTypes.object,\n  handleSaveFlow: PropTypes.func,\n  handleDeleteFlow: PropTypes.func,\n  handleLoadFlow: PropTypes.func,\n};\n\nexport default CanvasHeader;\n","import { styled } from \"@mui/material/styles\";\nimport { Fab } from \"@mui/material\";\n\nexport const StyledFab = styled(Fab)(({ theme, color = \"primary\" }) => ({\n  // color: 'white',\n  // backgroundColor: theme.palette[color].main,\n  background: \"#469DBB\",\n  color: \"#fff\",\n  borderRadius: 0,\n  variant: \"extended\",\n  \"&:hover\": {\n    // backgroundColor: theme.palette[color].main,\n    backgroundColor: \"#2398c1\",\n    color: \"#fff\",\n    backgroundImage: `linear-gradient(rgb(0 0 0/10%) 0 0)`,\n  },\n}));\n","import { useState, useRef, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { useTheme } from '@mui/material/styles'\nimport {\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Box,\n    ClickAwayListener,\n    Divider,\n    InputAdornment,\n    List,\n    ListItemButton,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    OutlinedInput,\n    Paper,\n    Popper,\n    Stack,\n    Typography,\n    Chip\n} from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// third-party\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport { StyledFab } from 'ui-component/button/StyledFab'\n\n// icons\nimport { IconPlus, IconSearch, IconMinus, IconX } from '@tabler/icons'\n\n// const\nimport { baseURL } from 'store/constant'\nimport { SET_COMPONENT_NODES } from 'store/actions'\n\n// ==============================|| ADD NODES||============================== //\n\nconst AddNodes = ({ nodesData, node }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n    const dispatch = useDispatch()\n\n    const [searchValue, setSearchValue] = useState('')\n    const [nodes, setNodes] = useState({})\n    const [open, setOpen] = useState(false)\n    const [categoryExpanded, setCategoryExpanded] = useState({})\n\n    const anchorRef = useRef(null)\n    const prevOpen = useRef(open)\n    const ps = useRef()\n\n    // Temporary method to handle Deprecating Vector Store and New ones\n    const categorizeVectorStores = (nodes, accordianCategories, isFilter) => {\n        const obj = { ...nodes }\n        const vsNodes = obj['Vector Stores'] ?? []\n        const deprecatingNodes = []\n        const newNodes = []\n        for (const vsNode of vsNodes) {\n            if (vsNode.badge === 'DEPRECATING') deprecatingNodes.push(vsNode)\n            else newNodes.push(vsNode)\n        }\n        delete obj['Vector Stores']\n        if (deprecatingNodes.length) {\n            obj['Vector Stores;DEPRECATING'] = deprecatingNodes\n            accordianCategories['Vector Stores;DEPRECATING'] = isFilter ? true : false\n        }\n        if (newNodes.length) {\n            obj['Vector Stores;NEW'] = newNodes\n            accordianCategories['Vector Stores;NEW'] = isFilter ? true : false\n        }\n        setNodes(obj)\n    }\n\n    const scrollTop = () => {\n        const curr = ps.current\n        if (curr) {\n            curr.scrollTop = 0\n        }\n    }\n\n    const getSearchedNodes = (value) => {\n        const passed = nodesData.filter((nd) => {\n            const passesQuery = nd.name.toLowerCase().includes(value.toLowerCase())\n            const passesCategory = nd.category.toLowerCase().includes(value.toLowerCase())\n            return passesQuery || passesCategory\n        })\n        return passed\n    }\n\n    const filterSearch = (value) => {\n        setSearchValue(value)\n        setTimeout(() => {\n            if (value) {\n                const returnData = getSearchedNodes(value)\n                groupByCategory(returnData, true)\n                scrollTop()\n            } else if (value === '') {\n                groupByCategory(nodesData)\n                scrollTop()\n            }\n        }, 500)\n    }\n\n    const groupByCategory = (nodes, isFilter) => {\n        const accordianCategories = {}\n        const result = nodes.reduce(function (r, a) {\n            r[a.category] = r[a.category] || []\n            r[a.category].push(a)\n            accordianCategories[a.category] = isFilter ? true : false\n            return r\n        }, Object.create(null))\n        setNodes(result)\n        categorizeVectorStores(result, accordianCategories, isFilter)\n        setCategoryExpanded(accordianCategories)\n    }\n\n    const handleAccordionChange = (category) => (event, isExpanded) => {\n        const accordianCategories = { ...categoryExpanded }\n        accordianCategories[category] = isExpanded\n        setCategoryExpanded(accordianCategories)\n    }\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return\n        }\n        setOpen(false)\n    }\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen)\n    }\n\n    const onDragStart = (event, node) => {\n        event.dataTransfer.setData('application/reactflow', JSON.stringify(node))\n        event.dataTransfer.effectAllowed = 'move'\n    }\n\n    useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus()\n        }\n\n        prevOpen.current = open\n    }, [open])\n\n    useEffect(() => {\n        if (node) setOpen(false)\n    }, [node])\n\n    useEffect(() => {\n        if (nodesData) {\n            groupByCategory(nodesData)\n            dispatch({ type: SET_COMPONENT_NODES, componentNodes: nodesData })\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [nodesData, dispatch])\n\n    return (\n        <>\n            <StyledFab\n                sx={{ left: 20, top: 20 }}\n                ref={anchorRef}\n                size='small'\n                // color='primary'\n                // variant='extended'\n                aria-label='add'\n                title='Add Node'\n                onClick={handleToggle}\n            >\n                {open ? <IconMinus /> : <IconPlus />}\n            </StyledFab>\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [-40, 14]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <Box sx={{ p: 2 }}>\n                                        <Stack>\n                                            <Typography variant='h4'>Add Nodes</Typography>\n                                        </Stack>\n                                        <OutlinedInput\n                                            sx={{ width: '100%', pr: 2, pl: 2, my: 2 }}\n                                            id='input-search-node'\n                                            value={searchValue}\n                                            onChange={(e) => filterSearch(e.target.value)}\n                                            placeholder='Search nodes'\n                                            startAdornment={\n                                                <InputAdornment position='start'>\n                                                    <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\n                                                </InputAdornment>\n                                            }\n                                            endAdornment={\n                                                <InputAdornment\n                                                    position='end'\n                                                    sx={{\n                                                        cursor: 'pointer',\n                                                        color: theme.palette.grey[500],\n                                                        '&:hover': {\n                                                            color: theme.palette.grey[900]\n                                                        }\n                                                    }}\n                                                    title='Clear Search'\n                                                >\n                                                    <IconX\n                                                        stroke={1.5}\n                                                        size='1rem'\n                                                        onClick={() => filterSearch('')}\n                                                        style={{\n                                                            cursor: 'pointer'\n                                                        }}\n                                                    />\n                                                </InputAdornment>\n                                            }\n                                            aria-describedby='search-helper-text'\n                                            inputProps={{\n                                                'aria-label': 'weight'\n                                            }}\n                                        />\n                                        <Divider />\n                                    </Box>\n                                    <PerfectScrollbar\n                                        containerRef={(el) => {\n                                            ps.current = el\n                                        }}\n                                        style={{ height: '100%', maxHeight: 'calc(100vh - 320px)', overflowX: 'hidden' }}\n                                    >\n                                        <Box sx={{ p: 2 }}>\n                                            <List\n                                                sx={{\n                                                    width: '100%',\n                                                    maxWidth: 370,\n                                                    py: 0,\n                                                    borderRadius: '10px',\n                                                    [theme.breakpoints.down('md')]: {\n                                                        maxWidth: 370\n                                                    },\n                                                    '& .MuiListItemSecondaryAction-root': {\n                                                        top: 22\n                                                    },\n                                                    '& .MuiDivider-root': {\n                                                        my: 0\n                                                    },\n                                                    '& .list-container': {\n                                                        pl: 7\n                                                    }\n                                                }}\n                                            >\n                                                {Object.keys(nodes)\n                                                    .sort()\n                                                    .map((category) =>\n                                                        category === 'Vector Stores' ? (\n                                                            <></>\n                                                        ) : (\n                                                            <Accordion\n                                                                expanded={categoryExpanded[category] || false}\n                                                                onChange={handleAccordionChange(category)}\n                                                                key={category}\n                                                                disableGutters\n                                                            >\n                                                                <AccordionSummary\n                                                                    expandIcon={<ExpandMoreIcon />}\n                                                                    aria-controls={`nodes-accordian-${category}`}\n                                                                    id={`nodes-accordian-header-${category}`}\n                                                                >\n                                                                    {category.split(';').length > 1 ? (\n                                                                        <div\n                                                                            style={{\n                                                                                display: 'flex',\n                                                                                flexDirection: 'row',\n                                                                                alignItems: 'center'\n                                                                            }}\n                                                                        >\n                                                                            <Typography variant='h5'>{category.split(';')[0]}</Typography>\n                                                                            &nbsp;\n                                                                            <Chip\n                                                                                sx={{\n                                                                                    width: 'max-content',\n                                                                                    fontWeight: 700,\n                                                                                    fontSize: '0.65rem',\n                                                                                    background:\n                                                                                        category.split(';')[1] === 'DEPRECATING'\n                                                                                            ? theme.palette.warning.main\n                                                                                            : theme.palette.teal.main,\n                                                                                    color:\n                                                                                        category.split(';')[1] !== 'DEPRECATING'\n                                                                                            ? 'white'\n                                                                                            : 'inherit'\n                                                                                }}\n                                                                                size='small'\n                                                                                label={category.split(';')[1]}\n                                                                            />\n                                                                        </div>\n                                                                    ) : (\n                                                                        <Typography variant='h5'>{category}</Typography>\n                                                                    )}\n                                                                </AccordionSummary>\n                                                                <AccordionDetails>\n                                                                    {nodes[category].map((node, index) => (\n                                                                        <div\n                                                                            key={node.name}\n                                                                            onDragStart={(event) => onDragStart(event, node)}\n                                                                            draggable\n                                                                        >\n                                                                            <ListItemButton\n                                                                                sx={{\n                                                                                    p: 0,\n                                                                                    borderRadius: `${customization.borderRadius}px`,\n                                                                                    cursor: 'move',\n                                                                                    '&:hover span': {\n                                                                                        color: customization.isDarkMode ? '#FFF860 !important' : '#fff !important',\n                                                                                    },\n                                                                                    '&:hover p': {\n                                                                                        color: customization.isDarkMode ? '#fff !important' : '#d9d1d1 !important',\n                                                                                    },\n                                                                                }}\n                                                                            >\n                                                                                <ListItem alignItems='center'>\n                                                                                    <ListItemAvatar>\n                                                                                        <div\n                                                                                            style={{\n                                                                                                width: 50,\n                                                                                                height: 50,\n                                                                                                // borderRadius: '50%',\n                                                                                                backgroundColor: '#EEEEEE'\n                                                                                            }}\n                                                                                        >\n                                                                                            <img\n                                                                                                style={{\n                                                                                                    width: '100%',\n                                                                                                    height: '100%',\n                                                                                                    padding: 10,\n                                                                                                    objectFit: 'contain'\n                                                                                                }}\n                                                                                                alt={node.name}\n                                                                                                src={`${baseURL}/api/v1/node-icon/${node.name}`}\n                                                                                            />\n                                                                                        </div>\n                                                                                    </ListItemAvatar>\n                                                                                    <ListItemText\n                                                                                        sx={{ ml: 1 }}\n                                                                                        primary={\n                                                                                            <div\n                                                                                                style={{\n                                                                                                    display: 'flex',\n                                                                                                    flexDirection: 'row',\n                                                                                                    alignItems: 'center'\n                                                                                                }}\n                                                                                            >\n                                                                                                {/* <span>{node.label}</span> */}\n                                                                                                <span\n                                                                                                    style={{\n                                                                                                        color: customization.isDarkMode ? '#FFF860' : '#121D35',\n                                                                                                    }}>\n                                                                                                    {node.label}\n                                                                                                </span>\n                                                                                                &nbsp;\n                                                                                                {node.badge && (\n                                                                                                    <Chip\n                                                                                                        sx={{\n                                                                                                            width: 'max-content',\n                                                                                                            fontWeight: 700,\n                                                                                                            fontSize: '0.65rem',\n                                                                                                            background:\n                                                                                                                node.badge === 'DEPRECATING'\n                                                                                                                    ? theme.palette.warning\n                                                                                                                          .main\n                                                                                                                    : theme.palette.teal\n                                                                                                                          .main,\n                                                                                                            color:\n                                                                                                                node.badge !== 'DEPRECATING'\n                                                                                                                    ? 'white'\n                                                                                                                    : 'inherit'\n                                                                                                        }}\n                                                                                                        size='small'\n                                                                                                        label={node.badge}\n                                                                                                    />\n                                                                                                )}\n                                                                                            </div>\n                                                                                        }\n                                                                                        secondary={node.description}\n                                                                                    />\n                                                                                </ListItem>\n                                                                            </ListItemButton>\n                                                                            {index === nodes[category].length - 1 ? null : <Divider />}\n                                                                        </div>\n                                                                    ))}\n                                                                </AccordionDetails>\n                                                            </Accordion>\n                                                        )\n                                                    )}\n                                            </List>\n                                        </Box>\n                                    </PerfectScrollbar>\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper>\n        </>\n    )\n}\n\nAddNodes.propTypes = {\n    nodesData: PropTypes.array,\n    node: PropTypes.object\n}\n\nexport default AddNodes\n","import client from './client'\n\nconst sendMessageAndGetPrediction = (id, input) => client.post(`/internal-prediction/${id}`, input)\n\nexport default {\n    sendMessageAndGetPrediction\n}\n","import Box from '@mui/material/Box'\nimport PropTypes from 'prop-types'\nimport { Chip } from '@mui/material'\nimport './StarterPromptsCard.css'\n\nconst StarterPromptsCard = ({ isGrid, starterPrompts, onPromptClick }) => {\n    return (\n        <Box className={'button-container'} sx={{ maxWidth: isGrid ? 'inherit' : '400px', m: 1 }}>\n            {starterPrompts.map((sp, index) => (\n                <Chip label={sp.prompt} className={'button'} key={index} onClick={(e) => onPromptClick(sp.prompt, e)} />\n            ))}\n        </Box>\n    )\n}\n\nStarterPromptsCard.propTypes = {\n    isGrid: PropTypes.bool,\n    starterPrompts: PropTypes.arrayOf(PropTypes.string),\n    onPromptClick: PropTypes.func\n}\n\nexport default StarterPromptsCard\n","import { useState, useRef, useEffect, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport socketIOClient from 'socket.io-client'\nimport { cloneDeep } from 'lodash'\nimport rehypeMathjax from 'rehype-mathjax'\nimport rehypeRaw from 'rehype-raw'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport axios from 'axios'\n\nimport { CircularProgress, OutlinedInput, Divider, InputAdornment, IconButton, Box, Chip, Button } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconSend, IconDownload } from '@tabler/icons'\n\n// project import\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\nimport './ChatMessage.css'\n\n// api\nimport chatmessageApi from 'api/chatmessage'\nimport chatflowsApi from 'api/chatflows'\nimport predictionApi from 'api/prediction'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// Const\nimport { baseURL, maxScroll } from 'store/constant'\n\nimport robotPNG from 'assets/images/robot.png'\nimport userPNG from 'assets/images/account.png'\nimport StarterPromptsCard from '../../ui-component/cards/StarterPromptsCard'\nimport { isValidURL, removeDuplicateURL, setLocalStorageChatflow } from 'utils/genericHelper'\n\nexport const ChatMessage = ({ open, chatflowid, isDialog }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n\n    const ps = useRef()\n\n    const [userInput, setUserInput] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [messages, setMessages] = useState([\n        {\n            message: 'Hi there! How can I help?',\n            type: 'apiMessage'\n        }\n    ])\n    const [socketIOClientId, setSocketIOClientId] = useState('')\n    const [isChatFlowAvailableToStream, setIsChatFlowAvailableToStream] = useState(false)\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\n    const [chatId, setChatId] = useState(undefined)\n\n    const inputRef = useRef(null)\n    const getChatmessageApi = useApi(chatmessageApi.getInternalChatmessageFromChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n    const getChatflowConfig = useApi(chatflowsApi.getSpecificChatflow)\n\n    const [starterPrompts, setStarterPrompts] = useState([])\n\n    const onSourceDialogClick = (data, title) => {\n        setSourceDialogProps({ data, title })\n        setSourceDialogOpen(true)\n    }\n\n    const onURLClick = (data) => {\n        window.open(data, '_blank')\n    }\n\n    const scrollToBottom = () => {\n        if (ps.current) {\n            ps.current.scrollTo({ top: maxScroll })\n        }\n    }\n\n    const onChange = useCallback((e) => setUserInput(e.target.value), [setUserInput])\n\n    const updateLastMessage = (text) => {\n        setMessages((prevMessages) => {\n            let allMessages = [...cloneDeep(prevMessages)]\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\n            allMessages[allMessages.length - 1].message += text\n            return allMessages\n        })\n    }\n\n    const updateLastMessageSourceDocuments = (sourceDocuments) => {\n        setMessages((prevMessages) => {\n            let allMessages = [...cloneDeep(prevMessages)]\n            if (allMessages[allMessages.length - 1].type === 'userMessage') return allMessages\n            allMessages[allMessages.length - 1].sourceDocuments = sourceDocuments\n            return allMessages\n        })\n    }\n\n    // Handle errors\n    const handleError = (message = 'Oops! There seems to be an error. Please try again.') => {\n        message = message.replace(`Unable to parse JSON response from chat agent.\\n\\n`, '')\n        setMessages((prevMessages) => [...prevMessages, { message, type: 'apiMessage' }])\n        setLoading(false)\n        setUserInput('')\n        setTimeout(() => {\n            inputRef.current?.focus()\n        }, 100)\n    }\n\n    const handlePromptClick = async (promptStarterInput) => {\n        setUserInput(promptStarterInput)\n        handleSubmit(undefined, promptStarterInput)\n    }\n\n    // Handle form submission\n    const handleSubmit = async (e, promptStarterInput) => {\n        if (e) e.preventDefault()\n\n        if (!promptStarterInput && userInput.trim() === '') {\n            return\n        }\n\n        let input = userInput\n\n        if (promptStarterInput !== undefined && promptStarterInput.trim() !== '') input = promptStarterInput\n\n        setLoading(true)\n        setMessages((prevMessages) => [...prevMessages, { message: input, type: 'userMessage' }])\n\n        // Send user question and history to API\n        try {\n            const params = {\n                question: input,\n                history: messages.filter((msg) => msg.message !== 'Hi there! How can I help?'),\n                chatId\n            }\n            if (isChatFlowAvailableToStream) params.socketIOClientId = socketIOClientId\n\n            const response = await predictionApi.sendMessageAndGetPrediction(chatflowid, params)\n\n            if (response.data) {\n                const data = response.data\n\n                if (!chatId) setChatId(data.chatId)\n\n                if (!isChatFlowAvailableToStream) {\n                    let text = ''\n                    if (data.text) text = data.text\n                    else if (data.json) text = '```json\\n' + JSON.stringify(data.json, null, 2)\n                    else text = JSON.stringify(data, null, 2)\n\n                    setMessages((prevMessages) => [\n                        ...prevMessages,\n                        {\n                            message: text,\n                            sourceDocuments: data?.sourceDocuments,\n                            usedTools: data?.usedTools,\n                            fileAnnotations: data?.fileAnnotations,\n                            type: 'apiMessage'\n                        }\n                    ])\n                }\n                setLocalStorageChatflow(chatflowid, data.chatId, messages)\n                setLoading(false)\n                setUserInput('')\n                setTimeout(() => {\n                    inputRef.current?.focus()\n                    scrollToBottom()\n                }, 100)\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            handleError(errorData)\n            return\n        }\n    }\n\n    // Prevent blank submissions and allow for multiline input\n    const handleEnter = (e) => {\n        // Check if IME composition is in progress\n        const isIMEComposition = e.isComposing || e.keyCode === 229\n        if (e.key === 'Enter' && userInput && !isIMEComposition) {\n            if (!e.shiftKey && userInput) {\n                handleSubmit(e)\n            }\n        } else if (e.key === 'Enter') {\n            e.preventDefault()\n        }\n    }\n\n    const downloadFile = async (fileAnnotation) => {\n        try {\n            const response = await axios.post(\n                `${baseURL}/api/v1/openai-assistants-file`,\n                { fileName: fileAnnotation.fileName },\n                { responseType: 'blob' }\n            )\n            const blob = new Blob([response.data], { type: response.headers['content-type'] })\n            const downloadUrl = window.URL.createObjectURL(blob)\n            const link = document.createElement('a')\n            link.href = downloadUrl\n            link.download = fileAnnotation.fileName\n            document.body.appendChild(link)\n            link.click()\n            link.remove()\n        } catch (error) {\n            console.error('Download failed:', error)\n        }\n    }\n\n    // Get chatmessages successful\n    useEffect(() => {\n        if (getChatmessageApi.data?.length) {\n            const chatId = getChatmessageApi.data[0]?.chatId\n            setChatId(chatId)\n            const loadedMessages = getChatmessageApi.data.map((message) => {\n                const obj = {\n                    message: message.content,\n                    type: message.role\n                }\n                if (message.sourceDocuments) obj.sourceDocuments = JSON.parse(message.sourceDocuments)\n                if (message.usedTools) obj.usedTools = JSON.parse(message.usedTools)\n                if (message.fileAnnotations) obj.fileAnnotations = JSON.parse(message.fileAnnotations)\n                return obj\n            })\n            setMessages((prevMessages) => [...prevMessages, ...loadedMessages])\n            setLocalStorageChatflow(chatflowid, chatId, messages)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageApi.data])\n\n    // Get chatflow streaming capability\n    useEffect(() => {\n        if (getIsChatflowStreamingApi.data) {\n            setIsChatFlowAvailableToStream(getIsChatflowStreamingApi.data?.isStreaming ?? false)\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getIsChatflowStreamingApi.data])\n\n    useEffect(() => {\n        if (getChatflowConfig.data) {\n            if (getChatflowConfig.data?.chatbotConfig && JSON.parse(getChatflowConfig.data?.chatbotConfig)) {\n                let config = JSON.parse(getChatflowConfig.data?.chatbotConfig)\n                if (config.starterPrompts) {\n                    let inputFields = []\n                    Object.getOwnPropertyNames(config.starterPrompts).forEach((key) => {\n                        if (config.starterPrompts[key]) {\n                            inputFields.push(config.starterPrompts[key])\n                        }\n                    })\n                    setStarterPrompts(inputFields)\n                }\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatflowConfig.data])\n\n    // Auto scroll chat to bottom\n    useEffect(() => {\n        scrollToBottom()\n    }, [messages])\n\n    useEffect(() => {\n        if (isDialog && inputRef) {\n            setTimeout(() => {\n                inputRef.current?.focus()\n            }, 100)\n        }\n    }, [isDialog, inputRef])\n\n    useEffect(() => {\n        let socket\n        if (open && chatflowid) {\n            getChatmessageApi.request(chatflowid)\n            getIsChatflowStreamingApi.request(chatflowid)\n            getChatflowConfig.request(chatflowid)\n            scrollToBottom()\n\n            socket = socketIOClient(baseURL)\n\n            socket.on('connect', () => {\n                setSocketIOClientId(socket.id)\n            })\n\n            socket.on('start', () => {\n                setMessages((prevMessages) => [...prevMessages, { message: '', type: 'apiMessage' }])\n            })\n\n            socket.on('sourceDocuments', updateLastMessageSourceDocuments)\n\n            socket.on('token', updateLastMessage)\n        }\n\n        return () => {\n            setUserInput('')\n            setLoading(false)\n            setMessages([\n                {\n                    message: 'Hi there! How can I help?',\n                    type: 'apiMessage'\n                }\n            ])\n            if (socket) {\n                socket.disconnect()\n                setSocketIOClientId('')\n            }\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open, chatflowid])\n\n    return (\n        <>\n            <div className={isDialog ? 'cloud-dialog' : 'cloud'}>\n                <div ref={ps} className='messagelist'>\n                    {messages &&\n                        messages.map((message, index) => {\n                            return (\n                                // The latest message sent by the user will be animated while waiting for a response\n                                <>\n                                    <Box\n                                        sx={{\n                                            background: message.type === 'apiMessage' ? theme.palette.asyncSelect.main : ''\n                                        }}\n                                        key={index}\n                                        style={{ display: 'flex' }}\n                                        className={\n                                            message.type === 'userMessage' && loading && index === messages.length - 1\n                                                ? customization.isDarkMode\n                                                    ? 'usermessagewaiting-dark'\n                                                    : 'usermessagewaiting-light'\n                                                : message.type === 'usermessagewaiting'\n                                                ? 'apimessage'\n                                                : 'usermessage'\n                                        }\n                                    >\n                                        {/* Display the correct icon depending on the message type */}\n                                        {message.type === 'apiMessage' ? (\n                                            <img src={robotPNG} alt='AI' width='30' height='30' className='boticon' />\n                                        ) : (\n                                            <img src={userPNG} alt='Me' width='30' height='30' className='usericon' />\n                                        )}\n                                        <div style={{ display: 'flex', flexDirection: 'column', width: '100%' }}>\n                                            {message.usedTools && (\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                    {message.usedTools.map((tool, index) => {\n                                                        return (\n                                                            <Chip\n                                                                size='small'\n                                                                key={index}\n                                                                label={tool.tool}\n                                                                component='a'\n                                                                sx={{ mr: 1, mt: 1 }}\n                                                                variant='outlined'\n                                                                clickable\n                                                                onClick={() => onSourceDialogClick(tool, 'Used Tools')}\n                                                            />\n                                                        )\n                                                    })}\n                                                </div>\n                                            )}\n                                            <div className='markdownanswer'>\n                                                {/* Messages are being rendered in Markdown format */}\n                                                <MemoizedReactMarkdown\n                                                    remarkPlugins={[remarkGfm, remarkMath]}\n                                                    rehypePlugins={[rehypeMathjax, rehypeRaw]}\n                                                    components={{\n                                                        code({ inline, className, children, ...props }) {\n                                                            const match = /language-(\\w+)/.exec(className || '')\n                                                            return !inline ? (\n                                                                <CodeBlock\n                                                                    key={Math.random()}\n                                                                    chatflowid={chatflowid}\n                                                                    isDialog={isDialog}\n                                                                    language={(match && match[1]) || ''}\n                                                                    value={String(children).replace(/\\n$/, '')}\n                                                                    {...props}\n                                                                />\n                                                            ) : (\n                                                                <code className={className} {...props}>\n                                                                    {children}\n                                                                </code>\n                                                            )\n                                                        }\n                                                    }}\n                                                >\n                                                    {message.message}\n                                                </MemoizedReactMarkdown>\n                                            </div>\n                                            {message.fileAnnotations && (\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                    {message.fileAnnotations.map((fileAnnotation, index) => {\n                                                        return (\n                                                            <Button\n                                                                sx={{ fontSize: '0.85rem', textTransform: 'none', mb: 1 }}\n                                                                key={index}\n                                                                variant='outlined'\n                                                                onClick={() => downloadFile(fileAnnotation)}\n                                                                endIcon={<IconDownload color={theme.palette.primary.main} />}\n                                                            >\n                                                                {fileAnnotation.fileName}\n                                                            </Button>\n                                                        )\n                                                    })}\n                                                </div>\n                                            )}\n                                            {message.sourceDocuments && (\n                                                <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                    {removeDuplicateURL(message).map((source, index) => {\n                                                        const URL =\n                                                            source.metadata && source.metadata.source\n                                                                ? isValidURL(source.metadata.source)\n                                                                : undefined\n                                                        return (\n                                                            <Chip\n                                                                size='small'\n                                                                key={index}\n                                                                label={\n                                                                    URL\n                                                                        ? URL.pathname.substring(0, 15) === '/'\n                                                                            ? URL.host\n                                                                            : `${URL.pathname.substring(0, 15)}...`\n                                                                        : `${source.pageContent.substring(0, 15)}...`\n                                                                }\n                                                                component='a'\n                                                                sx={{ mr: 1, mb: 1 }}\n                                                                variant='outlined'\n                                                                clickable\n                                                                onClick={() =>\n                                                                    URL ? onURLClick(source.metadata.source) : onSourceDialogClick(source)\n                                                                }\n                                                            />\n                                                        )\n                                                    })}\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Box>\n                                </>\n                            )\n                        })}\n                </div>\n            </div>\n\n            <div style={{ position: 'relative' }}>\n                {messages && messages.length === 1 && (\n                    <StarterPromptsCard starterPrompts={starterPrompts || []} onPromptClick={handlePromptClick} isGrid={isDialog} />\n                )}\n                <Divider />\n            </div>\n            <div className='center'>\n                <div style={{ width: '100%' }}>\n                    <form style={{ width: '100%' }} onSubmit={handleSubmit}>\n                        <OutlinedInput\n                            inputRef={inputRef}\n                            // eslint-disable-next-line\n                            autoFocus\n                            sx={{ width: '100%' }}\n                            disabled={loading || !chatflowid}\n                            onKeyDown={handleEnter}\n                            id='userInput'\n                            name='userInput'\n                            placeholder={loading ? 'Waiting for response...' : 'Type your question...'}\n                            value={userInput}\n                            onChange={onChange}\n                            multiline={true}\n                            maxRows={isDialog ? 7 : 2}\n                            endAdornment={\n                                <InputAdornment position='end' sx={{ padding: '15px' }}>\n                                    <IconButton type='submit' disabled={loading || !chatflowid} edge='end'>\n                                        {loading ? (\n                                            <div>\n                                                <CircularProgress color='inherit' size={20} />\n                                            </div>\n                                        ) : (\n                                            // Send icon SVG in input field\n                                            <IconSend\n                                                color={loading || !chatflowid ? '#9e9e9e' : customization.isDarkMode ? 'white' : '#1e88e5'}\n                                            />\n                                        )}\n                                    </IconButton>\n                                </InputAdornment>\n                            }\n                        />\n                    </form>\n                </div>\n            </div>\n            <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\n        </>\n    )\n}\n\nChatMessage.propTypes = {\n    open: PropTypes.bool,\n    chatflowid: PropTypes.string,\n    isDialog: PropTypes.bool\n}\n","import { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\n\nimport { Dialog, DialogContent, DialogTitle, Button } from '@mui/material'\nimport { ChatMessage } from './ChatMessage'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { IconEraser } from '@tabler/icons'\n\nconst ChatExpandDialog = ({ show, dialogProps, onClear, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const customization = useSelector((state) => state.customization)\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n            sx={{ overflow: 'visible' }}\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }}></div>\n                    {customization.isDarkMode && (\n                        <StyledButton\n                            variant='outlined'\n                            color='error'\n                            title='Clear Conversation'\n                            onClick={onClear}\n                            startIcon={<IconEraser />}\n                        >\n                            Clear Chat\n                        </StyledButton>\n                    )}\n                    {!customization.isDarkMode && (\n                        <Button variant='outlined' color='error' title='Clear Conversation' onClick={onClear} startIcon={<IconEraser />}>\n                            Clear Chat\n                        </Button>\n                    )}\n                </div>\n            </DialogTitle>\n            <DialogContent sx={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'column' }}>\n                <ChatMessage isDialog={true} open={dialogProps.open} chatflowid={dialogProps.chatflowid} />\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nChatExpandDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onClear: PropTypes.func,\n    onCancel: PropTypes.func\n}\n\nexport default ChatExpandDialog\n","import { useState, useRef, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { ClickAwayListener, Paper, Popper, Button } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconMessage, IconX, IconEraser, IconArrowsMaximize } from '@tabler/icons'\n\n// project import\nimport { StyledFab } from 'ui-component/button/StyledFab'\nimport MainCard from 'ui-component/cards/MainCard'\nimport Transitions from 'ui-component/extended/Transitions'\nimport { ChatMessage } from './ChatMessage'\nimport ChatExpandDialog from './ChatExpandDialog'\n\n// api\nimport chatmessageApi from 'api/chatmessage'\n\n// Hooks\nimport useConfirm from 'hooks/useConfirm'\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\n\nexport const ChatPopUp = ({ chatflowid }) => {\n    const theme = useTheme()\n    const { confirm } = useConfirm()\n    const dispatch = useDispatch()\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [open, setOpen] = useState(false)\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\n    const [expandDialogProps, setExpandDialogProps] = useState({})\n\n    const anchorRef = useRef(null)\n    const prevOpen = useRef(open)\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return\n        }\n        setOpen(false)\n    }\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen)\n    }\n\n    const expandChat = () => {\n        const props = {\n            open: true,\n            chatflowid: chatflowid\n        }\n        setExpandDialogProps(props)\n        setShowExpandDialog(true)\n    }\n\n    const resetChatDialog = () => {\n        const props = {\n            ...expandDialogProps,\n            open: false\n        }\n        setExpandDialogProps(props)\n        setTimeout(() => {\n            const resetProps = {\n                ...expandDialogProps,\n                open: true\n            }\n            setExpandDialogProps(resetProps)\n        }, 500)\n    }\n\n    const clearChat = async () => {\n        const confirmPayload = {\n            title: `Clear Chat History`,\n            description: `Are you sure you want to clear all chat history?`,\n            confirmButtonName: 'Clear',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                const chatDetails = localStorage.getItem(`${chatflowid}_INTERNAL`)\n                if (!chatDetails) return\n                const objChatDetails = JSON.parse(chatDetails)\n                await chatmessageApi.deleteChatmessage(chatflowid, { chatId: objChatDetails.chatId, chatType: 'INTERNAL' })\n                localStorage.removeItem(`${chatflowid}_INTERNAL`)\n                resetChatDialog()\n                enqueueSnackbar({\n                    message: 'Succesfully cleared all chat history',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus()\n        }\n        prevOpen.current = open\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open, chatflowid])\n\n    return (\n        <>\n            <StyledFab\n                sx={{ position: 'absolute', right: 20, top: 20 }}\n                ref={anchorRef}\n                size='small'\n                color='secondary'\n                aria-label='chat'\n                title='Chat'\n                onClick={handleToggle}\n            >\n                {open ? <IconX /> : <IconMessage />}\n            </StyledFab>\n            {open && (\n                <StyledFab\n                    sx={{ position: 'absolute', right: 80, top: 20 }}\n                    onClick={clearChat}\n                    size='small'\n                    // color='error'\n                    aria-label='clear'\n                    title='Clear Chat History'\n                >\n                    <IconEraser />\n                </StyledFab>\n            )}\n            {open && (\n                <StyledFab\n                    sx={{ position: 'absolute', right: 140, top: 20 }}\n                    onClick={expandChat}\n                    size='small'\n                    color='primary'\n                    aria-label='expand'\n                    title='Expand Chat'\n                >\n                    <IconArrowsMaximize />\n                </StyledFab>\n            )}\n            <Popper\n                placement='bottom-end'\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                popperOptions={{\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: [40, 14]\n                            }\n                        }\n                    ]\n                }}\n                sx={{ zIndex: 1000 }}\n            >\n                {({ TransitionProps }) => (\n                    <Transitions in={open} {...TransitionProps}>\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\n                                    <ChatMessage chatflowid={chatflowid} open={open} />\n                                </MainCard>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Transitions>\n                )}\n            </Popper>\n            <ChatExpandDialog\n                show={showExpandDialog}\n                dialogProps={expandDialogProps}\n                onClear={clearChat}\n                onCancel={() => setShowExpandDialog(false)}\n            ></ChatExpandDialog>\n        </>\n    )\n}\n\nChatPopUp.propTypes = { chatflowid: PropTypes.string }\n","import client from './client'\n\nconst upsertVectorStore = (id, input) => client.post(`/vector/internal-upsert/${id}`, input)\n\nexport default {\n    upsertVectorStore\n}\n","import { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { useContext, useState, useEffect } from 'react'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\n\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Button,\n    Box,\n    Tabs,\n    Tab,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Typography\n} from '@mui/material'\n\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\nimport { BackdropLoader } from 'ui-component/loading/BackdropLoader'\nimport { TableViewOnly } from 'ui-component/table/Table'\n\nimport { IconX } from '@tabler/icons'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport pythonSVG from 'assets/images/python.svg'\nimport javascriptSVG from 'assets/images/javascript.svg'\nimport cURLSVG from 'assets/images/cURL.svg'\n\nimport useApi from 'hooks/useApi'\nimport configApi from 'api/config'\nimport vectorstoreApi from 'api/vectorstore'\n\n// Utils\nimport {\n    getUpsertDetails,\n    getFileName,\n    unshiftFiles,\n    getConfigExamplesForJS,\n    getConfigExamplesForPython,\n    getConfigExamplesForCurl\n} from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\n\n// Store\nimport { flowContext } from 'store/context/ReactFlowContext'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\nimport { baseURL } from 'store/constant'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst VectorStoreDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const { reactFlowInstance } = useContext(flowContext)\n    const dispatch = useDispatch()\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n    const getConfigApi = useApi(configApi.getConfig)\n\n    const [nodes, setNodes] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [isFormDataRequired, setIsFormDataRequired] = useState({})\n    const [nodeConfigExpanded, setNodeConfigExpanded] = useState({})\n    const [nodeCheckboxExpanded, setCheckboxExpanded] = useState({})\n    const [tabValue, setTabValue] = useState(0)\n    const [expandedVectorNodeId, setExpandedVectorNodeId] = useState('')\n    const [configData, setConfigData] = useState({})\n\n    const reformatConfigData = (configData, nodes) => {\n        return configData.filter((item1) => nodes.some((item2) => item1.nodeId === item2.id))\n    }\n\n    const getCode = (codeLang, vectorNodeId, isMultiple, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n\noutput = query({\n    ${isMultiple ? `\"stopNodeId\": \"${vectorNodeId}\",\\n    ` : ``}\"overrideConfig\": {${getConfigExamplesForPython(\n                configData,\n                'json',\n                isMultiple,\n                vectorNodeId\n            )}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  ${isMultiple ? `\"stopNodeId\": \"${vectorNodeId}\",\\n  ` : ``}\"overrideConfig\": {${getConfigExamplesForJS(\n                configData,\n                'json',\n                isMultiple,\n                vectorNodeId\n            )}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid} \\\\\n      -X POST \\\\\n      ${\n          isMultiple\n              ? `-d '{\"stopNodeId\": \"${vectorNodeId}\", \"overrideConfig\": {${getConfigExamplesForCurl(\n                    configData,\n                    'json',\n                    isMultiple,\n                    vectorNodeId\n                )}}' \\\\`\n              : `-d '{\"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json', isMultiple, vectorNodeId)}}' \\\\`\n      }\n      -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    const getCodeWithFormData = (codeLang, vectorNodeId, isMultiple, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            let fileType = configData[0].type\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\"\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData', isMultiple, vectorNodeId)}}\n\ndef query(form_data, body_data):\n    response = requests.post(API_URL, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data, body_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData', isMultiple, vectorNodeId)}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/vector/upsert/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData', isMultiple, vectorNodeId)} \\\\\n     -H \"Content-Type: multipart/form-data\"`\n        }\n        return ''\n    }\n\n    const getLang = (codeLang) => {\n        if (codeLang === 'Python') {\n            return 'python'\n        } else if (codeLang === 'JavaScript') {\n            return 'javascript'\n        } else if (codeLang === 'cURL') {\n            return 'bash'\n        }\n        return 'python'\n    }\n\n    const getSVG = (codeLang) => {\n        if (codeLang === 'Python') {\n            return pythonSVG\n        } else if (codeLang === 'JavaScript') {\n            return javascriptSVG\n        } else if (codeLang === 'Embed') {\n            return EmbedSVG\n        } else if (codeLang === 'cURL') {\n            return cURLSVG\n        } else if (codeLang === 'Share Chatbot') {\n            return ShareChatbotSVG\n        } else if (codeLang === 'Configuration') {\n            return settingsSVG\n        }\n        return pythonSVG\n    }\n\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\n        const accordianNodes = { ...nodeConfigExpanded }\n        accordianNodes[nodeLabel] = isExpanded\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    const onCheckBoxChanged = (vectorNodeId) => {\n        const checkboxNodes = { ...nodeCheckboxExpanded }\n        if (Object.keys(checkboxNodes).includes(vectorNodeId)) checkboxNodes[vectorNodeId] = !checkboxNodes[vectorNodeId]\n        else checkboxNodes[vectorNodeId] = true\n\n        if (checkboxNodes[vectorNodeId] === true) getConfigApi.request(dialogProps.chatflowid)\n        setCheckboxExpanded(checkboxNodes)\n        setExpandedVectorNodeId(vectorNodeId)\n\n        const newIsFormDataRequired = { ...isFormDataRequired }\n        newIsFormDataRequired[vectorNodeId] = false\n        setIsFormDataRequired(newIsFormDataRequired)\n        const newNodes = nodes.find((node) => node.vectorNode.data.id === vectorNodeId)?.nodes ?? []\n\n        for (const node of newNodes) {\n            if (node.data.inputParams.find((param) => param.type === 'file')) {\n                newIsFormDataRequired[vectorNodeId] = true\n                setIsFormDataRequired(newIsFormDataRequired)\n                break\n            }\n        }\n    }\n\n    const onUpsertClicked = async (vectorStoreNode) => {\n        setLoading(true)\n        try {\n            await vectorstoreApi.upsertVectorStore(dialogProps.chatflowid, { stopNodeId: vectorStoreNode.data.id })\n            enqueueSnackbar({\n                message: 'Succesfully upserted vector store. You can start chatting now!',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'success',\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            setLoading(false)\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: errorData,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            setLoading(false)\n        }\n    }\n\n    const getNodeDetail = (node) => {\n        const nodeDetails = []\n        const inputKeys = Object.keys(node.data.inputs)\n        for (let i = 0; i < node.data.inputParams.length; i += 1) {\n            if (inputKeys.includes(node.data.inputParams[i].name)) {\n                nodeDetails.push({\n                    label: node.data.inputParams[i].label,\n                    name: node.data.inputParams[i].name,\n                    type: node.data.inputParams[i].type,\n                    value:\n                        node.data.inputParams[i].type === 'file'\n                            ? getFileName(node.data.inputs[node.data.inputParams[i].name])\n                            : node.data.inputs[node.data.inputParams[i].name] ?? ''\n                })\n            }\n        }\n        return nodeDetails\n    }\n\n    useEffect(() => {\n        if (getConfigApi.data) {\n            const newConfigData = { ...configData }\n            newConfigData[expandedVectorNodeId] = reformatConfigData(\n                getConfigApi.data,\n                nodes.find((node) => node.vectorNode.data.id === expandedVectorNodeId)?.nodes ?? []\n            )\n            setConfigData(newConfigData)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getConfigApi.data])\n\n    useEffect(() => {\n        if (dialogProps && reactFlowInstance) {\n            const nodes = reactFlowInstance.getNodes()\n            const edges = reactFlowInstance.getEdges()\n            setNodes(getUpsertDetails(nodes, edges))\n        }\n\n        return () => {\n            setNodes([])\n            setLoading(false)\n            setIsFormDataRequired({})\n            setNodeConfigExpanded({})\n            setCheckboxExpanded({})\n            setTabValue(0)\n            setConfigData({})\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n            sx={{ overflow: 'visible' }}\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent sx={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'column' }}>\n                <PerfectScrollbar\n                    style={{\n                        height: '100%',\n                        maxHeight: 'calc(100vh - 220px)',\n                        overflowX: 'hidden'\n                    }}\n                >\n                    {nodes.length > 0 &&\n                        nodes.map((data, index) => {\n                            return (\n                                <div key={index}>\n                                    {data.nodes.length > 0 &&\n                                        data.nodes.map((node, index) => {\n                                            return (\n                                                <Accordion\n                                                    expanded={nodeConfigExpanded[node.data.id] || false}\n                                                    onChange={handleAccordionChange(node.data.id)}\n                                                    key={index}\n                                                    disableGutters\n                                                >\n                                                    <AccordionSummary\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        aria-controls={`nodes-accordian-${node.data.name}`}\n                                                        id={`nodes-accordian-header-${node.data.name}`}\n                                                    >\n                                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                                            <div\n                                                                style={{\n                                                                    width: 40,\n                                                                    height: 40,\n                                                                    marginRight: 10,\n                                                                    borderRadius: '50%',\n                                                                    backgroundColor: 'white'\n                                                                }}\n                                                            >\n                                                                <img\n                                                                    style={{\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        padding: 7,\n                                                                        borderRadius: '50%',\n                                                                        objectFit: 'contain'\n                                                                    }}\n                                                                    alt={node.data.name}\n                                                                    src={`${baseURL}/api/v1/node-icon/${node.data.name}`}\n                                                                />\n                                                            </div>\n                                                            <Typography variant='h5'>{node.data.label}</Typography>\n                                                            <div\n                                                                style={{\n                                                                    display: 'flex',\n                                                                    flexDirection: 'row',\n                                                                    width: 'max-content',\n                                                                    borderRadius: 15,\n                                                                    background: 'rgb(254,252,191)',\n                                                                    padding: 5,\n                                                                    paddingLeft: 10,\n                                                                    paddingRight: 10,\n                                                                    marginLeft: 10\n                                                                }}\n                                                            >\n                                                                <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>\n                                                                    {node.data.id}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <TableViewOnly\n                                                            sx={{ minWidth: 'max-content' }}\n                                                            rows={getNodeDetail(node)}\n                                                            columns={Object.keys(getNodeDetail(node)[0])}\n                                                        />\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            )\n                                        })}\n                                    <Box sx={{ p: 2 }}>\n                                        <CheckboxInput\n                                            key={JSON.stringify(nodeCheckboxExpanded)}\n                                            label='Show API'\n                                            value={nodeCheckboxExpanded[data.vectorNode.data.id]}\n                                            onChange={() => onCheckBoxChanged(data.vectorNode.data.id)}\n                                        />\n                                        {nodeCheckboxExpanded[data.vectorNode.data.id] && (\n                                            <div>\n                                                <Tabs value={tabValue} onChange={(event, val) => setTabValue(val)} aria-label='tabs'>\n                                                    {['Python', 'JavaScript', 'cURL'].map((codeLang, index) => (\n                                                        <Tab\n                                                            icon={\n                                                                <img\n                                                                    style={{ objectFit: 'cover', height: 15, width: 'auto' }}\n                                                                    src={getSVG(codeLang)}\n                                                                    alt='code'\n                                                                />\n                                                            }\n                                                            iconPosition='start'\n                                                            key={index}\n                                                            label={codeLang}\n                                                            {...a11yProps(index)}\n                                                        ></Tab>\n                                                    ))}\n                                                </Tabs>\n                                            </div>\n                                        )}\n                                        {nodeCheckboxExpanded[data.vectorNode.data.id] &&\n                                            isFormDataRequired[data.vectorNode.data.id] !== undefined &&\n                                            configData[data.vectorNode.data.id] &&\n                                            configData[data.vectorNode.data.id].length > 0 && (\n                                                <>\n                                                    <div style={{ marginTop: 10 }}>\n                                                        {['Python', 'JavaScript', 'cURL'].map((codeLang, index) => (\n                                                            <TabPanel key={index} value={tabValue} index={index}>\n                                                                <CopyBlock\n                                                                    theme={atomOneDark}\n                                                                    text={\n                                                                        isFormDataRequired[data.vectorNode.data.id]\n                                                                            ? getCodeWithFormData(\n                                                                                  codeLang,\n                                                                                  data.vectorNode.data.id,\n                                                                                  nodes.length > 1 ? true : false,\n                                                                                  configData[data.vectorNode.data.id]\n                                                                              )\n                                                                            : getCode(\n                                                                                  codeLang,\n                                                                                  data.vectorNode.data.id,\n                                                                                  nodes.length > 1 ? true : false,\n                                                                                  configData[data.vectorNode.data.id]\n                                                                              )\n                                                                    }\n                                                                    language={getLang(codeLang)}\n                                                                    showLineNumbers={false}\n                                                                    wrapLines\n                                                                />\n                                                            </TabPanel>\n                                                        ))}\n                                                    </div>\n                                                </>\n                                            )}\n                                    </Box>\n                                    <div style={{ marginBottom: '20px' }}>\n                                        {loading && <BackdropLoader open={loading} />}\n                                        {!loading && (\n                                            <Button\n                                                sx={{ color: 'white' }}\n                                                fullWidth\n                                                variant='contained'\n                                                color='teal'\n                                                title='Upsert'\n                                                onClick={() => onUpsertClicked(data.vectorNode)}\n                                            >\n                                                Upsert\n                                            </Button>\n                                        )}\n                                    </div>\n                                </div>\n                            )\n                        })}\n                </PerfectScrollbar>\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nVectorStoreDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default VectorStoreDialog\n","import { useState, useRef, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { Button } from '@mui/material'\nimport { IconDatabaseImport, IconX } from '@tabler/icons'\n\n// project import\nimport { StyledFab } from 'ui-component/button/StyledFab'\nimport VectorStoreDialog from './VectorStoreDialog'\n\n// api\nimport vectorstoreApi from 'api/vectorstore'\n\n// Hooks\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\n\nexport const VectorStorePopUp = ({ chatflowid }) => {\n    const dispatch = useDispatch()\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [open, setOpen] = useState(false)\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\n    const [expandDialogProps, setExpandDialogProps] = useState({})\n\n    const anchorRef = useRef(null)\n    const prevOpen = useRef(open)\n\n    const handleToggle = () => {\n        setOpen((prevopen) => !prevopen)\n        const props = {\n            open: true,\n            title: 'Upsert Vector Store',\n            chatflowid\n        }\n        setExpandDialogProps(props)\n        setShowExpandDialog(true)\n    }\n\n    const onUpsert = async () => {\n        try {\n            await vectorstoreApi.upsertVectorStore(chatflowid, {})\n            enqueueSnackbar({\n                message: 'Succesfully upserted vector store',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'success',\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: errorData,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    useEffect(() => {\n        if (prevOpen.current === true && open === false) {\n            anchorRef.current.focus()\n        }\n        prevOpen.current = open\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [open, chatflowid])\n\n    return (\n        <>\n            <StyledFab\n                sx={{ position: 'absolute', right: 80, top: 20 }}\n                ref={anchorRef}\n                size='small'\n                color='teal'\n                aria-label='upsert'\n                title='Upsert Vector Database'\n                onClick={handleToggle}\n            >\n                {open ? <IconX /> : <IconDatabaseImport />}\n            </StyledFab>\n            <VectorStoreDialog\n                show={showExpandDialog}\n                dialogProps={expandDialogProps}\n                onUpsert={onUpsert}\n                onCancel={() => {\n                    setShowExpandDialog(false)\n                    setOpen((prevopen) => !prevopen)\n                }}\n            ></VectorStoreDialog>\n        </>\n    )\n}\n\nVectorStorePopUp.propTypes = { chatflowid: PropTypes.string }\n","import { useEffect, useRef, useState, useCallback, useContext } from 'react'\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState } from 'reactflow'\nimport 'reactflow/dist/style.css'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { usePrompt } from '../../utils/usePrompt'\nimport {\n    REMOVE_DIRTY,\n    SET_DIRTY,\n    SET_CHATFLOW,\n    enqueueSnackbar as enqueueSnackbarAction,\n    closeSnackbar as closeSnackbarAction\n} from 'store/actions'\nimport { omit, cloneDeep } from 'lodash'\n\n// material-ui\nimport { Toolbar, Box, AppBar, Button } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// project imports\nimport CanvasNode from './CanvasNode'\nimport ButtonEdge from './ButtonEdge'\nimport CanvasHeader from './CanvasHeader'\nimport AddNodes from './AddNodes'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { ChatPopUp } from 'views/chatmessage/ChatPopUp'\nimport { VectorStorePopUp } from 'views/vectorstore/VectorStorePopUp'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\n// API\nimport nodesApi from 'api/nodes'\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\n\n// icons\nimport { IconX } from '@tabler/icons'\n\n// utils\nimport { getUniqueNodeId, initNode, rearrangeToolsOrdering, getUpsertDetails } from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\n\n// const\nimport { FLOWISE_CREDENTIAL_ID } from 'store/constant'\nimport { withAuthenticationRequired } from '@auth0/auth0-react'\n\nconst nodeTypes = { customNode: CanvasNode }\nconst edgeTypes = { buttonedge: ButtonEdge }\n\n// ==============================|| CANVAS ||============================== //\n\nconst Canvas = () => {\n    const theme = useTheme()\n    const navigate = useNavigate()\n\n    const { state } = useLocation()\n    const templateFlowData = state ? state.templateFlowData : ''\n\n    const URLpath = document.location.pathname.toString().split('/')\n    const chatflowId = URLpath[URLpath.length - 1] === 'canvas' ? '' : URLpath[URLpath.length - 1]\n\n    const { confirm } = useConfirm()\n\n    const dispatch = useDispatch()\n    const canvas = useSelector((state) => state.canvas)\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\n    const [chatflow, setChatflow] = useState(null)\n\n    const { reactFlowInstance, setReactFlowInstance } = useContext(flowContext)\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    // ==============================|| ReactFlow ||============================== //\n\n    const [nodes, setNodes, onNodesChange] = useNodesState()\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\n\n    const [selectedNode, setSelectedNode] = useState(null)\n    const [isUpsertButtonEnabled, setIsUpsertButtonEnabled] = useState(false)\n\n    const reactFlowWrapper = useRef(null)\n\n    // ==============================|| Chatflow API ||============================== //\n\n    const getNodesApi = useApi(nodesApi.getAllNodes)\n    const createNewChatflowApi = useApi(chatflowsApi.createNewChatflow)\n    const testChatflowApi = useApi(chatflowsApi.testChatflow)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\n\n    // ==============================|| Events & Actions ||============================== //\n\n    const onConnect = (params) => {\n        const newEdge = {\n            ...params,\n            type: 'buttonedge',\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`\n        }\n\n        const targetNodeId = params.targetHandle.split('-')[0]\n        const sourceNodeId = params.sourceHandle.split('-')[0]\n        const targetInput = params.targetHandle.split('-')[2]\n\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === targetNodeId) {\n                    setTimeout(() => setDirty(), 0)\n                    let value\n                    const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\n                    const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\n\n                    if (inputAnchor && inputAnchor.list) {\n                        const newValues = node.data.inputs[targetInput] || []\n                        if (targetInput === 'tools') {\n                            rearrangeToolsOrdering(newValues, sourceNodeId)\n                        } else {\n                            newValues.push(`{{${sourceNodeId}.data.instance}}`)\n                        }\n                        value = newValues\n                    } else if (inputParam && inputParam.acceptVariable) {\n                        value = node.data.inputs[targetInput] || ''\n                    } else {\n                        value = `{{${sourceNodeId}.data.instance}}`\n                    }\n                    node.data = {\n                        ...node.data,\n                        inputs: {\n                            ...node.data.inputs,\n                            [targetInput]: value\n                        }\n                    }\n                }\n                return node\n            })\n        )\n\n        setEdges((eds) => addEdge(newEdge, eds))\n    }\n\n    const handleLoadFlow = (file) => {\n        try {\n            const flowData = JSON.parse(file)\n            const nodes = flowData.nodes || []\n\n            setNodes(nodes)\n            setEdges(flowData.edges || [])\n            setDirty()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const handleDeleteFlow = async () => {\n        const confirmPayload = {\n            title: `Delete`,\n            description: `Delete chatflow ${chatflow.name}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                await chatflowsApi.deleteChatflow(chatflow.id)\n                localStorage.removeItem(`${chatflow.id}_INTERNAL`)\n                navigate('/')\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const handleSaveFlow = (chatflowName) => {\n        if (reactFlowInstance) {\n            const nodes = reactFlowInstance.getNodes().map((node) => {\n                const nodeData = cloneDeep(node.data)\n                if (Object.prototype.hasOwnProperty.call(nodeData.inputs, FLOWISE_CREDENTIAL_ID)) {\n                    nodeData.credential = nodeData.inputs[FLOWISE_CREDENTIAL_ID]\n                    nodeData.inputs = omit(nodeData.inputs, [FLOWISE_CREDENTIAL_ID])\n                }\n                node.data = {\n                    ...nodeData,\n                    selected: false\n                }\n                return node\n            })\n\n            const rfInstanceObject = reactFlowInstance.toObject()\n            rfInstanceObject.nodes = nodes\n            const flowData = JSON.stringify(rfInstanceObject)\n\n            if (!chatflow.id) {\n                const newChatflowBody = {\n                    name: chatflowName,\n                    deployed: false,\n                    isPublic: false,\n                    flowData\n                }\n                createNewChatflowApi.request(newChatflowBody)\n            } else {\n                const updateBody = {\n                    name: chatflowName,\n                    flowData\n                }\n                updateChatflowApi.request(chatflow.id, updateBody)\n            }\n        }\n    }\n\n    // eslint-disable-next-line\n    const onNodeClick = useCallback((event, clickedNode) => {\n        setSelectedNode(clickedNode)\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === clickedNode.id) {\n                    node.data = {\n                        ...node.data,\n                        selected: true\n                    }\n                } else {\n                    node.data = {\n                        ...node.data,\n                        selected: false\n                    }\n                }\n\n                return node\n            })\n        )\n    })\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault()\n        event.dataTransfer.dropEffect = 'move'\n    }, [])\n\n    const onDrop = useCallback(\n        (event) => {\n            event.preventDefault()\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\n            let nodeData = event.dataTransfer.getData('application/reactflow')\n\n            // check if the dropped element is valid\n            if (typeof nodeData === 'undefined' || !nodeData) {\n                return\n            }\n\n            nodeData = JSON.parse(nodeData)\n\n            const position = reactFlowInstance.project({\n                x: event.clientX - reactFlowBounds.left - 100,\n                y: event.clientY - reactFlowBounds.top - 50\n            })\n\n            const newNodeId = getUniqueNodeId(nodeData, reactFlowInstance.getNodes())\n\n            const newNode = {\n                id: newNodeId,\n                position,\n                type: 'customNode',\n                data: initNode(nodeData, newNodeId)\n            }\n\n            setSelectedNode(newNode)\n            setNodes((nds) =>\n                nds.concat(newNode).map((node) => {\n                    if (node.id === newNode.id) {\n                        node.data = {\n                            ...node.data,\n                            selected: true\n                        }\n                    } else {\n                        node.data = {\n                            ...node.data,\n                            selected: false\n                        }\n                    }\n\n                    return node\n                })\n            )\n            setTimeout(() => setDirty(), 0)\n        },\n\n        // eslint-disable-next-line\n        [reactFlowInstance]\n    )\n\n    const saveChatflowSuccess = () => {\n        dispatch({ type: REMOVE_DIRTY })\n        enqueueSnackbar({\n            message: 'Chatflow saved',\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'success',\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const errorFailed = (message) => {\n        enqueueSnackbar({\n            message,\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'error',\n                persist: true,\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const setDirty = () => {\n        dispatch({ type: SET_DIRTY })\n    }\n\n    const checkIfUpsertAvailable = (nodes, edges) => {\n        const upsertNodeDetails = getUpsertDetails(nodes, edges)\n        if (upsertNodeDetails.length) setIsUpsertButtonEnabled(true)\n        else setIsUpsertButtonEnabled(false)\n    }\n\n    // ==============================|| useEffect ||============================== //\n\n    // Get specific chatflow successful\n    useEffect(() => {\n        if (getSpecificChatflowApi.data) {\n            const chatflow = getSpecificChatflowApi.data\n            const initialFlow = chatflow.flowData ? JSON.parse(chatflow.flowData) : []\n            setNodes(initialFlow.nodes || [])\n            setEdges(initialFlow.edges || [])\n            dispatch({ type: SET_CHATFLOW, chatflow })\n        } else if (getSpecificChatflowApi.error) {\n            const error = getSpecificChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to retrieve chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getSpecificChatflowApi.data, getSpecificChatflowApi.error])\n\n    // Create new chatflow successful\n    useEffect(() => {\n        if (createNewChatflowApi.data) {\n            const chatflow = createNewChatflowApi.data\n            dispatch({ type: SET_CHATFLOW, chatflow })\n            saveChatflowSuccess()\n            window.history.replaceState(null, null, `/canvas/${chatflow.id}`)\n        } else if (createNewChatflowApi.error) {\n            const error = createNewChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [createNewChatflowApi.data, createNewChatflowApi.error])\n\n    // Update chatflow successful\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n            saveChatflowSuccess()\n        } else if (updateChatflowApi.error) {\n            const error = updateChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updateChatflowApi.data, updateChatflowApi.error])\n\n    // Test chatflow failed\n    useEffect(() => {\n        if (testChatflowApi.error) {\n            enqueueSnackbar({\n                message: 'Test chatflow failed',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [testChatflowApi.error])\n\n    useEffect(() => {\n        setChatflow(canvasDataStore.chatflow)\n        if (canvasDataStore.chatflow) {\n            const flowData = canvasDataStore.chatflow.flowData ? JSON.parse(canvasDataStore.chatflow.flowData) : []\n            checkIfUpsertAvailable(flowData.nodes || [], flowData.edges || [])\n        }\n    }, [canvasDataStore.chatflow])\n\n    // Initialization\n    useEffect(() => {\n        if (chatflowId) {\n            getSpecificChatflowApi.request(chatflowId)\n        } else {\n            if (localStorage.getItem('duplicatedFlowData')) {\n                handleLoadFlow(localStorage.getItem('duplicatedFlowData'))\n                setTimeout(() => localStorage.removeItem('duplicatedFlowData'), 0)\n            } else {\n                setNodes([])\n                setEdges([])\n            }\n            dispatch({\n                type: SET_CHATFLOW,\n                chatflow: {\n                    name: 'Untitled chatflow'\n                }\n            })\n        }\n\n        getNodesApi.request()\n\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\n        return () => {\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        setCanvasDataStore(canvas)\n    }, [canvas])\n\n    useEffect(() => {\n        function handlePaste(e) {\n            const pasteData = e.clipboardData.getData('text')\n            //TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\n            if (pasteData.includes('{\"nodes\":[') && pasteData.includes('],\"edges\":[')) {\n                handleLoadFlow(pasteData)\n            }\n        }\n\n        window.addEventListener('paste', handlePaste)\n\n        return () => {\n            window.removeEventListener('paste', handlePaste)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (templateFlowData && templateFlowData.includes('\"nodes\":[') && templateFlowData.includes('],\"edges\":[')) {\n            handleLoadFlow(templateFlowData)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [templateFlowData])\n\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\n\n    return (\n        <>\n            <Box>\n                <AppBar\n                    enableColorOnDark\n                    position='fixed'\n                    color='inherit'\n                    elevation={1}\n                    sx={{\n                        bgcolor: theme.palette.background.default\n                    }}\n                >\n                    <Toolbar>\n                        <CanvasHeader\n                            chatflow={chatflow}\n                            handleSaveFlow={handleSaveFlow}\n                            handleDeleteFlow={handleDeleteFlow}\n                            handleLoadFlow={handleLoadFlow}\n                        />\n                    </Toolbar>\n                </AppBar>\n                <Box sx={{ pt: '70px', height: '100vh', width: '100%' }}>\n                    <div className='reactflow-parent-wrapper'>\n                        <div className='reactflow-wrapper' ref={reactFlowWrapper}>\n                            <ReactFlow\n                                nodes={nodes}\n                                edges={edges}\n                                onNodesChange={onNodesChange}\n                                onNodeClick={onNodeClick}\n                                onEdgesChange={onEdgesChange}\n                                onDrop={onDrop}\n                                onDragOver={onDragOver}\n                                onNodeDragStop={setDirty}\n                                nodeTypes={nodeTypes}\n                                edgeTypes={edgeTypes}\n                                onConnect={onConnect}\n                                onInit={setReactFlowInstance}\n                                fitView\n                                deleteKeyCode={canvas.canvasDialogShow ? null : ['Backspace', 'Delete']}\n                                minZoom={0.1}\n                            >\n                                <Controls\n                                    style={{\n                                        display: 'flex',\n                                        flexDirection: 'row',\n                                        left: '50%',\n                                        transform: 'translate(-50%, -50%)'\n                                    }}\n                                />\n                                <Background color='#aaa' gap={16} />\n                                <AddNodes nodesData={getNodesApi.data} node={selectedNode} />\n                                {isUpsertButtonEnabled && <VectorStorePopUp chatflowid={chatflowId} />}\n                                <ChatPopUp chatflowid={chatflowId} />\n                            </ReactFlow>\n                        </div>\n                    </div>\n                </Box>\n                <ConfirmDialog />\n            </Box>\n        </>\n    )\n}\n\nexport default withAuthenticationRequired(Canvas)\n"],"names":["getAllAPIKeys","client","get","createNewAPI","body","post","updateAPI","id","put","concat","deleteAPI","delete","getAllChatflows","getSpecificChatflow","getSpecificChatflowFromPublicEndpoint","createNewChatflow","updateChatflow","deleteChatflow","getIsChatflowStreaming","_ref","show","dialogProps","onCancel","onConfirm","portalElement","document","getElementById","chatflowName","setChatflowName","useState","isReadyToSave","setIsReadyToSave","useEffect","component","_jsxs","Dialog","open","fullWidth","maxWidth","onClose","children","_jsx","DialogTitle","sx","fontSize","title","DialogContent","OutlinedInput","mt","type","placeholder","value","onChange","e","target","DialogActions","Button","onClick","cancelButtonName","StyledButton","disabled","variant","confirmButtonName","createPortal","dispatch","useDispatch","useNotifier","enqueueSnackbar","enqueueSnackbarAction","arguments","closeSnackbar","closeSnackbarAction","inputFields","setInputFields","prompt","chatbotConfig","setChatbotConfig","addInputField","chatflow","JSON","parse","starterPrompts","Object","getOwnPropertyNames","forEach","key","push","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","style","display","flexDirection","borderRadius","background","padding","alignItems","IconBulb","size","color","marginLeft","fontWeight","Box","m","pt","List","map","data","index","width","mb","handleChange","evnt","name","list","endAdornment","InputAdornment","position","length","IconButton","height","rows","splice","removeInputFields","edge","IconTrash","IconPlus","async","saveResp","chatflowsApi","stringify","message","options","Date","getTime","Math","random","action","IconX","SET_CHATFLOW","error","errorData","response","status","statusText","persist","usePrompt","when","undefined","blocker","navigator","useContext","NavigationContext","unblock","block","tx","autoUnblockingTx","retry","useBlocker","useCallback","window","confirm","TableViewOnly","columns","_Fragment","TableContainer","Paper","Table","minWidth","TableHead","TableRow","col","TableCell","charAt","toUpperCase","slice","TableBody","row","border","keys","_dialogProps$data","getNodeConfigApi","useApi","configApi","request","label","marginRight","backgroundColor","objectFit","alt","src","baseURL","paddingLeft","paddingRight","marginTop","marginBottom","version","badge","description","obj","node","nodeId","rest","CardWrapper","styled","MainCard","theme","palette","card","main","darkTextPrimary","borderColor","primary","boxShadow","LightTooltip","_ref2","className","props","Tooltip","classes","popper","_ref3","tooltipClasses","tooltip","nodeToolTip","shadows","_ref4","_theme$customization","_theme$colors","_theme$customization2","_theme$colors2","_theme$customization3","_theme$colors3","useTheme","canvas","useSelector","state","deleteNode","duplicateNode","flowContext","showDialog","setShowDialog","setDialogProps","showInfoDialog","setShowInfoDialog","infoDialogProps","setInfoDialogProps","warningMessage","setWarningMessage","setOpen","componentNode","componentNodes","find","nd","newVersion","nodeOutdatedMessage","oldVersion","content","selected","text","secondary","canvasDialogShow","handleClose","onOpen","handleOpen","disableFocusListener","customization","isDarkMode","colors","paper","IconCopy","IconInfoCircle","placement","typography","commonAvatar","largeAvatar","cursor","Typography","mr","flexGrow","whiteSpace","IconAlertTriangle","inputAnchors","inputParams","Divider","asyncSelect","p","textAlign","inputAnchor","NodeInputHandler","filter","inputParam","hidden","param","additionalParams","disableRipple","onDialogClicked","outputAnchors","outputAnchor","NodeOutputHandler","AdditionalParamsDialog","NodeInfoDialog","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","markerEnd","edgePath","edgeCenterX","edgeCenterY","getBezierPath","deleteEdge","d","EdgeText","x","y","labelStyle","fill","labelBgStyle","labelBgPadding","labelBgBorderRadius","foreignObjectSize","requiredExtensions","event","onEdgeClick","evt","stopPropagation","SET_DIRTY","icons","IconFileUpload","IconFileExport","IconSearch","IconMessage","IconPictureInPictureOff","url","icon","isSettingsOpen","anchorEl","onSettingsItemClick","onUploadFile","settingsMenu","setSettingsMenu","settings","menu","items","NavItem","item","level","navType","Popper","role","transition","disablePortal","popperOptions","modifiers","offset","zIndex","TransitionProps","Transitions","in","ClickAwayListener","onClickAway","elevation","shadow","PerfectScrollbar","maxHeight","overflowX","defaultConfig","textColor","sendButtonColor","_chatflow$isPublic","_chatbotConfig$genera","_chatbotConfig$title","_chatbotConfig$titleA","_chatbotConfig$welcom","_chatbotConfig$backgr","_chatbotConfig$fontSi","_chatbotConfig$powere","_chatbotConfig$botMes","_chatbotConfig$botMes2","_chatbotConfig$botMes3","_chatbotConfig$botMes4","_chatbotConfig$botMes5","_chatbotConfig$botMes6","_chatbotConfig$botMes7","_chatbotConfig$botMes8","_chatbotConfig$userMe","_chatbotConfig$userMe2","_chatbotConfig$userMe3","_chatbotConfig$userMe4","_chatbotConfig$userMe5","_chatbotConfig$userMe6","_chatbotConfig$userMe7","_chatbotConfig$userMe8","_chatbotConfig$textIn","_chatbotConfig$textIn2","_chatbotConfig$textIn3","_chatbotConfig$textIn4","_chatbotConfig$textIn5","_chatbotConfig$textIn6","_chatbotConfig$textIn7","_chatbotConfig$textIn8","isSessionMemory","chatflowid","isPublicChatflow","setChatflowIsPublic","isPublic","generateNewSession","setGenerateNewSession","setTitle","titleAvatarSrc","setTitleAvatarSrc","welcomeMessage","setWelcomeMessage","setBackgroundColor","setFontSize","poweredByTextColor","setPoweredByTextColor","botMessageBackgroundColor","setBotMessageBackgroundColor","botMessage","botMessageTextColor","setBotMessageTextColor","botMessageAvatarSrc","setBotMessageAvatarSrc","avatarSrc","botMessageShowAvatar","setBotMessageShowAvatar","showAvatar","userMessageBackgroundColor","setUserMessageBackgroundColor","userMessage","userMessageTextColor","setUserMessageTextColor","userMessageAvatarSrc","setUserMessageAvatarSrc","userMessageShowAvatar","setUserMessageShowAvatar","textInputBackgroundColor","setTextInputBackgroundColor","textInput","textInputTextColor","setTextInputTextColor","textInputPlaceholder","setTextInputPlaceholder","textInputSendButtonColor","setTextInputSendButtonColor","colorAnchorEl","setColorAnchorEl","selectedColorConfig","setSelectedColorConfig","sketchPickerColor","setSketchPickerColor","openColorPopOver","Boolean","copyAnchorEl","setCopyAnchorEl","openCopyPopOver","formatObj","overrideConfig","handleCloseCopyPopOver","colorField","fieldName","fieldLabel","pb","currentTarget","booleanField","Switch","checked","onBooleanChanged","textField","fieldType","onTextChanged","Stack","direction","light","clipboard","writeText","setTimeout","IconArrowUpRightCircle","flex","console","onSwitchChange","TooltipWithParser","onSave","Popover","handleClosePopOver","anchorOrigin","vertical","horizontal","transformOrigin","SketchPicker","hexColor","onColorSelected","hex","pl","pr","success","dark","CheckboxInput","myValue","setMyValue","FormControlLabel","control","Checkbox","TabPanel","other","a11yProps","buttonConfig","chatwindowConfig","codes","setValue","embedChatCheckboxVal","setEmbedChatCheckbox","onCheckBoxEmbedChatChanged","newVal","getCode","codeLang","embedPopupHtmlCode","embedFullpageHtmlCode","embedPopupReactCode","embedFullpageReactCode","getCodeCustomization","embedPopupHtmlCodeCustomization","embedFullpageHtmlCodeCustomization","embedPopupReactCodeCustomization","embedFullpageReactCodeCustomization","Tabs","newValue","Tab","CopyBlock","atomOneDark","language","showLineNumbers","wrapLines","Configuration","_apiConfig$rateLimit$","_apiConfig$rateLimit","_apiConfig$rateLimit$2","_apiConfig$rateLimit2","_apiConfig$rateLimit$3","_apiConfig$rateLimit3","apiConfig","limitMax","setLimitMax","rateLimit","limitDuration","setLimitDuration","limitMsg","setLimitMsg","rateLimitFilledValues","Error","_dialogProps$chatflow","navigate","useNavigate","keyOptions","setKeyOptions","apiKeys","setAPIKeys","chatflowApiKeyId","setChatflowApiKeyId","selectedApiKey","setSelectedApiKey","checkboxVal","setCheckbox","nodeConfig","setNodeConfig","nodeConfigExpanded","setNodeConfigExpanded","getAllAPIKeysApi","apiKeyApi","updateChatflowApi","getIsChatflowStreamingApi","getConfigApi","onCheckBoxChanged","handleAccordionChange","nodeLabel","isExpanded","accordianNodes","nodes","isFilter","result","reduce","r","a","create","groupByNodeLabel","getCodeWithAuthorization","apiKey","getLang","getSVG","pythonSVG","javascriptSVG","EmbedSVG","cURLSVG","ShareChatbotSVG","settingsSVG","getConfigCodeWithFormData","configData","fileType","unshiftFiles","includes","split","getConfigExamplesForPython","getConfigExamplesForJS","getConfigExamplesForCurl","getConfigCodeWithFormDataWithAuth","getConfigCode","getConfigCodeWithAuthorization","getMultiConfigCodeWithFormData","keyName","iconPosition","Dropdown","disableClearable","onSelect","keyValue","updateBody","apikeyid","onApiKeySelected","EmbedChat","sort","Accordion","expanded","disableGutters","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","isFormDataRequired","ShareChatbot","analyticProviders","inputs","credentialNames","optional","analytic","setAnalytic","providerExpanded","setProviderExpanded","providerName","inputParamName","prototype","hasOwnProperty","call","provider","accordianProviders","ListItem","margin","ListItemAvatar","ListItemText","ml","rel","href","alignContent","_inputParam$default","_inputParam$default2","CredentialInputHandler","credential","credentialId","SwitchInput","default","Input","_dialogProps$title","setData","ReactJson","quotesOnKeys","enableClipboard","displayDataTypes","params","order","DatePickerCustomInput","forwardRef","ref","ListItemButton","useConfirm","chatlogs","setChatLogs","allChatlogs","setAllChatLogs","chatMessages","setChatMessages","selectedMessageIndex","setSelectedMessageIndex","sourceDialogOpen","setSourceDialogOpen","sourceDialogProps","setSourceDialogProps","chatTypeFilter","setChatTypeFilter","startDate","setStartDate","setMonth","getMonth","endDate","setEndDate","getChatmessageApi","chatmessageApi","getChatmessageFromPKApi","getChatPK","chatmsg","_chatmsg$memoryType2","_chatmsg$sessionId2","chatId","memoryType","sessionId","transformChatPKToParams","chatPK","c1","c2","join","onSourceDialogClick","chatmessages","prevDate","loadedMessages","i","currentDate","createdDate","sourceDocuments","usedTools","fileAnnotations","getChatMessages","allChatMessages","seen","filteredChatLogs","PK","counter","apiContent","userContent","processChatLogs","exportMessages","msg","time","_chatmsg$sessionId","_chatmsg$memoryType","messages","source","chatType","reverse","dataStr","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","startIcon","DatePicker","date","onStartDateSelected","selectsStart","customInput","onEndDateSelected","selectsEnd","minDate","maxDate","MultiDropdown","onChatTypeSelected","chatTypes","formControlSx","justifyContent","msgEmptySVG","flexBasis","overflowY","handleItemClick","idx","overflow","textOverflow","moment","format","confirmPayload","isConfirmed","isClearFromViewMessageDialog","clearChat","IconEraser","robotPNG","userPNG","tool","Chip","clickable","MemoizedReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeMathjax","rehypeRaw","components","code","inline","match","exec","CodeBlock","isDialog","String","replace","fileAnnotation","textTransform","axios","fileName","responseType","blob","Blob","headers","downloadUrl","URL","createObjectURL","link","download","appendChild","remove","downloadFile","endIcon","IconDownload","removeDuplicateURL","metadata","isValidURL","pathname","substring","host","pageContent","timeMessage","SourceDocDialog","handleSaveFlow","handleDeleteFlow","handleLoadFlow","flowNameRef","useRef","settingsRef","isEditingFlowName","setEditingFlowName","flowName","setFlowName","setSettingsOpen","flowDialogOpen","setFlowDialogOpen","apiDialogOpen","setAPIDialogOpen","apiDialogProps","setAPIDialogProps","analyseDialogOpen","setAnalyseDialogOpen","analyseDialogProps","setAnalyseDialogProps","conversationStartersDialogOpen","setConversationStartersDialogOpen","conversationStartersDialogProps","setConversationStartersDialogProps","viewMessagesDialogOpen","setViewMessagesDialogOpen","viewMessagesDialogProps","setViewMessagesDialogProps","ButtonBase","Avatar","mediumAvatar","history","IconChevronLeft","stroke","isDirty","orange","IconPencil","TextField","inputRef","defaultValue","submitFlowName","current","IconCheck","canvasHeader","deployLight","deployDark","onAPIDialogClick","flowData","IconCode","onSaveChatflowClick","IconDeviceFloppy","IconSettings","Settings","setting","localStorage","setItem","uiBaseURL","generateExportFlowData","file","SaveChatflowDialog","APICodeDialog","AnalyseFlowDialog","StarterPromptsDialog","ViewMessagesDialog","StyledFab","Fab","backgroundImage","nodesData","searchValue","setSearchValue","setNodes","categoryExpanded","setCategoryExpanded","anchorRef","prevOpen","ps","scrollTop","curr","filterSearch","returnData","passesQuery","toLowerCase","passesCategory","category","getSearchedNodes","groupByCategory","accordianCategories","categorizeVectorStores","_obj$VectorStores","vsNodes","deprecatingNodes","newNodes","vsNode","contains","focus","SET_COMPONENT_NODES","left","top","handleToggle","IconMinus","my","startAdornment","grey","inputProps","containerRef","el","py","breakpoints","down","warning","teal","onDragStart","dataTransfer","effectAllowed","draggable","sendMessageAndGetPrediction","input","isGrid","onPromptClick","sp","ChatMessage","userInput","setUserInput","loading","setLoading","setMessages","socketIOClientId","setSocketIOClientId","isChatFlowAvailableToStream","setIsChatFlowAvailableToStream","setChatId","getChatflowConfig","setStarterPrompts","scrollToBottom","scrollTo","maxScroll","updateLastMessage","prevMessages","allMessages","cloneDeep","updateLastMessageSourceDocuments","handleSubmit","promptStarterInput","preventDefault","trim","question","predictionApi","json","setLocalStorageChatflow","_inputRef$current2","_inputRef$current","handleError","_getChatmessageApi$da","_getChatmessageApi$da2","_getIsChatflowStreami","_getIsChatflowStreami2","isStreaming","_getChatflowConfig$da","_getChatflowConfig$da2","_getChatflowConfig$da3","config","_inputRef$current3","socket","socketIOClient","on","disconnect","StarterPromptsCard","onSubmit","autoFocus","onKeyDown","isIMEComposition","isComposing","keyCode","shiftKey","multiline","maxRows","CircularProgress","IconSend","onClear","ChatPopUp","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","chatDetails","getItem","objChatDetails","removeItem","resetChatDialog","resetProps","right","expandChat","IconArrowsMaximize","ChatExpandDialog","upsertVectorStore","reactFlowInstance","setIsFormDataRequired","nodeCheckboxExpanded","setCheckboxExpanded","tabValue","setTabValue","expandedVectorNodeId","setExpandedVectorNodeId","setConfigData","vectorNodeId","isMultiple","getCodeWithFormData","getNodeDetail","nodeDetails","inputKeys","_node$data$inputs$nod","getFileName","_nodes$find$nodes2","_nodes$find2","newConfigData","reformatConfigData","item1","some","item2","vectorNode","getNodes","edges","getEdges","getUpsertDetails","_nodes$find$nodes","_nodes$find","checkboxNodes","newIsFormDataRequired","val","BackdropLoader","vectorstoreApi","stopNodeId","vectorStoreNode","onUpsertClicked","VectorStorePopUp","prevopen","IconDatabaseImport","VectorStoreDialog","onUpsert","nodeTypes","customNode","CanvasNode","edgeTypes","buttonedge","ButtonEdge","withAuthenticationRequired","Canvas","useLocation","templateFlowData","URLpath","location","toString","chatflowId","canvasDataStore","setCanvasDataStore","setChatflow","setReactFlowInstance","onNodesChange","useNodesState","setEdges","onEdgesChange","useEdgesState","selectedNode","setSelectedNode","isUpsertButtonEnabled","setIsUpsertButtonEnabled","reactFlowWrapper","getNodesApi","nodesApi","getAllNodes","createNewChatflowApi","testChatflowApi","testChatflow","getSpecificChatflowApi","setDirty","onNodeClick","clickedNode","nds","onDragOver","dropEffect","onDrop","reactFlowBounds","getBoundingClientRect","nodeData","getData","project","clientX","clientY","newNodeId","getUniqueNodeId","newNode","initNode","saveChatflowSuccess","REMOVE_DIRTY","errorFailed","initialFlow","replaceState","checkIfUpsertAvailable","handlePaste","pasteData","clipboardData","addEventListener","removeEventListener","AppBar","enableColorOnDark","bgcolor","Toolbar","CanvasHeader","FLOWISE_CREDENTIAL_ID","omit","rfInstanceObject","toObject","newChatflowBody","deployed","ReactFlow","onNodeDragStop","onConnect","newEdge","sourceHandle","targetHandle","targetNodeId","sourceNodeId","targetInput","ancr","newValues","rearrangeToolsOrdering","acceptVariable","eds","addEdge","onInit","fitView","deleteKeyCode","minZoom","Controls","transform","Background","gap","AddNodes","ConfirmDialog"],"sourceRoot":""}